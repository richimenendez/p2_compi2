
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftMAYORMENORDIGUALDESIGUALMAYORIGUALMENORIGUALleftRESTASUMAleftDIVMULTIPORCENTAJEAND ASK BAND BLEFT BNOT BOR BRIGHT BXOR COMA COSO DECRE DERCOR DERLLAVE DERPAR DESIGUAL DIGUAL DIV DOUBLE DP FLECHA ID IGUAL INCE INTEGER IZQCOR IZQLLAVE IZQPAR MAYOR MAYORIGUAL MENOR MENORIGUAL MULTI NOT OR PCOMA PORCENTAJE PUNTERO PUNTO RESTA STR SUMA SXOR VAR abs array break case char default do double else exit float for goto if int main printf return scanf sizeof struct switch unset while xors    : lbody lbody : lbody body\n              | body\n    body : TYPE ID IZQPAR DERPAR IZQCOR linst DERCOR\n    \n    body : TYPE main IZQPAR DERPAR IZQCOR linst DERCOR\n    body : struct ID IZQCOR linst DERCOR\n    linst : linst inst \n          | inst \n    \n    inst : asig\n         | para\n         | si\n         | mientras\n         | cual\n         | dow\n         | prin\n         | decla\n    asig : ident IGUAL exp PCOMAdecla : TYPE ident IGUAL exp PCOMAmientras : while IZQPAR exp DERPAR IZQCOR linst DERCORdow : do IZQCOR linst DERCOR while IZQPAR exp DERPAR PCOMAsi : if IZQPAR exp DERPAR IZQCOR linst DERCOR lelsi els\n          | if IZQPAR exp DERPAR IZQCOR linst DERCOR els\n    lelsi : lelsi elsi\n        |  elsi\n    elsi : else if IZQPAR exp DERPAR IZQCOR linst DERCORels : else IZQCOR linst DERCOR\n        | para : for IZQPAR exp DERPAR IZQCOR linst DERCORcual : switch IZQPAR exp DERPAR IZQCOR lcase def DERCOR \n    lcase : lcase caso\n        | caso\n    \n    caso : case ID DP linst break PCOMA\n        | case ID DP linst \n    def : default DP linst break PCOMA\n           |prin : printf IZQPAR STR lexpr DERPAR PCOMAexp : scanf IZQPAR DERPAR\n        lexpr : lexpr COMA exp\n             | COMA exp\n    \n    ident   :  ID\n    \n    exp : exp     SUMA    exp\n        | exp     RESTA   exp  \n        | exp     MULTI   exp\n        | exp     DIV     exp\n        | exp     PORCENTAJE     exp\n        | exp     DIGUAL     exp\n        | exp     DESIGUAL     exp\n        | exp     MAYOR     exp\n        | exp     MENOR     exp\n        | exp     MAYORIGUAL     exp\n        | exp     MENORIGUAL     exp\n    \n    exp  : DOUBLE\n    exp  : INTEGERexp  : identexp  : STR\n    TYPE : int\n        | float\n        | char\n        | double\n    '
    
_lr_action_items = {'struct':([0,2,3,10,40,65,66,],[5,5,-3,-2,-6,-4,-5,]),'int':([0,2,3,10,16,20,21,22,23,24,25,26,27,28,29,38,39,40,41,47,50,51,62,65,66,67,100,101,102,108,109,110,111,116,118,119,120,126,127,128,130,131,132,134,135,136,138,139,140,141,145,150,151,152,],[6,6,-3,-2,6,6,-8,-9,-10,-11,-12,-13,-14,-15,-16,6,6,-6,-7,6,6,6,6,-4,-5,-17,6,6,6,-18,6,6,6,-36,-28,-27,-19,-27,-22,-24,-29,6,6,-21,-23,6,6,6,-20,6,-26,6,6,-25,]),'float':([0,2,3,10,16,20,21,22,23,24,25,26,27,28,29,38,39,40,41,47,50,51,62,65,66,67,100,101,102,108,109,110,111,116,118,119,120,126,127,128,130,131,132,134,135,136,138,139,140,141,145,150,151,152,],[7,7,-3,-2,7,7,-8,-9,-10,-11,-12,-13,-14,-15,-16,7,7,-6,-7,7,7,7,7,-4,-5,-17,7,7,7,-18,7,7,7,-36,-28,-27,-19,-27,-22,-24,-29,7,7,-21,-23,7,7,7,-20,7,-26,7,7,-25,]),'char':([0,2,3,10,16,20,21,22,23,24,25,26,27,28,29,38,39,40,41,47,50,51,62,65,66,67,100,101,102,108,109,110,111,116,118,119,120,126,127,128,130,131,132,134,135,136,138,139,140,141,145,150,151,152,],[8,8,-3,-2,8,8,-8,-9,-10,-11,-12,-13,-14,-15,-16,8,8,-6,-7,8,8,8,8,-4,-5,-17,8,8,8,-18,8,8,8,-36,-28,-27,-19,-27,-22,-24,-29,8,8,-21,-23,8,8,8,-20,8,-26,8,8,-25,]),'double':([0,2,3,10,16,20,21,22,23,24,25,26,27,28,29,38,39,40,41,47,50,51,62,65,66,67,100,101,102,108,109,110,111,116,118,119,120,126,127,128,130,131,132,134,135,136,138,139,140,141,145,150,151,152,],[9,9,-3,-2,9,9,-8,-9,-10,-11,-12,-13,-14,-15,-16,9,9,-6,-7,9,9,9,9,-4,-5,-17,9,9,9,-18,9,9,9,-36,-28,-27,-19,-27,-22,-24,-29,9,9,-21,-23,9,9,9,-20,9,-26,9,9,-25,]),'$end':([1,2,3,10,40,65,66,],[0,-1,-3,-2,-6,-4,-5,]),'ID':([4,5,6,7,8,9,16,20,21,22,23,24,25,26,27,28,29,37,38,39,41,42,43,44,45,46,47,50,51,62,64,67,68,69,70,71,72,73,74,75,76,77,78,86,100,101,102,106,108,109,110,111,114,115,116,118,119,120,126,127,128,130,131,132,134,135,136,138,139,140,141,142,145,150,151,152,],[11,13,-56,-57,-58,-59,19,19,-8,-9,-10,-11,-12,-13,-14,-15,-16,19,19,19,-7,19,19,19,19,19,19,19,19,19,19,-17,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,-18,19,19,19,124,19,-36,-28,-27,-19,-27,-22,-24,-29,19,19,-21,-23,19,19,19,-20,19,19,-26,19,19,-25,]),'main':([4,6,7,8,9,],[12,-56,-57,-58,-59,]),'IZQPAR':([11,12,31,32,33,34,36,54,104,137,],[14,15,43,44,45,46,48,79,115,142,]),'IZQCOR':([13,17,18,35,80,81,82,83,129,149,],[16,38,39,47,100,101,102,103,136,150,]),'DERPAR':([14,15,19,52,55,56,57,58,59,60,61,79,85,88,89,90,91,92,93,94,95,96,97,98,99,107,117,125,146,],[17,18,-40,-54,-52,-53,-55,80,81,82,83,99,105,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-37,-39,-38,133,149,]),'for':([16,20,21,22,23,24,25,26,27,28,29,38,39,41,47,50,51,62,67,100,101,102,108,109,110,111,116,118,119,120,126,127,128,130,131,132,134,135,136,138,139,140,141,145,150,151,152,],[31,31,-8,-9,-10,-11,-12,-13,-14,-15,-16,31,31,-7,31,31,31,31,-17,31,31,31,-18,31,31,31,-36,-28,-27,-19,-27,-22,-24,-29,31,31,-21,-23,31,31,31,-20,31,-26,31,31,-25,]),'if':([16,20,21,22,23,24,25,26,27,28,29,38,39,41,47,50,51,62,67,100,101,102,108,109,110,111,116,118,119,120,126,127,128,129,130,131,132,134,135,136,138,139,140,141,145,150,151,152,],[32,32,-8,-9,-10,-11,-12,-13,-14,-15,-16,32,32,-7,32,32,32,32,-17,32,32,32,-18,32,32,32,-36,-28,-27,-19,-27,-22,-24,137,-29,32,32,-21,-23,32,32,32,-20,32,-26,32,32,-25,]),'while':([16,20,21,22,23,24,25,26,27,28,29,38,39,41,47,50,51,62,67,84,100,101,102,108,109,110,111,116,118,119,120,126,127,128,130,131,132,134,135,136,138,139,140,141,145,150,151,152,],[33,33,-8,-9,-10,-11,-12,-13,-14,-15,-16,33,33,-7,33,33,33,33,-17,104,33,33,33,-18,33,33,33,-36,-28,-27,-19,-27,-22,-24,-29,33,33,-21,-23,33,33,33,-20,33,-26,33,33,-25,]),'switch':([16,20,21,22,23,24,25,26,27,28,29,38,39,41,47,50,51,62,67,100,101,102,108,109,110,111,116,118,119,120,126,127,128,130,131,132,134,135,136,138,139,140,141,145,150,151,152,],[34,34,-8,-9,-10,-11,-12,-13,-14,-15,-16,34,34,-7,34,34,34,34,-17,34,34,34,-18,34,34,34,-36,-28,-27,-19,-27,-22,-24,-29,34,34,-21,-23,34,34,34,-20,34,-26,34,34,-25,]),'do':([16,20,21,22,23,24,25,26,27,28,29,38,39,41,47,50,51,62,67,100,101,102,108,109,110,111,116,118,119,120,126,127,128,130,131,132,134,135,136,138,139,140,141,145,150,151,152,],[35,35,-8,-9,-10,-11,-12,-13,-14,-15,-16,35,35,-7,35,35,35,35,-17,35,35,35,-18,35,35,35,-36,-28,-27,-19,-27,-22,-24,-29,35,35,-21,-23,35,35,35,-20,35,-26,35,35,-25,]),'printf':([16,20,21,22,23,24,25,26,27,28,29,38,39,41,47,50,51,62,67,100,101,102,108,109,110,111,116,118,119,120,126,127,128,130,131,132,134,135,136,138,139,140,141,145,150,151,152,],[36,36,-8,-9,-10,-11,-12,-13,-14,-15,-16,36,36,-7,36,36,36,36,-17,36,36,36,-18,36,36,36,-36,-28,-27,-19,-27,-22,-24,-29,36,36,-21,-23,36,36,36,-20,36,-26,36,36,-25,]),'IGUAL':([19,30,49,],[-40,42,64,]),'PCOMA':([19,52,53,55,56,57,87,88,89,90,91,92,93,94,95,96,97,98,99,105,133,143,144,],[-40,-54,67,-52,-53,-55,108,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-37,116,140,147,148,]),'SUMA':([19,52,53,55,56,57,58,59,60,61,87,88,89,90,91,92,93,94,95,96,97,98,99,107,117,125,146,],[-40,-54,68,-52,-53,-55,68,68,68,68,68,-41,-42,-43,-44,-45,68,68,68,68,68,68,-37,68,68,68,68,]),'RESTA':([19,52,53,55,56,57,58,59,60,61,87,88,89,90,91,92,93,94,95,96,97,98,99,107,117,125,146,],[-40,-54,69,-52,-53,-55,69,69,69,69,69,-41,-42,-43,-44,-45,69,69,69,69,69,69,-37,69,69,69,69,]),'MULTI':([19,52,53,55,56,57,58,59,60,61,87,88,89,90,91,92,93,94,95,96,97,98,99,107,117,125,146,],[-40,-54,70,-52,-53,-55,70,70,70,70,70,70,70,-43,-44,-45,70,70,70,70,70,70,-37,70,70,70,70,]),'DIV':([19,52,53,55,56,57,58,59,60,61,87,88,89,90,91,92,93,94,95,96,97,98,99,107,117,125,146,],[-40,-54,71,-52,-53,-55,71,71,71,71,71,71,71,-43,-44,-45,71,71,71,71,71,71,-37,71,71,71,71,]),'PORCENTAJE':([19,52,53,55,56,57,58,59,60,61,87,88,89,90,91,92,93,94,95,96,97,98,99,107,117,125,146,],[-40,-54,72,-52,-53,-55,72,72,72,72,72,72,72,-43,-44,-45,72,72,72,72,72,72,-37,72,72,72,72,]),'DIGUAL':([19,52,53,55,56,57,58,59,60,61,87,88,89,90,91,92,93,94,95,96,97,98,99,107,117,125,146,],[-40,-54,73,-52,-53,-55,73,73,73,73,73,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-37,73,73,73,73,]),'DESIGUAL':([19,52,53,55,56,57,58,59,60,61,87,88,89,90,91,92,93,94,95,96,97,98,99,107,117,125,146,],[-40,-54,74,-52,-53,-55,74,74,74,74,74,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-37,74,74,74,74,]),'MAYOR':([19,52,53,55,56,57,58,59,60,61,87,88,89,90,91,92,93,94,95,96,97,98,99,107,117,125,146,],[-40,-54,75,-52,-53,-55,75,75,75,75,75,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-37,75,75,75,75,]),'MENOR':([19,52,53,55,56,57,58,59,60,61,87,88,89,90,91,92,93,94,95,96,97,98,99,107,117,125,146,],[-40,-54,76,-52,-53,-55,76,76,76,76,76,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-37,76,76,76,76,]),'MAYORIGUAL':([19,52,53,55,56,57,58,59,60,61,87,88,89,90,91,92,93,94,95,96,97,98,99,107,117,125,146,],[-40,-54,77,-52,-53,-55,77,77,77,77,77,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-37,77,77,77,77,]),'MENORIGUAL':([19,52,53,55,56,57,58,59,60,61,87,88,89,90,91,92,93,94,95,96,97,98,99,107,117,125,146,],[-40,-54,78,-52,-53,-55,78,78,78,78,78,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-37,78,78,78,78,]),'COMA':([19,52,55,56,57,63,85,88,89,90,91,92,93,94,95,96,97,98,99,107,117,],[-40,-54,-52,-53,-55,86,106,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-37,-39,-38,]),'DERCOR':([20,21,22,23,24,25,26,27,28,29,41,50,51,62,67,108,109,110,111,112,113,116,118,119,120,121,122,126,127,128,130,134,135,139,140,141,145,147,148,151,152,],[40,-8,-9,-10,-11,-12,-13,-14,-15,-16,-7,65,66,84,-17,-18,118,119,120,-35,-31,-36,-28,-27,-19,130,-30,-27,-22,-24,-29,-21,-23,-33,-20,145,-26,-34,-32,152,-25,]),'break':([21,22,23,24,25,26,27,28,29,41,67,108,116,118,119,120,126,127,128,130,134,135,138,139,140,145,152,],[-8,-9,-10,-11,-12,-13,-14,-15,-16,-7,-17,-18,-36,-28,-27,-19,-27,-22,-24,-29,-21,-23,143,144,-20,-26,-25,]),'default':([21,22,23,24,25,26,27,28,29,41,67,108,112,113,116,118,119,120,122,126,127,128,130,134,135,139,140,145,148,152,],[-8,-9,-10,-11,-12,-13,-14,-15,-16,-7,-17,-18,123,-31,-36,-28,-27,-19,-30,-27,-22,-24,-29,-21,-23,-33,-20,-26,-32,-25,]),'case':([21,22,23,24,25,26,27,28,29,41,67,103,108,112,113,116,118,119,120,122,126,127,128,130,134,135,139,140,145,148,152,],[-8,-9,-10,-11,-12,-13,-14,-15,-16,-7,-17,114,-18,114,-31,-36,-28,-27,-19,-30,-27,-22,-24,-29,-21,-23,-33,-20,-26,-32,-25,]),'scanf':([42,43,44,45,46,64,68,69,70,71,72,73,74,75,76,77,78,86,106,115,142,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'DOUBLE':([42,43,44,45,46,64,68,69,70,71,72,73,74,75,76,77,78,86,106,115,142,],[55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'INTEGER':([42,43,44,45,46,64,68,69,70,71,72,73,74,75,76,77,78,86,106,115,142,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'STR':([42,43,44,45,46,48,64,68,69,70,71,72,73,74,75,76,77,78,86,106,115,142,],[57,57,57,57,57,63,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'else':([119,126,128,135,152,],[129,129,-24,-23,-25,]),'DP':([123,124,],[131,132,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'s':([0,],[1,]),'lbody':([0,],[2,]),'body':([0,2,],[3,10,]),'TYPE':([0,2,16,20,38,39,47,50,51,62,100,101,102,109,110,111,131,132,136,138,139,141,150,151,],[4,4,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'linst':([16,38,39,47,100,101,102,131,132,136,150,],[20,50,51,62,109,110,111,138,139,141,151,]),'inst':([16,20,38,39,47,50,51,62,100,101,102,109,110,111,131,132,136,138,139,141,150,151,],[21,41,21,21,21,41,41,41,21,21,21,41,41,41,21,21,21,41,41,41,21,41,]),'asig':([16,20,38,39,47,50,51,62,100,101,102,109,110,111,131,132,136,138,139,141,150,151,],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'para':([16,20,38,39,47,50,51,62,100,101,102,109,110,111,131,132,136,138,139,141,150,151,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'si':([16,20,38,39,47,50,51,62,100,101,102,109,110,111,131,132,136,138,139,141,150,151,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'mientras':([16,20,38,39,47,50,51,62,100,101,102,109,110,111,131,132,136,138,139,141,150,151,],[25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'cual':([16,20,38,39,47,50,51,62,100,101,102,109,110,111,131,132,136,138,139,141,150,151,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'dow':([16,20,38,39,47,50,51,62,100,101,102,109,110,111,131,132,136,138,139,141,150,151,],[27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'prin':([16,20,38,39,47,50,51,62,100,101,102,109,110,111,131,132,136,138,139,141,150,151,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'decla':([16,20,38,39,47,50,51,62,100,101,102,109,110,111,131,132,136,138,139,141,150,151,],[29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'ident':([16,20,37,38,39,42,43,44,45,46,47,50,51,62,64,68,69,70,71,72,73,74,75,76,77,78,86,100,101,102,106,109,110,111,115,131,132,136,138,139,141,142,150,151,],[30,30,49,30,30,52,52,52,52,52,30,30,30,30,52,52,52,52,52,52,52,52,52,52,52,52,52,30,30,30,52,30,30,30,52,30,30,30,30,30,30,52,30,30,]),'exp':([42,43,44,45,46,64,68,69,70,71,72,73,74,75,76,77,78,86,106,115,142,],[53,58,59,60,61,87,88,89,90,91,92,93,94,95,96,97,98,107,117,125,146,]),'lexpr':([63,],[85,]),'lcase':([103,],[112,]),'caso':([103,112,],[113,122,]),'def':([112,],[121,]),'lelsi':([119,],[126,]),'els':([119,126,],[127,134,]),'elsi':([119,126,],[128,135,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> s","S'",1,None,None,None),
  ('s -> lbody','s',1,'p_s_tag','gramaticaC.py',219),
  ('lbody -> lbody body','lbody',2,'p_lbody','gramaticaC.py',223),
  ('lbody -> body','lbody',1,'p_lbody','gramaticaC.py',224),
  ('body -> TYPE ID IZQPAR DERPAR IZQCOR linst DERCOR','body',7,'p_body','gramaticaC.py',234),
  ('body -> TYPE main IZQPAR DERPAR IZQCOR linst DERCOR','body',7,'p_body2','gramaticaC.py',240),
  ('body -> struct ID IZQCOR linst DERCOR','body',5,'p_body_str','gramaticaC.py',245),
  ('linst -> linst inst','linst',2,'p_linst','gramaticaC.py',250),
  ('linst -> inst','linst',1,'p_linst','gramaticaC.py',251),
  ('inst -> asig','inst',1,'p_inst','gramaticaC.py',270),
  ('inst -> para','inst',1,'p_inst','gramaticaC.py',271),
  ('inst -> si','inst',1,'p_inst','gramaticaC.py',272),
  ('inst -> mientras','inst',1,'p_inst','gramaticaC.py',273),
  ('inst -> cual','inst',1,'p_inst','gramaticaC.py',274),
  ('inst -> dow','inst',1,'p_inst','gramaticaC.py',275),
  ('inst -> prin','inst',1,'p_inst','gramaticaC.py',276),
  ('inst -> decla','inst',1,'p_inst','gramaticaC.py',277),
  ('asig -> ident IGUAL exp PCOMA','asig',4,'p_asig','gramaticaC.py',282),
  ('decla -> TYPE ident IGUAL exp PCOMA','decla',5,'p_declara','gramaticaC.py',287),
  ('mientras -> while IZQPAR exp DERPAR IZQCOR linst DERCOR','mientras',7,'p_while','gramaticaC.py',291),
  ('dow -> do IZQCOR linst DERCOR while IZQPAR exp DERPAR PCOMA','dow',9,'p_dow','gramaticaC.py',294),
  ('si -> if IZQPAR exp DERPAR IZQCOR linst DERCOR lelsi els','si',9,'p_if','gramaticaC.py',298),
  ('si -> if IZQPAR exp DERPAR IZQCOR linst DERCOR els','si',8,'p_if','gramaticaC.py',299),
  ('lelsi -> lelsi elsi','lelsi',2,'p_lelif','gramaticaC.py',307),
  ('lelsi -> elsi','lelsi',1,'p_lelif','gramaticaC.py',308),
  ('elsi -> else if IZQPAR exp DERPAR IZQCOR linst DERCOR','elsi',8,'p_elif','gramaticaC.py',318),
  ('els -> else IZQCOR linst DERCOR','els',4,'p_else','gramaticaC.py',321),
  ('els -> <empty>','els',0,'p_else','gramaticaC.py',322),
  ('para -> for IZQPAR exp DERPAR IZQCOR linst DERCOR','para',7,'p_for','gramaticaC.py',329),
  ('cual -> switch IZQPAR exp DERPAR IZQCOR lcase def DERCOR','cual',8,'p_switch','gramaticaC.py',332),
  ('lcase -> lcase caso','lcase',2,'p_lcase','gramaticaC.py',336),
  ('lcase -> caso','lcase',1,'p_lcase','gramaticaC.py',337),
  ('caso -> case ID DP linst break PCOMA','caso',6,'p_case','gramaticaC.py',342),
  ('caso -> case ID DP linst','caso',4,'p_case','gramaticaC.py',343),
  ('def -> default DP linst break PCOMA','def',5,'p_def','gramaticaC.py',347),
  ('def -> <empty>','def',0,'p_def','gramaticaC.py',348),
  ('prin -> printf IZQPAR STR lexpr DERPAR PCOMA','prin',6,'p_printf','gramaticaC.py',352),
  ('exp -> scanf IZQPAR DERPAR','exp',3,'p_readf','gramaticaC.py',356),
  ('lexpr -> lexpr COMA exp','lexpr',3,'p_lexp','gramaticaC.py',361),
  ('lexpr -> COMA exp','lexpr',2,'p_lexp','gramaticaC.py',362),
  ('ident -> ID','ident',1,'p_ids','gramaticaC.py',373),
  ('exp -> exp SUMA exp','exp',3,'p_expresion','gramaticaC.py',380),
  ('exp -> exp RESTA exp','exp',3,'p_expresion','gramaticaC.py',381),
  ('exp -> exp MULTI exp','exp',3,'p_expresion','gramaticaC.py',382),
  ('exp -> exp DIV exp','exp',3,'p_expresion','gramaticaC.py',383),
  ('exp -> exp PORCENTAJE exp','exp',3,'p_expresion','gramaticaC.py',384),
  ('exp -> exp DIGUAL exp','exp',3,'p_expresion','gramaticaC.py',385),
  ('exp -> exp DESIGUAL exp','exp',3,'p_expresion','gramaticaC.py',386),
  ('exp -> exp MAYOR exp','exp',3,'p_expresion','gramaticaC.py',387),
  ('exp -> exp MENOR exp','exp',3,'p_expresion','gramaticaC.py',388),
  ('exp -> exp MAYORIGUAL exp','exp',3,'p_expresion','gramaticaC.py',389),
  ('exp -> exp MENORIGUAL exp','exp',3,'p_expresion','gramaticaC.py',390),
  ('exp -> DOUBLE','exp',1,'p_value_dou','gramaticaC.py',418),
  ('exp -> INTEGER','exp',1,'p_value_ent','gramaticaC.py',423),
  ('exp -> ident','exp',1,'p_value_id','gramaticaC.py',427),
  ('exp -> STR','exp',1,'p_value_str','gramaticaC.py',431),
  ('TYPE -> int','TYPE',1,'p_type','gramaticaC.py',436),
  ('TYPE -> float','TYPE',1,'p_type','gramaticaC.py',437),
  ('TYPE -> char','TYPE',1,'p_type','gramaticaC.py',438),
  ('TYPE -> double','TYPE',1,'p_type','gramaticaC.py',439),
]
