Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    FLECHA
    SXOR
    VAR
    abs
    array
    exit
    unset
    xor

Grammar

Rule 0     S' -> s
Rule 1     s -> lbody
Rule 2     lbody -> lbody body
Rule 3     lbody -> body
Rule 4     body -> TYPE ID IZQPAR lpam DERPAR IZQCOR linst DERCOR
Rule 5     body -> TYPE main IZQPAR lpam DERPAR IZQCOR linst DERCOR
Rule 6     body -> struct ident IZQCOR linst DERCOR PCOMA
Rule 7     body -> decla PCOMA
Rule 8     linst -> linst inst
Rule 9     linst -> inst
Rule 10    lpam -> lparam
Rule 11    lpam -> <empty>
Rule 12    lparam -> lparam COMA TYPE ident
Rule 13    lparam -> TYPE ident
Rule 14    inst -> asig PCOMA
Rule 15    inst -> para
Rule 16    inst -> si
Rule 17    inst -> mientras
Rule 18    inst -> cual
Rule 19    inst -> call
Rule 20    inst -> dow
Rule 21    inst -> asg
Rule 22    inst -> prin
Rule 23    inst -> decla PCOMA
Rule 24    inst -> tag
Rule 25    inst -> gotot PCOMA
Rule 26    inst -> brk PCOMA
Rule 27    inst -> ret PCOMA
Rule 28    asg -> TYPE lids PCOMA
Rule 29    lids -> lids COMA ident
Rule 30    lids -> ident
Rule 31    call -> ident IZQPAR plex DERPAR PCOMA
Rule 32    brk -> break
Rule 33    ret -> return exp
Rule 34    ret -> return
Rule 35    plex -> lex
Rule 36    plex -> <empty>
Rule 37    lex -> lex COMA exp
Rule 38    lex -> exp
Rule 39    tag -> ident DP
Rule 40    gotot -> goto ident
Rule 41    asig -> ident lacs IGUAL exp
Rule 42    asig -> ident IGUAL exp
Rule 43    asig -> ident lacs INCE
Rule 44    asig -> ident INCE
Rule 45    asig -> ident lacs DECRE
Rule 46    asig -> ident DECRE
Rule 47    decla -> TYPE ident lacs IGUAL exp
Rule 48    decla -> TYPE ident IGUAL exp
Rule 49    mientras -> while IZQPAR exp DERPAR IZQCOR linst DERCOR
Rule 50    dow -> do IZQCOR linst DERCOR while IZQPAR exp DERPAR PCOMA
Rule 51    si -> if IZQPAR exp DERPAR IZQCOR linst DERCOR lelsi els
Rule 52    si -> if IZQPAR exp DERPAR IZQCOR linst DERCOR els
Rule 53    lelsi -> lelsi elsi
Rule 54    lelsi -> elsi
Rule 55    elsi -> else if IZQPAR exp DERPAR IZQCOR linst DERCOR
Rule 56    els -> else IZQCOR linst DERCOR
Rule 57    els -> <empty>
Rule 58    para -> for IZQPAR para1 exp PCOMA para2 DERPAR IZQCOR linst DERCOR
Rule 59    para1 -> asig PCOMA
Rule 60    para1 -> decla PCOMA
Rule 61    para2 -> asig
Rule 62    para2 -> decla
Rule 63    para2 -> exp
Rule 64    cual -> switch IZQPAR exp DERPAR IZQCOR lcase def DERCOR
Rule 65    lcase -> lcase caso
Rule 66    lcase -> caso
Rule 67    caso -> case ID DP linst break PCOMA
Rule 68    caso -> case ID DP linst
Rule 69    def -> default DP linst break PCOMA
Rule 70    def -> <empty>
Rule 71    prin -> printf IZQPAR STR lexpr DERPAR PCOMA
Rule 72    prin -> printf IZQPAR STR DERPAR PCOMA
Rule 73    exp -> scanf IZQPAR DERPAR
Rule 74    lexpr -> lexpr COMA exp
Rule 75    lexpr -> COMA exp
Rule 76    ident -> ID
Rule 77    lacs -> lacs acs
Rule 78    lacs -> acs
Rule 79    acs -> IZQLLAVE exp DERLLAVE
Rule 80    acs -> PUNTO ID
Rule 81    exp -> exp SUMA exp
Rule 82    exp -> exp RESTA exp
Rule 83    exp -> exp MULTI exp
Rule 84    exp -> exp DIV exp
Rule 85    exp -> exp PORCENTAJE exp
Rule 86    exp -> exp DIGUAL exp
Rule 87    exp -> exp DESIGUAL exp
Rule 88    exp -> exp MAYOR exp
Rule 89    exp -> exp MENOR exp
Rule 90    exp -> exp MAYORIGUAL exp
Rule 91    exp -> exp MENORIGUAL exp
Rule 92    exp -> exp AND exp
Rule 93    exp -> exp OR exp
Rule 94    exp -> exp BAND exp
Rule 95    exp -> exp BOR exp
Rule 96    exp -> exp BXOR exp
Rule 97    exp -> exp BLEFT exp
Rule 98    exp -> exp BRIGHT exp
Rule 99    exp -> RESTA exp
Rule 100   exp -> NOT exp
Rule 101   exp -> BNOT exp
Rule 102   exp -> sizeof exp
Rule 103   exp -> IZQPAR exp DERPAR
Rule 104   exp -> IZQPAR TYPE DERPAR exp
Rule 105   exp -> exp ASK exp DP exp
Rule 106   exp -> DOUBLE
Rule 107   exp -> INTEGER
Rule 108   exp -> ident
Rule 109   exp -> ident lacs
Rule 110   exp -> STR
Rule 111   exp -> IZQCOR lex DERCOR
Rule 112   TYPE -> int
Rule 113   TYPE -> float
Rule 114   TYPE -> char
Rule 115   TYPE -> double
Rule 116   TYPE -> void

Terminals, with rules where they appear

AND                  : 92
ASK                  : 105
BAND                 : 94
BLEFT                : 97
BNOT                 : 101
BOR                  : 95
BRIGHT               : 98
BXOR                 : 96
COMA                 : 12 29 37 74 75
DECRE                : 45 46
DERCOR               : 4 5 6 49 50 51 52 55 56 58 64 111
DERLLAVE             : 79
DERPAR               : 4 5 31 49 50 51 52 55 58 64 71 72 73 103 104
DESIGUAL             : 87
DIGUAL               : 86
DIV                  : 84
DOUBLE               : 106
DP                   : 39 67 68 69 105
FLECHA               : 
ID                   : 4 67 68 76 80
IGUAL                : 41 42 47 48
INCE                 : 43 44
INTEGER              : 107
IZQCOR               : 4 5 6 49 50 51 52 55 56 58 64 111
IZQLLAVE             : 79
IZQPAR               : 4 5 31 49 50 51 52 55 58 64 71 72 73 103 104
MAYOR                : 88
MAYORIGUAL           : 90
MENOR                : 89
MENORIGUAL           : 91
MULTI                : 83
NOT                  : 100
OR                   : 93
PCOMA                : 6 7 14 23 25 26 27 28 31 50 58 59 60 67 69 71 72
PORCENTAJE           : 85
PUNTO                : 80
RESTA                : 82 99
STR                  : 71 72 110
SUMA                 : 81
SXOR                 : 
VAR                  : 
abs                  : 
array                : 
break                : 32 67 69
case                 : 67 68
char                 : 114
default              : 69
do                   : 50
double               : 115
else                 : 55 56
error                : 
exit                 : 
float                : 113
for                  : 58
goto                 : 40
if                   : 51 52 55
int                  : 112
main                 : 5
printf               : 71 72
return               : 33 34
scanf                : 73
sizeof               : 102
struct               : 6
switch               : 64
unset                : 
void                 : 116
while                : 49 50
xor                  : 

Nonterminals, with rules where they appear

TYPE                 : 4 5 12 13 28 47 48 104
acs                  : 77 78
asg                  : 21
asig                 : 14 59 61
body                 : 2 3
brk                  : 26
call                 : 19
caso                 : 65 66
cual                 : 18
decla                : 7 23 60 62
def                  : 64
dow                  : 20
els                  : 51 52
elsi                 : 53 54
exp                  : 33 37 38 41 42 47 48 49 50 51 52 55 58 63 64 74 75 79 81 81 82 82 83 83 84 84 85 85 86 86 87 87 88 88 89 89 90 90 91 91 92 92 93 93 94 94 95 95 96 96 97 97 98 98 99 100 101 102 103 104 105 105 105
gotot                : 25
ident                : 6 12 13 29 30 31 39 40 41 42 43 44 45 46 47 48 108 109
inst                 : 8 9
lacs                 : 41 43 45 47 77 109
lbody                : 1 2
lcase                : 64 65
lelsi                : 51 53
lex                  : 35 37 111
lexpr                : 71 74
lids                 : 28 29
linst                : 4 5 6 8 49 50 51 52 55 56 58 67 68 69
lpam                 : 4 5
lparam               : 10 12
mientras             : 17
para                 : 15
para1                : 58
para2                : 58
plex                 : 31
prin                 : 22
ret                  : 27
s                    : 0
si                   : 16
tag                  : 24

Parsing method: LALR

state 0

    (0) S' -> . s
    (1) s -> . lbody
    (2) lbody -> . lbody body
    (3) lbody -> . body
    (4) body -> . TYPE ID IZQPAR lpam DERPAR IZQCOR linst DERCOR
    (5) body -> . TYPE main IZQPAR lpam DERPAR IZQCOR linst DERCOR
    (6) body -> . struct ident IZQCOR linst DERCOR PCOMA
    (7) body -> . decla PCOMA
    (112) TYPE -> . int
    (113) TYPE -> . float
    (114) TYPE -> . char
    (115) TYPE -> . double
    (116) TYPE -> . void
    (47) decla -> . TYPE ident lacs IGUAL exp
    (48) decla -> . TYPE ident IGUAL exp

    struct          shift and go to state 5
    int             shift and go to state 7
    float           shift and go to state 8
    char            shift and go to state 9
    double          shift and go to state 10
    void            shift and go to state 11

    s                              shift and go to state 1
    lbody                          shift and go to state 2
    body                           shift and go to state 3
    TYPE                           shift and go to state 4
    decla                          shift and go to state 6

state 1

    (0) S' -> s .



state 2

    (1) s -> lbody .
    (2) lbody -> lbody . body
    (4) body -> . TYPE ID IZQPAR lpam DERPAR IZQCOR linst DERCOR
    (5) body -> . TYPE main IZQPAR lpam DERPAR IZQCOR linst DERCOR
    (6) body -> . struct ident IZQCOR linst DERCOR PCOMA
    (7) body -> . decla PCOMA
    (112) TYPE -> . int
    (113) TYPE -> . float
    (114) TYPE -> . char
    (115) TYPE -> . double
    (116) TYPE -> . void
    (47) decla -> . TYPE ident lacs IGUAL exp
    (48) decla -> . TYPE ident IGUAL exp

    $end            reduce using rule 1 (s -> lbody .)
    struct          shift and go to state 5
    int             shift and go to state 7
    float           shift and go to state 8
    char            shift and go to state 9
    double          shift and go to state 10
    void            shift and go to state 11

    body                           shift and go to state 12
    TYPE                           shift and go to state 4
    decla                          shift and go to state 6

state 3

    (3) lbody -> body .

    struct          reduce using rule 3 (lbody -> body .)
    int             reduce using rule 3 (lbody -> body .)
    float           reduce using rule 3 (lbody -> body .)
    char            reduce using rule 3 (lbody -> body .)
    double          reduce using rule 3 (lbody -> body .)
    void            reduce using rule 3 (lbody -> body .)
    $end            reduce using rule 3 (lbody -> body .)


state 4

    (4) body -> TYPE . ID IZQPAR lpam DERPAR IZQCOR linst DERCOR
    (5) body -> TYPE . main IZQPAR lpam DERPAR IZQCOR linst DERCOR
    (47) decla -> TYPE . ident lacs IGUAL exp
    (48) decla -> TYPE . ident IGUAL exp
    (76) ident -> . ID

    ID              shift and go to state 13
    main            shift and go to state 14

    ident                          shift and go to state 15

state 5

    (6) body -> struct . ident IZQCOR linst DERCOR PCOMA
    (76) ident -> . ID

    ID              shift and go to state 17

    ident                          shift and go to state 16

state 6

    (7) body -> decla . PCOMA

    PCOMA           shift and go to state 18


state 7

    (112) TYPE -> int .

    ID              reduce using rule 112 (TYPE -> int .)
    main            reduce using rule 112 (TYPE -> int .)
    DERPAR          reduce using rule 112 (TYPE -> int .)


state 8

    (113) TYPE -> float .

    ID              reduce using rule 113 (TYPE -> float .)
    main            reduce using rule 113 (TYPE -> float .)
    DERPAR          reduce using rule 113 (TYPE -> float .)


state 9

    (114) TYPE -> char .

    ID              reduce using rule 114 (TYPE -> char .)
    main            reduce using rule 114 (TYPE -> char .)
    DERPAR          reduce using rule 114 (TYPE -> char .)


state 10

    (115) TYPE -> double .

    ID              reduce using rule 115 (TYPE -> double .)
    main            reduce using rule 115 (TYPE -> double .)
    DERPAR          reduce using rule 115 (TYPE -> double .)


state 11

    (116) TYPE -> void .

    ID              reduce using rule 116 (TYPE -> void .)
    main            reduce using rule 116 (TYPE -> void .)
    DERPAR          reduce using rule 116 (TYPE -> void .)


state 12

    (2) lbody -> lbody body .

    struct          reduce using rule 2 (lbody -> lbody body .)
    int             reduce using rule 2 (lbody -> lbody body .)
    float           reduce using rule 2 (lbody -> lbody body .)
    char            reduce using rule 2 (lbody -> lbody body .)
    double          reduce using rule 2 (lbody -> lbody body .)
    void            reduce using rule 2 (lbody -> lbody body .)
    $end            reduce using rule 2 (lbody -> lbody body .)


state 13

    (4) body -> TYPE ID . IZQPAR lpam DERPAR IZQCOR linst DERCOR
    (76) ident -> ID .

    IZQPAR          shift and go to state 19
    IGUAL           reduce using rule 76 (ident -> ID .)
    IZQLLAVE        reduce using rule 76 (ident -> ID .)
    PUNTO           reduce using rule 76 (ident -> ID .)


state 14

    (5) body -> TYPE main . IZQPAR lpam DERPAR IZQCOR linst DERCOR

    IZQPAR          shift and go to state 20


state 15

    (47) decla -> TYPE ident . lacs IGUAL exp
    (48) decla -> TYPE ident . IGUAL exp
    (77) lacs -> . lacs acs
    (78) lacs -> . acs
    (79) acs -> . IZQLLAVE exp DERLLAVE
    (80) acs -> . PUNTO ID

    IGUAL           shift and go to state 22
    IZQLLAVE        shift and go to state 24
    PUNTO           shift and go to state 25

    lacs                           shift and go to state 21
    acs                            shift and go to state 23

state 16

    (6) body -> struct ident . IZQCOR linst DERCOR PCOMA

    IZQCOR          shift and go to state 26


state 17

    (76) ident -> ID .

    IZQCOR          reduce using rule 76 (ident -> ID .)
    IZQLLAVE        reduce using rule 76 (ident -> ID .)
    PUNTO           reduce using rule 76 (ident -> ID .)
    SUMA            reduce using rule 76 (ident -> ID .)
    RESTA           reduce using rule 76 (ident -> ID .)
    MULTI           reduce using rule 76 (ident -> ID .)
    DIV             reduce using rule 76 (ident -> ID .)
    PORCENTAJE      reduce using rule 76 (ident -> ID .)
    DIGUAL          reduce using rule 76 (ident -> ID .)
    DESIGUAL        reduce using rule 76 (ident -> ID .)
    MAYOR           reduce using rule 76 (ident -> ID .)
    MENOR           reduce using rule 76 (ident -> ID .)
    MAYORIGUAL      reduce using rule 76 (ident -> ID .)
    MENORIGUAL      reduce using rule 76 (ident -> ID .)
    AND             reduce using rule 76 (ident -> ID .)
    OR              reduce using rule 76 (ident -> ID .)
    BAND            reduce using rule 76 (ident -> ID .)
    BOR             reduce using rule 76 (ident -> ID .)
    BXOR            reduce using rule 76 (ident -> ID .)
    BLEFT           reduce using rule 76 (ident -> ID .)
    BRIGHT          reduce using rule 76 (ident -> ID .)
    ASK             reduce using rule 76 (ident -> ID .)
    PCOMA           reduce using rule 76 (ident -> ID .)
    DERPAR          reduce using rule 76 (ident -> ID .)
    DERLLAVE        reduce using rule 76 (ident -> ID .)
    IGUAL           reduce using rule 76 (ident -> ID .)
    INCE            reduce using rule 76 (ident -> ID .)
    DECRE           reduce using rule 76 (ident -> ID .)
    IZQPAR          reduce using rule 76 (ident -> ID .)
    DP              reduce using rule 76 (ident -> ID .)
    COMA            reduce using rule 76 (ident -> ID .)
    DERCOR          reduce using rule 76 (ident -> ID .)


state 18

    (7) body -> decla PCOMA .

    struct          reduce using rule 7 (body -> decla PCOMA .)
    int             reduce using rule 7 (body -> decla PCOMA .)
    float           reduce using rule 7 (body -> decla PCOMA .)
    char            reduce using rule 7 (body -> decla PCOMA .)
    double          reduce using rule 7 (body -> decla PCOMA .)
    void            reduce using rule 7 (body -> decla PCOMA .)
    $end            reduce using rule 7 (body -> decla PCOMA .)


state 19

    (4) body -> TYPE ID IZQPAR . lpam DERPAR IZQCOR linst DERCOR
    (10) lpam -> . lparam
    (11) lpam -> .
    (12) lparam -> . lparam COMA TYPE ident
    (13) lparam -> . TYPE ident
    (112) TYPE -> . int
    (113) TYPE -> . float
    (114) TYPE -> . char
    (115) TYPE -> . double
    (116) TYPE -> . void

    DERPAR          reduce using rule 11 (lpam -> .)
    int             shift and go to state 7
    float           shift and go to state 8
    char            shift and go to state 9
    double          shift and go to state 10
    void            shift and go to state 11

    TYPE                           shift and go to state 27
    lpam                           shift and go to state 28
    lparam                         shift and go to state 29

state 20

    (5) body -> TYPE main IZQPAR . lpam DERPAR IZQCOR linst DERCOR
    (10) lpam -> . lparam
    (11) lpam -> .
    (12) lparam -> . lparam COMA TYPE ident
    (13) lparam -> . TYPE ident
    (112) TYPE -> . int
    (113) TYPE -> . float
    (114) TYPE -> . char
    (115) TYPE -> . double
    (116) TYPE -> . void

    DERPAR          reduce using rule 11 (lpam -> .)
    int             shift and go to state 7
    float           shift and go to state 8
    char            shift and go to state 9
    double          shift and go to state 10
    void            shift and go to state 11

    TYPE                           shift and go to state 27
    lpam                           shift and go to state 30
    lparam                         shift and go to state 29

state 21

    (47) decla -> TYPE ident lacs . IGUAL exp
    (77) lacs -> lacs . acs
    (79) acs -> . IZQLLAVE exp DERLLAVE
    (80) acs -> . PUNTO ID

    IGUAL           shift and go to state 31
    IZQLLAVE        shift and go to state 24
    PUNTO           shift and go to state 25

    acs                            shift and go to state 32

state 22

    (48) decla -> TYPE ident IGUAL . exp
    (73) exp -> . scanf IZQPAR DERPAR
    (81) exp -> . exp SUMA exp
    (82) exp -> . exp RESTA exp
    (83) exp -> . exp MULTI exp
    (84) exp -> . exp DIV exp
    (85) exp -> . exp PORCENTAJE exp
    (86) exp -> . exp DIGUAL exp
    (87) exp -> . exp DESIGUAL exp
    (88) exp -> . exp MAYOR exp
    (89) exp -> . exp MENOR exp
    (90) exp -> . exp MAYORIGUAL exp
    (91) exp -> . exp MENORIGUAL exp
    (92) exp -> . exp AND exp
    (93) exp -> . exp OR exp
    (94) exp -> . exp BAND exp
    (95) exp -> . exp BOR exp
    (96) exp -> . exp BXOR exp
    (97) exp -> . exp BLEFT exp
    (98) exp -> . exp BRIGHT exp
    (99) exp -> . RESTA exp
    (100) exp -> . NOT exp
    (101) exp -> . BNOT exp
    (102) exp -> . sizeof exp
    (103) exp -> . IZQPAR exp DERPAR
    (104) exp -> . IZQPAR TYPE DERPAR exp
    (105) exp -> . exp ASK exp DP exp
    (106) exp -> . DOUBLE
    (107) exp -> . INTEGER
    (108) exp -> . ident
    (109) exp -> . ident lacs
    (110) exp -> . STR
    (111) exp -> . IZQCOR lex DERCOR
    (76) ident -> . ID

    scanf           shift and go to state 35
    RESTA           shift and go to state 37
    NOT             shift and go to state 38
    BNOT            shift and go to state 39
    sizeof          shift and go to state 40
    IZQPAR          shift and go to state 36
    DOUBLE          shift and go to state 41
    INTEGER         shift and go to state 42
    STR             shift and go to state 43
    IZQCOR          shift and go to state 44
    ID              shift and go to state 17

    ident                          shift and go to state 33
    exp                            shift and go to state 34

state 23

    (78) lacs -> acs .

    IGUAL           reduce using rule 78 (lacs -> acs .)
    IZQLLAVE        reduce using rule 78 (lacs -> acs .)
    PUNTO           reduce using rule 78 (lacs -> acs .)
    SUMA            reduce using rule 78 (lacs -> acs .)
    RESTA           reduce using rule 78 (lacs -> acs .)
    MULTI           reduce using rule 78 (lacs -> acs .)
    DIV             reduce using rule 78 (lacs -> acs .)
    PORCENTAJE      reduce using rule 78 (lacs -> acs .)
    DIGUAL          reduce using rule 78 (lacs -> acs .)
    DESIGUAL        reduce using rule 78 (lacs -> acs .)
    MAYOR           reduce using rule 78 (lacs -> acs .)
    MENOR           reduce using rule 78 (lacs -> acs .)
    MAYORIGUAL      reduce using rule 78 (lacs -> acs .)
    MENORIGUAL      reduce using rule 78 (lacs -> acs .)
    AND             reduce using rule 78 (lacs -> acs .)
    OR              reduce using rule 78 (lacs -> acs .)
    BAND            reduce using rule 78 (lacs -> acs .)
    BOR             reduce using rule 78 (lacs -> acs .)
    BXOR            reduce using rule 78 (lacs -> acs .)
    BLEFT           reduce using rule 78 (lacs -> acs .)
    BRIGHT          reduce using rule 78 (lacs -> acs .)
    ASK             reduce using rule 78 (lacs -> acs .)
    PCOMA           reduce using rule 78 (lacs -> acs .)
    DERPAR          reduce using rule 78 (lacs -> acs .)
    DERLLAVE        reduce using rule 78 (lacs -> acs .)
    DERCOR          reduce using rule 78 (lacs -> acs .)
    COMA            reduce using rule 78 (lacs -> acs .)
    DP              reduce using rule 78 (lacs -> acs .)
    INCE            reduce using rule 78 (lacs -> acs .)
    DECRE           reduce using rule 78 (lacs -> acs .)


state 24

    (79) acs -> IZQLLAVE . exp DERLLAVE
    (73) exp -> . scanf IZQPAR DERPAR
    (81) exp -> . exp SUMA exp
    (82) exp -> . exp RESTA exp
    (83) exp -> . exp MULTI exp
    (84) exp -> . exp DIV exp
    (85) exp -> . exp PORCENTAJE exp
    (86) exp -> . exp DIGUAL exp
    (87) exp -> . exp DESIGUAL exp
    (88) exp -> . exp MAYOR exp
    (89) exp -> . exp MENOR exp
    (90) exp -> . exp MAYORIGUAL exp
    (91) exp -> . exp MENORIGUAL exp
    (92) exp -> . exp AND exp
    (93) exp -> . exp OR exp
    (94) exp -> . exp BAND exp
    (95) exp -> . exp BOR exp
    (96) exp -> . exp BXOR exp
    (97) exp -> . exp BLEFT exp
    (98) exp -> . exp BRIGHT exp
    (99) exp -> . RESTA exp
    (100) exp -> . NOT exp
    (101) exp -> . BNOT exp
    (102) exp -> . sizeof exp
    (103) exp -> . IZQPAR exp DERPAR
    (104) exp -> . IZQPAR TYPE DERPAR exp
    (105) exp -> . exp ASK exp DP exp
    (106) exp -> . DOUBLE
    (107) exp -> . INTEGER
    (108) exp -> . ident
    (109) exp -> . ident lacs
    (110) exp -> . STR
    (111) exp -> . IZQCOR lex DERCOR
    (76) ident -> . ID

    scanf           shift and go to state 35
    RESTA           shift and go to state 37
    NOT             shift and go to state 38
    BNOT            shift and go to state 39
    sizeof          shift and go to state 40
    IZQPAR          shift and go to state 36
    DOUBLE          shift and go to state 41
    INTEGER         shift and go to state 42
    STR             shift and go to state 43
    IZQCOR          shift and go to state 44
    ID              shift and go to state 17

    exp                            shift and go to state 45
    ident                          shift and go to state 33

state 25

    (80) acs -> PUNTO . ID

    ID              shift and go to state 46


state 26

    (6) body -> struct ident IZQCOR . linst DERCOR PCOMA
    (8) linst -> . linst inst
    (9) linst -> . inst
    (14) inst -> . asig PCOMA
    (15) inst -> . para
    (16) inst -> . si
    (17) inst -> . mientras
    (18) inst -> . cual
    (19) inst -> . call
    (20) inst -> . dow
    (21) inst -> . asg
    (22) inst -> . prin
    (23) inst -> . decla PCOMA
    (24) inst -> . tag
    (25) inst -> . gotot PCOMA
    (26) inst -> . brk PCOMA
    (27) inst -> . ret PCOMA
    (41) asig -> . ident lacs IGUAL exp
    (42) asig -> . ident IGUAL exp
    (43) asig -> . ident lacs INCE
    (44) asig -> . ident INCE
    (45) asig -> . ident lacs DECRE
    (46) asig -> . ident DECRE
    (58) para -> . for IZQPAR para1 exp PCOMA para2 DERPAR IZQCOR linst DERCOR
    (51) si -> . if IZQPAR exp DERPAR IZQCOR linst DERCOR lelsi els
    (52) si -> . if IZQPAR exp DERPAR IZQCOR linst DERCOR els
    (49) mientras -> . while IZQPAR exp DERPAR IZQCOR linst DERCOR
    (64) cual -> . switch IZQPAR exp DERPAR IZQCOR lcase def DERCOR
    (31) call -> . ident IZQPAR plex DERPAR PCOMA
    (50) dow -> . do IZQCOR linst DERCOR while IZQPAR exp DERPAR PCOMA
    (28) asg -> . TYPE lids PCOMA
    (71) prin -> . printf IZQPAR STR lexpr DERPAR PCOMA
    (72) prin -> . printf IZQPAR STR DERPAR PCOMA
    (47) decla -> . TYPE ident lacs IGUAL exp
    (48) decla -> . TYPE ident IGUAL exp
    (39) tag -> . ident DP
    (40) gotot -> . goto ident
    (32) brk -> . break
    (33) ret -> . return exp
    (34) ret -> . return
    (76) ident -> . ID
    (112) TYPE -> . int
    (113) TYPE -> . float
    (114) TYPE -> . char
    (115) TYPE -> . double
    (116) TYPE -> . void

    for             shift and go to state 64
    if              shift and go to state 65
    while           shift and go to state 66
    switch          shift and go to state 67
    do              shift and go to state 68
    printf          shift and go to state 70
    goto            shift and go to state 71
    break           shift and go to state 72
    return          shift and go to state 73
    ID              shift and go to state 17
    int             shift and go to state 7
    float           shift and go to state 8
    char            shift and go to state 9
    double          shift and go to state 10
    void            shift and go to state 11

    ident                          shift and go to state 47
    linst                          shift and go to state 48
    inst                           shift and go to state 49
    asig                           shift and go to state 50
    para                           shift and go to state 51
    si                             shift and go to state 52
    mientras                       shift and go to state 53
    cual                           shift and go to state 54
    call                           shift and go to state 55
    dow                            shift and go to state 56
    asg                            shift and go to state 57
    prin                           shift and go to state 58
    decla                          shift and go to state 59
    tag                            shift and go to state 60
    gotot                          shift and go to state 61
    brk                            shift and go to state 62
    ret                            shift and go to state 63
    TYPE                           shift and go to state 69

state 27

    (13) lparam -> TYPE . ident
    (76) ident -> . ID

    ID              shift and go to state 17

    ident                          shift and go to state 74

state 28

    (4) body -> TYPE ID IZQPAR lpam . DERPAR IZQCOR linst DERCOR

    DERPAR          shift and go to state 75


state 29

    (10) lpam -> lparam .
    (12) lparam -> lparam . COMA TYPE ident

    DERPAR          reduce using rule 10 (lpam -> lparam .)
    COMA            shift and go to state 76


state 30

    (5) body -> TYPE main IZQPAR lpam . DERPAR IZQCOR linst DERCOR

    DERPAR          shift and go to state 77


state 31

    (47) decla -> TYPE ident lacs IGUAL . exp
    (73) exp -> . scanf IZQPAR DERPAR
    (81) exp -> . exp SUMA exp
    (82) exp -> . exp RESTA exp
    (83) exp -> . exp MULTI exp
    (84) exp -> . exp DIV exp
    (85) exp -> . exp PORCENTAJE exp
    (86) exp -> . exp DIGUAL exp
    (87) exp -> . exp DESIGUAL exp
    (88) exp -> . exp MAYOR exp
    (89) exp -> . exp MENOR exp
    (90) exp -> . exp MAYORIGUAL exp
    (91) exp -> . exp MENORIGUAL exp
    (92) exp -> . exp AND exp
    (93) exp -> . exp OR exp
    (94) exp -> . exp BAND exp
    (95) exp -> . exp BOR exp
    (96) exp -> . exp BXOR exp
    (97) exp -> . exp BLEFT exp
    (98) exp -> . exp BRIGHT exp
    (99) exp -> . RESTA exp
    (100) exp -> . NOT exp
    (101) exp -> . BNOT exp
    (102) exp -> . sizeof exp
    (103) exp -> . IZQPAR exp DERPAR
    (104) exp -> . IZQPAR TYPE DERPAR exp
    (105) exp -> . exp ASK exp DP exp
    (106) exp -> . DOUBLE
    (107) exp -> . INTEGER
    (108) exp -> . ident
    (109) exp -> . ident lacs
    (110) exp -> . STR
    (111) exp -> . IZQCOR lex DERCOR
    (76) ident -> . ID

    scanf           shift and go to state 35
    RESTA           shift and go to state 37
    NOT             shift and go to state 38
    BNOT            shift and go to state 39
    sizeof          shift and go to state 40
    IZQPAR          shift and go to state 36
    DOUBLE          shift and go to state 41
    INTEGER         shift and go to state 42
    STR             shift and go to state 43
    IZQCOR          shift and go to state 44
    ID              shift and go to state 17

    ident                          shift and go to state 33
    exp                            shift and go to state 78

state 32

    (77) lacs -> lacs acs .

    IGUAL           reduce using rule 77 (lacs -> lacs acs .)
    IZQLLAVE        reduce using rule 77 (lacs -> lacs acs .)
    PUNTO           reduce using rule 77 (lacs -> lacs acs .)
    SUMA            reduce using rule 77 (lacs -> lacs acs .)
    RESTA           reduce using rule 77 (lacs -> lacs acs .)
    MULTI           reduce using rule 77 (lacs -> lacs acs .)
    DIV             reduce using rule 77 (lacs -> lacs acs .)
    PORCENTAJE      reduce using rule 77 (lacs -> lacs acs .)
    DIGUAL          reduce using rule 77 (lacs -> lacs acs .)
    DESIGUAL        reduce using rule 77 (lacs -> lacs acs .)
    MAYOR           reduce using rule 77 (lacs -> lacs acs .)
    MENOR           reduce using rule 77 (lacs -> lacs acs .)
    MAYORIGUAL      reduce using rule 77 (lacs -> lacs acs .)
    MENORIGUAL      reduce using rule 77 (lacs -> lacs acs .)
    AND             reduce using rule 77 (lacs -> lacs acs .)
    OR              reduce using rule 77 (lacs -> lacs acs .)
    BAND            reduce using rule 77 (lacs -> lacs acs .)
    BOR             reduce using rule 77 (lacs -> lacs acs .)
    BXOR            reduce using rule 77 (lacs -> lacs acs .)
    BLEFT           reduce using rule 77 (lacs -> lacs acs .)
    BRIGHT          reduce using rule 77 (lacs -> lacs acs .)
    ASK             reduce using rule 77 (lacs -> lacs acs .)
    PCOMA           reduce using rule 77 (lacs -> lacs acs .)
    DERPAR          reduce using rule 77 (lacs -> lacs acs .)
    DERLLAVE        reduce using rule 77 (lacs -> lacs acs .)
    DERCOR          reduce using rule 77 (lacs -> lacs acs .)
    COMA            reduce using rule 77 (lacs -> lacs acs .)
    DP              reduce using rule 77 (lacs -> lacs acs .)
    INCE            reduce using rule 77 (lacs -> lacs acs .)
    DECRE           reduce using rule 77 (lacs -> lacs acs .)


state 33

    (108) exp -> ident .
    (109) exp -> ident . lacs
    (77) lacs -> . lacs acs
    (78) lacs -> . acs
    (79) acs -> . IZQLLAVE exp DERLLAVE
    (80) acs -> . PUNTO ID

    SUMA            reduce using rule 108 (exp -> ident .)
    RESTA           reduce using rule 108 (exp -> ident .)
    MULTI           reduce using rule 108 (exp -> ident .)
    DIV             reduce using rule 108 (exp -> ident .)
    PORCENTAJE      reduce using rule 108 (exp -> ident .)
    DIGUAL          reduce using rule 108 (exp -> ident .)
    DESIGUAL        reduce using rule 108 (exp -> ident .)
    MAYOR           reduce using rule 108 (exp -> ident .)
    MENOR           reduce using rule 108 (exp -> ident .)
    MAYORIGUAL      reduce using rule 108 (exp -> ident .)
    MENORIGUAL      reduce using rule 108 (exp -> ident .)
    AND             reduce using rule 108 (exp -> ident .)
    OR              reduce using rule 108 (exp -> ident .)
    BAND            reduce using rule 108 (exp -> ident .)
    BOR             reduce using rule 108 (exp -> ident .)
    BXOR            reduce using rule 108 (exp -> ident .)
    BLEFT           reduce using rule 108 (exp -> ident .)
    BRIGHT          reduce using rule 108 (exp -> ident .)
    ASK             reduce using rule 108 (exp -> ident .)
    PCOMA           reduce using rule 108 (exp -> ident .)
    DERPAR          reduce using rule 108 (exp -> ident .)
    DERLLAVE        reduce using rule 108 (exp -> ident .)
    DERCOR          reduce using rule 108 (exp -> ident .)
    COMA            reduce using rule 108 (exp -> ident .)
    DP              reduce using rule 108 (exp -> ident .)
    IZQLLAVE        shift and go to state 24
    PUNTO           shift and go to state 25

    lacs                           shift and go to state 79
    acs                            shift and go to state 23

state 34

    (48) decla -> TYPE ident IGUAL exp .
    (81) exp -> exp . SUMA exp
    (82) exp -> exp . RESTA exp
    (83) exp -> exp . MULTI exp
    (84) exp -> exp . DIV exp
    (85) exp -> exp . PORCENTAJE exp
    (86) exp -> exp . DIGUAL exp
    (87) exp -> exp . DESIGUAL exp
    (88) exp -> exp . MAYOR exp
    (89) exp -> exp . MENOR exp
    (90) exp -> exp . MAYORIGUAL exp
    (91) exp -> exp . MENORIGUAL exp
    (92) exp -> exp . AND exp
    (93) exp -> exp . OR exp
    (94) exp -> exp . BAND exp
    (95) exp -> exp . BOR exp
    (96) exp -> exp . BXOR exp
    (97) exp -> exp . BLEFT exp
    (98) exp -> exp . BRIGHT exp
    (105) exp -> exp . ASK exp DP exp

    PCOMA           reduce using rule 48 (decla -> TYPE ident IGUAL exp .)
    DERPAR          reduce using rule 48 (decla -> TYPE ident IGUAL exp .)
    SUMA            shift and go to state 80
    RESTA           shift and go to state 81
    MULTI           shift and go to state 82
    DIV             shift and go to state 83
    PORCENTAJE      shift and go to state 84
    DIGUAL          shift and go to state 85
    DESIGUAL        shift and go to state 86
    MAYOR           shift and go to state 87
    MENOR           shift and go to state 88
    MAYORIGUAL      shift and go to state 89
    MENORIGUAL      shift and go to state 90
    AND             shift and go to state 91
    OR              shift and go to state 92
    BAND            shift and go to state 93
    BOR             shift and go to state 94
    BXOR            shift and go to state 95
    BLEFT           shift and go to state 96
    BRIGHT          shift and go to state 97
    ASK             shift and go to state 98


state 35

    (73) exp -> scanf . IZQPAR DERPAR

    IZQPAR          shift and go to state 99


state 36

    (103) exp -> IZQPAR . exp DERPAR
    (104) exp -> IZQPAR . TYPE DERPAR exp
    (73) exp -> . scanf IZQPAR DERPAR
    (81) exp -> . exp SUMA exp
    (82) exp -> . exp RESTA exp
    (83) exp -> . exp MULTI exp
    (84) exp -> . exp DIV exp
    (85) exp -> . exp PORCENTAJE exp
    (86) exp -> . exp DIGUAL exp
    (87) exp -> . exp DESIGUAL exp
    (88) exp -> . exp MAYOR exp
    (89) exp -> . exp MENOR exp
    (90) exp -> . exp MAYORIGUAL exp
    (91) exp -> . exp MENORIGUAL exp
    (92) exp -> . exp AND exp
    (93) exp -> . exp OR exp
    (94) exp -> . exp BAND exp
    (95) exp -> . exp BOR exp
    (96) exp -> . exp BXOR exp
    (97) exp -> . exp BLEFT exp
    (98) exp -> . exp BRIGHT exp
    (99) exp -> . RESTA exp
    (100) exp -> . NOT exp
    (101) exp -> . BNOT exp
    (102) exp -> . sizeof exp
    (103) exp -> . IZQPAR exp DERPAR
    (104) exp -> . IZQPAR TYPE DERPAR exp
    (105) exp -> . exp ASK exp DP exp
    (106) exp -> . DOUBLE
    (107) exp -> . INTEGER
    (108) exp -> . ident
    (109) exp -> . ident lacs
    (110) exp -> . STR
    (111) exp -> . IZQCOR lex DERCOR
    (112) TYPE -> . int
    (113) TYPE -> . float
    (114) TYPE -> . char
    (115) TYPE -> . double
    (116) TYPE -> . void
    (76) ident -> . ID

    scanf           shift and go to state 35
    RESTA           shift and go to state 37
    NOT             shift and go to state 38
    BNOT            shift and go to state 39
    sizeof          shift and go to state 40
    IZQPAR          shift and go to state 36
    DOUBLE          shift and go to state 41
    INTEGER         shift and go to state 42
    STR             shift and go to state 43
    IZQCOR          shift and go to state 44
    int             shift and go to state 7
    float           shift and go to state 8
    char            shift and go to state 9
    double          shift and go to state 10
    void            shift and go to state 11
    ID              shift and go to state 17

    exp                            shift and go to state 100
    TYPE                           shift and go to state 101
    ident                          shift and go to state 33

state 37

    (99) exp -> RESTA . exp
    (73) exp -> . scanf IZQPAR DERPAR
    (81) exp -> . exp SUMA exp
    (82) exp -> . exp RESTA exp
    (83) exp -> . exp MULTI exp
    (84) exp -> . exp DIV exp
    (85) exp -> . exp PORCENTAJE exp
    (86) exp -> . exp DIGUAL exp
    (87) exp -> . exp DESIGUAL exp
    (88) exp -> . exp MAYOR exp
    (89) exp -> . exp MENOR exp
    (90) exp -> . exp MAYORIGUAL exp
    (91) exp -> . exp MENORIGUAL exp
    (92) exp -> . exp AND exp
    (93) exp -> . exp OR exp
    (94) exp -> . exp BAND exp
    (95) exp -> . exp BOR exp
    (96) exp -> . exp BXOR exp
    (97) exp -> . exp BLEFT exp
    (98) exp -> . exp BRIGHT exp
    (99) exp -> . RESTA exp
    (100) exp -> . NOT exp
    (101) exp -> . BNOT exp
    (102) exp -> . sizeof exp
    (103) exp -> . IZQPAR exp DERPAR
    (104) exp -> . IZQPAR TYPE DERPAR exp
    (105) exp -> . exp ASK exp DP exp
    (106) exp -> . DOUBLE
    (107) exp -> . INTEGER
    (108) exp -> . ident
    (109) exp -> . ident lacs
    (110) exp -> . STR
    (111) exp -> . IZQCOR lex DERCOR
    (76) ident -> . ID

    scanf           shift and go to state 35
    RESTA           shift and go to state 37
    NOT             shift and go to state 38
    BNOT            shift and go to state 39
    sizeof          shift and go to state 40
    IZQPAR          shift and go to state 36
    DOUBLE          shift and go to state 41
    INTEGER         shift and go to state 42
    STR             shift and go to state 43
    IZQCOR          shift and go to state 44
    ID              shift and go to state 17

    exp                            shift and go to state 102
    ident                          shift and go to state 33

state 38

    (100) exp -> NOT . exp
    (73) exp -> . scanf IZQPAR DERPAR
    (81) exp -> . exp SUMA exp
    (82) exp -> . exp RESTA exp
    (83) exp -> . exp MULTI exp
    (84) exp -> . exp DIV exp
    (85) exp -> . exp PORCENTAJE exp
    (86) exp -> . exp DIGUAL exp
    (87) exp -> . exp DESIGUAL exp
    (88) exp -> . exp MAYOR exp
    (89) exp -> . exp MENOR exp
    (90) exp -> . exp MAYORIGUAL exp
    (91) exp -> . exp MENORIGUAL exp
    (92) exp -> . exp AND exp
    (93) exp -> . exp OR exp
    (94) exp -> . exp BAND exp
    (95) exp -> . exp BOR exp
    (96) exp -> . exp BXOR exp
    (97) exp -> . exp BLEFT exp
    (98) exp -> . exp BRIGHT exp
    (99) exp -> . RESTA exp
    (100) exp -> . NOT exp
    (101) exp -> . BNOT exp
    (102) exp -> . sizeof exp
    (103) exp -> . IZQPAR exp DERPAR
    (104) exp -> . IZQPAR TYPE DERPAR exp
    (105) exp -> . exp ASK exp DP exp
    (106) exp -> . DOUBLE
    (107) exp -> . INTEGER
    (108) exp -> . ident
    (109) exp -> . ident lacs
    (110) exp -> . STR
    (111) exp -> . IZQCOR lex DERCOR
    (76) ident -> . ID

    scanf           shift and go to state 35
    RESTA           shift and go to state 37
    NOT             shift and go to state 38
    BNOT            shift and go to state 39
    sizeof          shift and go to state 40
    IZQPAR          shift and go to state 36
    DOUBLE          shift and go to state 41
    INTEGER         shift and go to state 42
    STR             shift and go to state 43
    IZQCOR          shift and go to state 44
    ID              shift and go to state 17

    exp                            shift and go to state 103
    ident                          shift and go to state 33

state 39

    (101) exp -> BNOT . exp
    (73) exp -> . scanf IZQPAR DERPAR
    (81) exp -> . exp SUMA exp
    (82) exp -> . exp RESTA exp
    (83) exp -> . exp MULTI exp
    (84) exp -> . exp DIV exp
    (85) exp -> . exp PORCENTAJE exp
    (86) exp -> . exp DIGUAL exp
    (87) exp -> . exp DESIGUAL exp
    (88) exp -> . exp MAYOR exp
    (89) exp -> . exp MENOR exp
    (90) exp -> . exp MAYORIGUAL exp
    (91) exp -> . exp MENORIGUAL exp
    (92) exp -> . exp AND exp
    (93) exp -> . exp OR exp
    (94) exp -> . exp BAND exp
    (95) exp -> . exp BOR exp
    (96) exp -> . exp BXOR exp
    (97) exp -> . exp BLEFT exp
    (98) exp -> . exp BRIGHT exp
    (99) exp -> . RESTA exp
    (100) exp -> . NOT exp
    (101) exp -> . BNOT exp
    (102) exp -> . sizeof exp
    (103) exp -> . IZQPAR exp DERPAR
    (104) exp -> . IZQPAR TYPE DERPAR exp
    (105) exp -> . exp ASK exp DP exp
    (106) exp -> . DOUBLE
    (107) exp -> . INTEGER
    (108) exp -> . ident
    (109) exp -> . ident lacs
    (110) exp -> . STR
    (111) exp -> . IZQCOR lex DERCOR
    (76) ident -> . ID

    scanf           shift and go to state 35
    RESTA           shift and go to state 37
    NOT             shift and go to state 38
    BNOT            shift and go to state 39
    sizeof          shift and go to state 40
    IZQPAR          shift and go to state 36
    DOUBLE          shift and go to state 41
    INTEGER         shift and go to state 42
    STR             shift and go to state 43
    IZQCOR          shift and go to state 44
    ID              shift and go to state 17

    exp                            shift and go to state 104
    ident                          shift and go to state 33

state 40

    (102) exp -> sizeof . exp
    (73) exp -> . scanf IZQPAR DERPAR
    (81) exp -> . exp SUMA exp
    (82) exp -> . exp RESTA exp
    (83) exp -> . exp MULTI exp
    (84) exp -> . exp DIV exp
    (85) exp -> . exp PORCENTAJE exp
    (86) exp -> . exp DIGUAL exp
    (87) exp -> . exp DESIGUAL exp
    (88) exp -> . exp MAYOR exp
    (89) exp -> . exp MENOR exp
    (90) exp -> . exp MAYORIGUAL exp
    (91) exp -> . exp MENORIGUAL exp
    (92) exp -> . exp AND exp
    (93) exp -> . exp OR exp
    (94) exp -> . exp BAND exp
    (95) exp -> . exp BOR exp
    (96) exp -> . exp BXOR exp
    (97) exp -> . exp BLEFT exp
    (98) exp -> . exp BRIGHT exp
    (99) exp -> . RESTA exp
    (100) exp -> . NOT exp
    (101) exp -> . BNOT exp
    (102) exp -> . sizeof exp
    (103) exp -> . IZQPAR exp DERPAR
    (104) exp -> . IZQPAR TYPE DERPAR exp
    (105) exp -> . exp ASK exp DP exp
    (106) exp -> . DOUBLE
    (107) exp -> . INTEGER
    (108) exp -> . ident
    (109) exp -> . ident lacs
    (110) exp -> . STR
    (111) exp -> . IZQCOR lex DERCOR
    (76) ident -> . ID

    scanf           shift and go to state 35
    RESTA           shift and go to state 37
    NOT             shift and go to state 38
    BNOT            shift and go to state 39
    sizeof          shift and go to state 40
    IZQPAR          shift and go to state 36
    DOUBLE          shift and go to state 41
    INTEGER         shift and go to state 42
    STR             shift and go to state 43
    IZQCOR          shift and go to state 44
    ID              shift and go to state 17

    exp                            shift and go to state 105
    ident                          shift and go to state 33

state 41

    (106) exp -> DOUBLE .

    SUMA            reduce using rule 106 (exp -> DOUBLE .)
    RESTA           reduce using rule 106 (exp -> DOUBLE .)
    MULTI           reduce using rule 106 (exp -> DOUBLE .)
    DIV             reduce using rule 106 (exp -> DOUBLE .)
    PORCENTAJE      reduce using rule 106 (exp -> DOUBLE .)
    DIGUAL          reduce using rule 106 (exp -> DOUBLE .)
    DESIGUAL        reduce using rule 106 (exp -> DOUBLE .)
    MAYOR           reduce using rule 106 (exp -> DOUBLE .)
    MENOR           reduce using rule 106 (exp -> DOUBLE .)
    MAYORIGUAL      reduce using rule 106 (exp -> DOUBLE .)
    MENORIGUAL      reduce using rule 106 (exp -> DOUBLE .)
    AND             reduce using rule 106 (exp -> DOUBLE .)
    OR              reduce using rule 106 (exp -> DOUBLE .)
    BAND            reduce using rule 106 (exp -> DOUBLE .)
    BOR             reduce using rule 106 (exp -> DOUBLE .)
    BXOR            reduce using rule 106 (exp -> DOUBLE .)
    BLEFT           reduce using rule 106 (exp -> DOUBLE .)
    BRIGHT          reduce using rule 106 (exp -> DOUBLE .)
    ASK             reduce using rule 106 (exp -> DOUBLE .)
    PCOMA           reduce using rule 106 (exp -> DOUBLE .)
    DERPAR          reduce using rule 106 (exp -> DOUBLE .)
    DERLLAVE        reduce using rule 106 (exp -> DOUBLE .)
    DERCOR          reduce using rule 106 (exp -> DOUBLE .)
    COMA            reduce using rule 106 (exp -> DOUBLE .)
    DP              reduce using rule 106 (exp -> DOUBLE .)


state 42

    (107) exp -> INTEGER .

    SUMA            reduce using rule 107 (exp -> INTEGER .)
    RESTA           reduce using rule 107 (exp -> INTEGER .)
    MULTI           reduce using rule 107 (exp -> INTEGER .)
    DIV             reduce using rule 107 (exp -> INTEGER .)
    PORCENTAJE      reduce using rule 107 (exp -> INTEGER .)
    DIGUAL          reduce using rule 107 (exp -> INTEGER .)
    DESIGUAL        reduce using rule 107 (exp -> INTEGER .)
    MAYOR           reduce using rule 107 (exp -> INTEGER .)
    MENOR           reduce using rule 107 (exp -> INTEGER .)
    MAYORIGUAL      reduce using rule 107 (exp -> INTEGER .)
    MENORIGUAL      reduce using rule 107 (exp -> INTEGER .)
    AND             reduce using rule 107 (exp -> INTEGER .)
    OR              reduce using rule 107 (exp -> INTEGER .)
    BAND            reduce using rule 107 (exp -> INTEGER .)
    BOR             reduce using rule 107 (exp -> INTEGER .)
    BXOR            reduce using rule 107 (exp -> INTEGER .)
    BLEFT           reduce using rule 107 (exp -> INTEGER .)
    BRIGHT          reduce using rule 107 (exp -> INTEGER .)
    ASK             reduce using rule 107 (exp -> INTEGER .)
    PCOMA           reduce using rule 107 (exp -> INTEGER .)
    DERPAR          reduce using rule 107 (exp -> INTEGER .)
    DERLLAVE        reduce using rule 107 (exp -> INTEGER .)
    DERCOR          reduce using rule 107 (exp -> INTEGER .)
    COMA            reduce using rule 107 (exp -> INTEGER .)
    DP              reduce using rule 107 (exp -> INTEGER .)


state 43

    (110) exp -> STR .

    SUMA            reduce using rule 110 (exp -> STR .)
    RESTA           reduce using rule 110 (exp -> STR .)
    MULTI           reduce using rule 110 (exp -> STR .)
    DIV             reduce using rule 110 (exp -> STR .)
    PORCENTAJE      reduce using rule 110 (exp -> STR .)
    DIGUAL          reduce using rule 110 (exp -> STR .)
    DESIGUAL        reduce using rule 110 (exp -> STR .)
    MAYOR           reduce using rule 110 (exp -> STR .)
    MENOR           reduce using rule 110 (exp -> STR .)
    MAYORIGUAL      reduce using rule 110 (exp -> STR .)
    MENORIGUAL      reduce using rule 110 (exp -> STR .)
    AND             reduce using rule 110 (exp -> STR .)
    OR              reduce using rule 110 (exp -> STR .)
    BAND            reduce using rule 110 (exp -> STR .)
    BOR             reduce using rule 110 (exp -> STR .)
    BXOR            reduce using rule 110 (exp -> STR .)
    BLEFT           reduce using rule 110 (exp -> STR .)
    BRIGHT          reduce using rule 110 (exp -> STR .)
    ASK             reduce using rule 110 (exp -> STR .)
    PCOMA           reduce using rule 110 (exp -> STR .)
    DERPAR          reduce using rule 110 (exp -> STR .)
    DERLLAVE        reduce using rule 110 (exp -> STR .)
    DERCOR          reduce using rule 110 (exp -> STR .)
    COMA            reduce using rule 110 (exp -> STR .)
    DP              reduce using rule 110 (exp -> STR .)


state 44

    (111) exp -> IZQCOR . lex DERCOR
    (37) lex -> . lex COMA exp
    (38) lex -> . exp
    (73) exp -> . scanf IZQPAR DERPAR
    (81) exp -> . exp SUMA exp
    (82) exp -> . exp RESTA exp
    (83) exp -> . exp MULTI exp
    (84) exp -> . exp DIV exp
    (85) exp -> . exp PORCENTAJE exp
    (86) exp -> . exp DIGUAL exp
    (87) exp -> . exp DESIGUAL exp
    (88) exp -> . exp MAYOR exp
    (89) exp -> . exp MENOR exp
    (90) exp -> . exp MAYORIGUAL exp
    (91) exp -> . exp MENORIGUAL exp
    (92) exp -> . exp AND exp
    (93) exp -> . exp OR exp
    (94) exp -> . exp BAND exp
    (95) exp -> . exp BOR exp
    (96) exp -> . exp BXOR exp
    (97) exp -> . exp BLEFT exp
    (98) exp -> . exp BRIGHT exp
    (99) exp -> . RESTA exp
    (100) exp -> . NOT exp
    (101) exp -> . BNOT exp
    (102) exp -> . sizeof exp
    (103) exp -> . IZQPAR exp DERPAR
    (104) exp -> . IZQPAR TYPE DERPAR exp
    (105) exp -> . exp ASK exp DP exp
    (106) exp -> . DOUBLE
    (107) exp -> . INTEGER
    (108) exp -> . ident
    (109) exp -> . ident lacs
    (110) exp -> . STR
    (111) exp -> . IZQCOR lex DERCOR
    (76) ident -> . ID

    scanf           shift and go to state 35
    RESTA           shift and go to state 37
    NOT             shift and go to state 38
    BNOT            shift and go to state 39
    sizeof          shift and go to state 40
    IZQPAR          shift and go to state 36
    DOUBLE          shift and go to state 41
    INTEGER         shift and go to state 42
    STR             shift and go to state 43
    IZQCOR          shift and go to state 44
    ID              shift and go to state 17

    lex                            shift and go to state 106
    exp                            shift and go to state 107
    ident                          shift and go to state 33

state 45

    (79) acs -> IZQLLAVE exp . DERLLAVE
    (81) exp -> exp . SUMA exp
    (82) exp -> exp . RESTA exp
    (83) exp -> exp . MULTI exp
    (84) exp -> exp . DIV exp
    (85) exp -> exp . PORCENTAJE exp
    (86) exp -> exp . DIGUAL exp
    (87) exp -> exp . DESIGUAL exp
    (88) exp -> exp . MAYOR exp
    (89) exp -> exp . MENOR exp
    (90) exp -> exp . MAYORIGUAL exp
    (91) exp -> exp . MENORIGUAL exp
    (92) exp -> exp . AND exp
    (93) exp -> exp . OR exp
    (94) exp -> exp . BAND exp
    (95) exp -> exp . BOR exp
    (96) exp -> exp . BXOR exp
    (97) exp -> exp . BLEFT exp
    (98) exp -> exp . BRIGHT exp
    (105) exp -> exp . ASK exp DP exp

    DERLLAVE        shift and go to state 108
    SUMA            shift and go to state 80
    RESTA           shift and go to state 81
    MULTI           shift and go to state 82
    DIV             shift and go to state 83
    PORCENTAJE      shift and go to state 84
    DIGUAL          shift and go to state 85
    DESIGUAL        shift and go to state 86
    MAYOR           shift and go to state 87
    MENOR           shift and go to state 88
    MAYORIGUAL      shift and go to state 89
    MENORIGUAL      shift and go to state 90
    AND             shift and go to state 91
    OR              shift and go to state 92
    BAND            shift and go to state 93
    BOR             shift and go to state 94
    BXOR            shift and go to state 95
    BLEFT           shift and go to state 96
    BRIGHT          shift and go to state 97
    ASK             shift and go to state 98


state 46

    (80) acs -> PUNTO ID .

    IGUAL           reduce using rule 80 (acs -> PUNTO ID .)
    IZQLLAVE        reduce using rule 80 (acs -> PUNTO ID .)
    PUNTO           reduce using rule 80 (acs -> PUNTO ID .)
    SUMA            reduce using rule 80 (acs -> PUNTO ID .)
    RESTA           reduce using rule 80 (acs -> PUNTO ID .)
    MULTI           reduce using rule 80 (acs -> PUNTO ID .)
    DIV             reduce using rule 80 (acs -> PUNTO ID .)
    PORCENTAJE      reduce using rule 80 (acs -> PUNTO ID .)
    DIGUAL          reduce using rule 80 (acs -> PUNTO ID .)
    DESIGUAL        reduce using rule 80 (acs -> PUNTO ID .)
    MAYOR           reduce using rule 80 (acs -> PUNTO ID .)
    MENOR           reduce using rule 80 (acs -> PUNTO ID .)
    MAYORIGUAL      reduce using rule 80 (acs -> PUNTO ID .)
    MENORIGUAL      reduce using rule 80 (acs -> PUNTO ID .)
    AND             reduce using rule 80 (acs -> PUNTO ID .)
    OR              reduce using rule 80 (acs -> PUNTO ID .)
    BAND            reduce using rule 80 (acs -> PUNTO ID .)
    BOR             reduce using rule 80 (acs -> PUNTO ID .)
    BXOR            reduce using rule 80 (acs -> PUNTO ID .)
    BLEFT           reduce using rule 80 (acs -> PUNTO ID .)
    BRIGHT          reduce using rule 80 (acs -> PUNTO ID .)
    ASK             reduce using rule 80 (acs -> PUNTO ID .)
    PCOMA           reduce using rule 80 (acs -> PUNTO ID .)
    DERPAR          reduce using rule 80 (acs -> PUNTO ID .)
    DERLLAVE        reduce using rule 80 (acs -> PUNTO ID .)
    DERCOR          reduce using rule 80 (acs -> PUNTO ID .)
    COMA            reduce using rule 80 (acs -> PUNTO ID .)
    DP              reduce using rule 80 (acs -> PUNTO ID .)
    INCE            reduce using rule 80 (acs -> PUNTO ID .)
    DECRE           reduce using rule 80 (acs -> PUNTO ID .)


state 47

    (41) asig -> ident . lacs IGUAL exp
    (42) asig -> ident . IGUAL exp
    (43) asig -> ident . lacs INCE
    (44) asig -> ident . INCE
    (45) asig -> ident . lacs DECRE
    (46) asig -> ident . DECRE
    (31) call -> ident . IZQPAR plex DERPAR PCOMA
    (39) tag -> ident . DP
    (77) lacs -> . lacs acs
    (78) lacs -> . acs
    (79) acs -> . IZQLLAVE exp DERLLAVE
    (80) acs -> . PUNTO ID

    IGUAL           shift and go to state 110
    INCE            shift and go to state 111
    DECRE           shift and go to state 112
    IZQPAR          shift and go to state 113
    DP              shift and go to state 114
    IZQLLAVE        shift and go to state 24
    PUNTO           shift and go to state 25

    lacs                           shift and go to state 109
    acs                            shift and go to state 23

state 48

    (6) body -> struct ident IZQCOR linst . DERCOR PCOMA
    (8) linst -> linst . inst
    (14) inst -> . asig PCOMA
    (15) inst -> . para
    (16) inst -> . si
    (17) inst -> . mientras
    (18) inst -> . cual
    (19) inst -> . call
    (20) inst -> . dow
    (21) inst -> . asg
    (22) inst -> . prin
    (23) inst -> . decla PCOMA
    (24) inst -> . tag
    (25) inst -> . gotot PCOMA
    (26) inst -> . brk PCOMA
    (27) inst -> . ret PCOMA
    (41) asig -> . ident lacs IGUAL exp
    (42) asig -> . ident IGUAL exp
    (43) asig -> . ident lacs INCE
    (44) asig -> . ident INCE
    (45) asig -> . ident lacs DECRE
    (46) asig -> . ident DECRE
    (58) para -> . for IZQPAR para1 exp PCOMA para2 DERPAR IZQCOR linst DERCOR
    (51) si -> . if IZQPAR exp DERPAR IZQCOR linst DERCOR lelsi els
    (52) si -> . if IZQPAR exp DERPAR IZQCOR linst DERCOR els
    (49) mientras -> . while IZQPAR exp DERPAR IZQCOR linst DERCOR
    (64) cual -> . switch IZQPAR exp DERPAR IZQCOR lcase def DERCOR
    (31) call -> . ident IZQPAR plex DERPAR PCOMA
    (50) dow -> . do IZQCOR linst DERCOR while IZQPAR exp DERPAR PCOMA
    (28) asg -> . TYPE lids PCOMA
    (71) prin -> . printf IZQPAR STR lexpr DERPAR PCOMA
    (72) prin -> . printf IZQPAR STR DERPAR PCOMA
    (47) decla -> . TYPE ident lacs IGUAL exp
    (48) decla -> . TYPE ident IGUAL exp
    (39) tag -> . ident DP
    (40) gotot -> . goto ident
    (32) brk -> . break
    (33) ret -> . return exp
    (34) ret -> . return
    (76) ident -> . ID
    (112) TYPE -> . int
    (113) TYPE -> . float
    (114) TYPE -> . char
    (115) TYPE -> . double
    (116) TYPE -> . void

    DERCOR          shift and go to state 115
    for             shift and go to state 64
    if              shift and go to state 65
    while           shift and go to state 66
    switch          shift and go to state 67
    do              shift and go to state 68
    printf          shift and go to state 70
    goto            shift and go to state 71
    break           shift and go to state 72
    return          shift and go to state 73
    ID              shift and go to state 17
    int             shift and go to state 7
    float           shift and go to state 8
    char            shift and go to state 9
    double          shift and go to state 10
    void            shift and go to state 11

    ident                          shift and go to state 47
    inst                           shift and go to state 116
    asig                           shift and go to state 50
    para                           shift and go to state 51
    si                             shift and go to state 52
    mientras                       shift and go to state 53
    cual                           shift and go to state 54
    call                           shift and go to state 55
    dow                            shift and go to state 56
    asg                            shift and go to state 57
    prin                           shift and go to state 58
    decla                          shift and go to state 59
    tag                            shift and go to state 60
    gotot                          shift and go to state 61
    brk                            shift and go to state 62
    ret                            shift and go to state 63
    TYPE                           shift and go to state 69

state 49

    (9) linst -> inst .

    DERCOR          reduce using rule 9 (linst -> inst .)
    for             reduce using rule 9 (linst -> inst .)
    if              reduce using rule 9 (linst -> inst .)
    while           reduce using rule 9 (linst -> inst .)
    switch          reduce using rule 9 (linst -> inst .)
    do              reduce using rule 9 (linst -> inst .)
    printf          reduce using rule 9 (linst -> inst .)
    goto            reduce using rule 9 (linst -> inst .)
    break           reduce using rule 9 (linst -> inst .)
    return          reduce using rule 9 (linst -> inst .)
    ID              reduce using rule 9 (linst -> inst .)
    int             reduce using rule 9 (linst -> inst .)
    float           reduce using rule 9 (linst -> inst .)
    char            reduce using rule 9 (linst -> inst .)
    double          reduce using rule 9 (linst -> inst .)
    void            reduce using rule 9 (linst -> inst .)
    default         reduce using rule 9 (linst -> inst .)
    case            reduce using rule 9 (linst -> inst .)


state 50

    (14) inst -> asig . PCOMA

    PCOMA           shift and go to state 117


state 51

    (15) inst -> para .

    DERCOR          reduce using rule 15 (inst -> para .)
    for             reduce using rule 15 (inst -> para .)
    if              reduce using rule 15 (inst -> para .)
    while           reduce using rule 15 (inst -> para .)
    switch          reduce using rule 15 (inst -> para .)
    do              reduce using rule 15 (inst -> para .)
    printf          reduce using rule 15 (inst -> para .)
    goto            reduce using rule 15 (inst -> para .)
    break           reduce using rule 15 (inst -> para .)
    return          reduce using rule 15 (inst -> para .)
    ID              reduce using rule 15 (inst -> para .)
    int             reduce using rule 15 (inst -> para .)
    float           reduce using rule 15 (inst -> para .)
    char            reduce using rule 15 (inst -> para .)
    double          reduce using rule 15 (inst -> para .)
    void            reduce using rule 15 (inst -> para .)
    default         reduce using rule 15 (inst -> para .)
    case            reduce using rule 15 (inst -> para .)


state 52

    (16) inst -> si .

    DERCOR          reduce using rule 16 (inst -> si .)
    for             reduce using rule 16 (inst -> si .)
    if              reduce using rule 16 (inst -> si .)
    while           reduce using rule 16 (inst -> si .)
    switch          reduce using rule 16 (inst -> si .)
    do              reduce using rule 16 (inst -> si .)
    printf          reduce using rule 16 (inst -> si .)
    goto            reduce using rule 16 (inst -> si .)
    break           reduce using rule 16 (inst -> si .)
    return          reduce using rule 16 (inst -> si .)
    ID              reduce using rule 16 (inst -> si .)
    int             reduce using rule 16 (inst -> si .)
    float           reduce using rule 16 (inst -> si .)
    char            reduce using rule 16 (inst -> si .)
    double          reduce using rule 16 (inst -> si .)
    void            reduce using rule 16 (inst -> si .)
    default         reduce using rule 16 (inst -> si .)
    case            reduce using rule 16 (inst -> si .)


state 53

    (17) inst -> mientras .

    DERCOR          reduce using rule 17 (inst -> mientras .)
    for             reduce using rule 17 (inst -> mientras .)
    if              reduce using rule 17 (inst -> mientras .)
    while           reduce using rule 17 (inst -> mientras .)
    switch          reduce using rule 17 (inst -> mientras .)
    do              reduce using rule 17 (inst -> mientras .)
    printf          reduce using rule 17 (inst -> mientras .)
    goto            reduce using rule 17 (inst -> mientras .)
    break           reduce using rule 17 (inst -> mientras .)
    return          reduce using rule 17 (inst -> mientras .)
    ID              reduce using rule 17 (inst -> mientras .)
    int             reduce using rule 17 (inst -> mientras .)
    float           reduce using rule 17 (inst -> mientras .)
    char            reduce using rule 17 (inst -> mientras .)
    double          reduce using rule 17 (inst -> mientras .)
    void            reduce using rule 17 (inst -> mientras .)
    default         reduce using rule 17 (inst -> mientras .)
    case            reduce using rule 17 (inst -> mientras .)


state 54

    (18) inst -> cual .

    DERCOR          reduce using rule 18 (inst -> cual .)
    for             reduce using rule 18 (inst -> cual .)
    if              reduce using rule 18 (inst -> cual .)
    while           reduce using rule 18 (inst -> cual .)
    switch          reduce using rule 18 (inst -> cual .)
    do              reduce using rule 18 (inst -> cual .)
    printf          reduce using rule 18 (inst -> cual .)
    goto            reduce using rule 18 (inst -> cual .)
    break           reduce using rule 18 (inst -> cual .)
    return          reduce using rule 18 (inst -> cual .)
    ID              reduce using rule 18 (inst -> cual .)
    int             reduce using rule 18 (inst -> cual .)
    float           reduce using rule 18 (inst -> cual .)
    char            reduce using rule 18 (inst -> cual .)
    double          reduce using rule 18 (inst -> cual .)
    void            reduce using rule 18 (inst -> cual .)
    default         reduce using rule 18 (inst -> cual .)
    case            reduce using rule 18 (inst -> cual .)


state 55

    (19) inst -> call .

    DERCOR          reduce using rule 19 (inst -> call .)
    for             reduce using rule 19 (inst -> call .)
    if              reduce using rule 19 (inst -> call .)
    while           reduce using rule 19 (inst -> call .)
    switch          reduce using rule 19 (inst -> call .)
    do              reduce using rule 19 (inst -> call .)
    printf          reduce using rule 19 (inst -> call .)
    goto            reduce using rule 19 (inst -> call .)
    break           reduce using rule 19 (inst -> call .)
    return          reduce using rule 19 (inst -> call .)
    ID              reduce using rule 19 (inst -> call .)
    int             reduce using rule 19 (inst -> call .)
    float           reduce using rule 19 (inst -> call .)
    char            reduce using rule 19 (inst -> call .)
    double          reduce using rule 19 (inst -> call .)
    void            reduce using rule 19 (inst -> call .)
    default         reduce using rule 19 (inst -> call .)
    case            reduce using rule 19 (inst -> call .)


state 56

    (20) inst -> dow .

    DERCOR          reduce using rule 20 (inst -> dow .)
    for             reduce using rule 20 (inst -> dow .)
    if              reduce using rule 20 (inst -> dow .)
    while           reduce using rule 20 (inst -> dow .)
    switch          reduce using rule 20 (inst -> dow .)
    do              reduce using rule 20 (inst -> dow .)
    printf          reduce using rule 20 (inst -> dow .)
    goto            reduce using rule 20 (inst -> dow .)
    break           reduce using rule 20 (inst -> dow .)
    return          reduce using rule 20 (inst -> dow .)
    ID              reduce using rule 20 (inst -> dow .)
    int             reduce using rule 20 (inst -> dow .)
    float           reduce using rule 20 (inst -> dow .)
    char            reduce using rule 20 (inst -> dow .)
    double          reduce using rule 20 (inst -> dow .)
    void            reduce using rule 20 (inst -> dow .)
    default         reduce using rule 20 (inst -> dow .)
    case            reduce using rule 20 (inst -> dow .)


state 57

    (21) inst -> asg .

    DERCOR          reduce using rule 21 (inst -> asg .)
    for             reduce using rule 21 (inst -> asg .)
    if              reduce using rule 21 (inst -> asg .)
    while           reduce using rule 21 (inst -> asg .)
    switch          reduce using rule 21 (inst -> asg .)
    do              reduce using rule 21 (inst -> asg .)
    printf          reduce using rule 21 (inst -> asg .)
    goto            reduce using rule 21 (inst -> asg .)
    break           reduce using rule 21 (inst -> asg .)
    return          reduce using rule 21 (inst -> asg .)
    ID              reduce using rule 21 (inst -> asg .)
    int             reduce using rule 21 (inst -> asg .)
    float           reduce using rule 21 (inst -> asg .)
    char            reduce using rule 21 (inst -> asg .)
    double          reduce using rule 21 (inst -> asg .)
    void            reduce using rule 21 (inst -> asg .)
    default         reduce using rule 21 (inst -> asg .)
    case            reduce using rule 21 (inst -> asg .)


state 58

    (22) inst -> prin .

    DERCOR          reduce using rule 22 (inst -> prin .)
    for             reduce using rule 22 (inst -> prin .)
    if              reduce using rule 22 (inst -> prin .)
    while           reduce using rule 22 (inst -> prin .)
    switch          reduce using rule 22 (inst -> prin .)
    do              reduce using rule 22 (inst -> prin .)
    printf          reduce using rule 22 (inst -> prin .)
    goto            reduce using rule 22 (inst -> prin .)
    break           reduce using rule 22 (inst -> prin .)
    return          reduce using rule 22 (inst -> prin .)
    ID              reduce using rule 22 (inst -> prin .)
    int             reduce using rule 22 (inst -> prin .)
    float           reduce using rule 22 (inst -> prin .)
    char            reduce using rule 22 (inst -> prin .)
    double          reduce using rule 22 (inst -> prin .)
    void            reduce using rule 22 (inst -> prin .)
    default         reduce using rule 22 (inst -> prin .)
    case            reduce using rule 22 (inst -> prin .)


state 59

    (23) inst -> decla . PCOMA

    PCOMA           shift and go to state 118


state 60

    (24) inst -> tag .

    DERCOR          reduce using rule 24 (inst -> tag .)
    for             reduce using rule 24 (inst -> tag .)
    if              reduce using rule 24 (inst -> tag .)
    while           reduce using rule 24 (inst -> tag .)
    switch          reduce using rule 24 (inst -> tag .)
    do              reduce using rule 24 (inst -> tag .)
    printf          reduce using rule 24 (inst -> tag .)
    goto            reduce using rule 24 (inst -> tag .)
    break           reduce using rule 24 (inst -> tag .)
    return          reduce using rule 24 (inst -> tag .)
    ID              reduce using rule 24 (inst -> tag .)
    int             reduce using rule 24 (inst -> tag .)
    float           reduce using rule 24 (inst -> tag .)
    char            reduce using rule 24 (inst -> tag .)
    double          reduce using rule 24 (inst -> tag .)
    void            reduce using rule 24 (inst -> tag .)
    default         reduce using rule 24 (inst -> tag .)
    case            reduce using rule 24 (inst -> tag .)


state 61

    (25) inst -> gotot . PCOMA

    PCOMA           shift and go to state 119


state 62

    (26) inst -> brk . PCOMA

    PCOMA           shift and go to state 120


state 63

    (27) inst -> ret . PCOMA

    PCOMA           shift and go to state 121


state 64

    (58) para -> for . IZQPAR para1 exp PCOMA para2 DERPAR IZQCOR linst DERCOR

    IZQPAR          shift and go to state 122


state 65

    (51) si -> if . IZQPAR exp DERPAR IZQCOR linst DERCOR lelsi els
    (52) si -> if . IZQPAR exp DERPAR IZQCOR linst DERCOR els

    IZQPAR          shift and go to state 123


state 66

    (49) mientras -> while . IZQPAR exp DERPAR IZQCOR linst DERCOR

    IZQPAR          shift and go to state 124


state 67

    (64) cual -> switch . IZQPAR exp DERPAR IZQCOR lcase def DERCOR

    IZQPAR          shift and go to state 125


state 68

    (50) dow -> do . IZQCOR linst DERCOR while IZQPAR exp DERPAR PCOMA

    IZQCOR          shift and go to state 126


state 69

    (28) asg -> TYPE . lids PCOMA
    (47) decla -> TYPE . ident lacs IGUAL exp
    (48) decla -> TYPE . ident IGUAL exp
    (29) lids -> . lids COMA ident
    (30) lids -> . ident
    (76) ident -> . ID

    ID              shift and go to state 17

    lids                           shift and go to state 127
    ident                          shift and go to state 128

state 70

    (71) prin -> printf . IZQPAR STR lexpr DERPAR PCOMA
    (72) prin -> printf . IZQPAR STR DERPAR PCOMA

    IZQPAR          shift and go to state 129


state 71

    (40) gotot -> goto . ident
    (76) ident -> . ID

    ID              shift and go to state 17

    ident                          shift and go to state 130

state 72

    (32) brk -> break .

    PCOMA           reduce using rule 32 (brk -> break .)


state 73

    (33) ret -> return . exp
    (34) ret -> return .
    (73) exp -> . scanf IZQPAR DERPAR
    (81) exp -> . exp SUMA exp
    (82) exp -> . exp RESTA exp
    (83) exp -> . exp MULTI exp
    (84) exp -> . exp DIV exp
    (85) exp -> . exp PORCENTAJE exp
    (86) exp -> . exp DIGUAL exp
    (87) exp -> . exp DESIGUAL exp
    (88) exp -> . exp MAYOR exp
    (89) exp -> . exp MENOR exp
    (90) exp -> . exp MAYORIGUAL exp
    (91) exp -> . exp MENORIGUAL exp
    (92) exp -> . exp AND exp
    (93) exp -> . exp OR exp
    (94) exp -> . exp BAND exp
    (95) exp -> . exp BOR exp
    (96) exp -> . exp BXOR exp
    (97) exp -> . exp BLEFT exp
    (98) exp -> . exp BRIGHT exp
    (99) exp -> . RESTA exp
    (100) exp -> . NOT exp
    (101) exp -> . BNOT exp
    (102) exp -> . sizeof exp
    (103) exp -> . IZQPAR exp DERPAR
    (104) exp -> . IZQPAR TYPE DERPAR exp
    (105) exp -> . exp ASK exp DP exp
    (106) exp -> . DOUBLE
    (107) exp -> . INTEGER
    (108) exp -> . ident
    (109) exp -> . ident lacs
    (110) exp -> . STR
    (111) exp -> . IZQCOR lex DERCOR
    (76) ident -> . ID

    PCOMA           reduce using rule 34 (ret -> return .)
    scanf           shift and go to state 35
    RESTA           shift and go to state 37
    NOT             shift and go to state 38
    BNOT            shift and go to state 39
    sizeof          shift and go to state 40
    IZQPAR          shift and go to state 36
    DOUBLE          shift and go to state 41
    INTEGER         shift and go to state 42
    STR             shift and go to state 43
    IZQCOR          shift and go to state 44
    ID              shift and go to state 17

    exp                            shift and go to state 131
    ident                          shift and go to state 33

state 74

    (13) lparam -> TYPE ident .

    COMA            reduce using rule 13 (lparam -> TYPE ident .)
    DERPAR          reduce using rule 13 (lparam -> TYPE ident .)


state 75

    (4) body -> TYPE ID IZQPAR lpam DERPAR . IZQCOR linst DERCOR

    IZQCOR          shift and go to state 132


state 76

    (12) lparam -> lparam COMA . TYPE ident
    (112) TYPE -> . int
    (113) TYPE -> . float
    (114) TYPE -> . char
    (115) TYPE -> . double
    (116) TYPE -> . void

    int             shift and go to state 7
    float           shift and go to state 8
    char            shift and go to state 9
    double          shift and go to state 10
    void            shift and go to state 11

    TYPE                           shift and go to state 133

state 77

    (5) body -> TYPE main IZQPAR lpam DERPAR . IZQCOR linst DERCOR

    IZQCOR          shift and go to state 134


state 78

    (47) decla -> TYPE ident lacs IGUAL exp .
    (81) exp -> exp . SUMA exp
    (82) exp -> exp . RESTA exp
    (83) exp -> exp . MULTI exp
    (84) exp -> exp . DIV exp
    (85) exp -> exp . PORCENTAJE exp
    (86) exp -> exp . DIGUAL exp
    (87) exp -> exp . DESIGUAL exp
    (88) exp -> exp . MAYOR exp
    (89) exp -> exp . MENOR exp
    (90) exp -> exp . MAYORIGUAL exp
    (91) exp -> exp . MENORIGUAL exp
    (92) exp -> exp . AND exp
    (93) exp -> exp . OR exp
    (94) exp -> exp . BAND exp
    (95) exp -> exp . BOR exp
    (96) exp -> exp . BXOR exp
    (97) exp -> exp . BLEFT exp
    (98) exp -> exp . BRIGHT exp
    (105) exp -> exp . ASK exp DP exp

    PCOMA           reduce using rule 47 (decla -> TYPE ident lacs IGUAL exp .)
    DERPAR          reduce using rule 47 (decla -> TYPE ident lacs IGUAL exp .)
    SUMA            shift and go to state 80
    RESTA           shift and go to state 81
    MULTI           shift and go to state 82
    DIV             shift and go to state 83
    PORCENTAJE      shift and go to state 84
    DIGUAL          shift and go to state 85
    DESIGUAL        shift and go to state 86
    MAYOR           shift and go to state 87
    MENOR           shift and go to state 88
    MAYORIGUAL      shift and go to state 89
    MENORIGUAL      shift and go to state 90
    AND             shift and go to state 91
    OR              shift and go to state 92
    BAND            shift and go to state 93
    BOR             shift and go to state 94
    BXOR            shift and go to state 95
    BLEFT           shift and go to state 96
    BRIGHT          shift and go to state 97
    ASK             shift and go to state 98


state 79

    (109) exp -> ident lacs .
    (77) lacs -> lacs . acs
    (79) acs -> . IZQLLAVE exp DERLLAVE
    (80) acs -> . PUNTO ID

    SUMA            reduce using rule 109 (exp -> ident lacs .)
    RESTA           reduce using rule 109 (exp -> ident lacs .)
    MULTI           reduce using rule 109 (exp -> ident lacs .)
    DIV             reduce using rule 109 (exp -> ident lacs .)
    PORCENTAJE      reduce using rule 109 (exp -> ident lacs .)
    DIGUAL          reduce using rule 109 (exp -> ident lacs .)
    DESIGUAL        reduce using rule 109 (exp -> ident lacs .)
    MAYOR           reduce using rule 109 (exp -> ident lacs .)
    MENOR           reduce using rule 109 (exp -> ident lacs .)
    MAYORIGUAL      reduce using rule 109 (exp -> ident lacs .)
    MENORIGUAL      reduce using rule 109 (exp -> ident lacs .)
    AND             reduce using rule 109 (exp -> ident lacs .)
    OR              reduce using rule 109 (exp -> ident lacs .)
    BAND            reduce using rule 109 (exp -> ident lacs .)
    BOR             reduce using rule 109 (exp -> ident lacs .)
    BXOR            reduce using rule 109 (exp -> ident lacs .)
    BLEFT           reduce using rule 109 (exp -> ident lacs .)
    BRIGHT          reduce using rule 109 (exp -> ident lacs .)
    ASK             reduce using rule 109 (exp -> ident lacs .)
    PCOMA           reduce using rule 109 (exp -> ident lacs .)
    DERPAR          reduce using rule 109 (exp -> ident lacs .)
    DERLLAVE        reduce using rule 109 (exp -> ident lacs .)
    DERCOR          reduce using rule 109 (exp -> ident lacs .)
    COMA            reduce using rule 109 (exp -> ident lacs .)
    DP              reduce using rule 109 (exp -> ident lacs .)
    IZQLLAVE        shift and go to state 24
    PUNTO           shift and go to state 25

    acs                            shift and go to state 32

state 80

    (81) exp -> exp SUMA . exp
    (73) exp -> . scanf IZQPAR DERPAR
    (81) exp -> . exp SUMA exp
    (82) exp -> . exp RESTA exp
    (83) exp -> . exp MULTI exp
    (84) exp -> . exp DIV exp
    (85) exp -> . exp PORCENTAJE exp
    (86) exp -> . exp DIGUAL exp
    (87) exp -> . exp DESIGUAL exp
    (88) exp -> . exp MAYOR exp
    (89) exp -> . exp MENOR exp
    (90) exp -> . exp MAYORIGUAL exp
    (91) exp -> . exp MENORIGUAL exp
    (92) exp -> . exp AND exp
    (93) exp -> . exp OR exp
    (94) exp -> . exp BAND exp
    (95) exp -> . exp BOR exp
    (96) exp -> . exp BXOR exp
    (97) exp -> . exp BLEFT exp
    (98) exp -> . exp BRIGHT exp
    (99) exp -> . RESTA exp
    (100) exp -> . NOT exp
    (101) exp -> . BNOT exp
    (102) exp -> . sizeof exp
    (103) exp -> . IZQPAR exp DERPAR
    (104) exp -> . IZQPAR TYPE DERPAR exp
    (105) exp -> . exp ASK exp DP exp
    (106) exp -> . DOUBLE
    (107) exp -> . INTEGER
    (108) exp -> . ident
    (109) exp -> . ident lacs
    (110) exp -> . STR
    (111) exp -> . IZQCOR lex DERCOR
    (76) ident -> . ID

    scanf           shift and go to state 35
    RESTA           shift and go to state 37
    NOT             shift and go to state 38
    BNOT            shift and go to state 39
    sizeof          shift and go to state 40
    IZQPAR          shift and go to state 36
    DOUBLE          shift and go to state 41
    INTEGER         shift and go to state 42
    STR             shift and go to state 43
    IZQCOR          shift and go to state 44
    ID              shift and go to state 17

    exp                            shift and go to state 135
    ident                          shift and go to state 33

state 81

    (82) exp -> exp RESTA . exp
    (73) exp -> . scanf IZQPAR DERPAR
    (81) exp -> . exp SUMA exp
    (82) exp -> . exp RESTA exp
    (83) exp -> . exp MULTI exp
    (84) exp -> . exp DIV exp
    (85) exp -> . exp PORCENTAJE exp
    (86) exp -> . exp DIGUAL exp
    (87) exp -> . exp DESIGUAL exp
    (88) exp -> . exp MAYOR exp
    (89) exp -> . exp MENOR exp
    (90) exp -> . exp MAYORIGUAL exp
    (91) exp -> . exp MENORIGUAL exp
    (92) exp -> . exp AND exp
    (93) exp -> . exp OR exp
    (94) exp -> . exp BAND exp
    (95) exp -> . exp BOR exp
    (96) exp -> . exp BXOR exp
    (97) exp -> . exp BLEFT exp
    (98) exp -> . exp BRIGHT exp
    (99) exp -> . RESTA exp
    (100) exp -> . NOT exp
    (101) exp -> . BNOT exp
    (102) exp -> . sizeof exp
    (103) exp -> . IZQPAR exp DERPAR
    (104) exp -> . IZQPAR TYPE DERPAR exp
    (105) exp -> . exp ASK exp DP exp
    (106) exp -> . DOUBLE
    (107) exp -> . INTEGER
    (108) exp -> . ident
    (109) exp -> . ident lacs
    (110) exp -> . STR
    (111) exp -> . IZQCOR lex DERCOR
    (76) ident -> . ID

    scanf           shift and go to state 35
    RESTA           shift and go to state 37
    NOT             shift and go to state 38
    BNOT            shift and go to state 39
    sizeof          shift and go to state 40
    IZQPAR          shift and go to state 36
    DOUBLE          shift and go to state 41
    INTEGER         shift and go to state 42
    STR             shift and go to state 43
    IZQCOR          shift and go to state 44
    ID              shift and go to state 17

    exp                            shift and go to state 136
    ident                          shift and go to state 33

state 82

    (83) exp -> exp MULTI . exp
    (73) exp -> . scanf IZQPAR DERPAR
    (81) exp -> . exp SUMA exp
    (82) exp -> . exp RESTA exp
    (83) exp -> . exp MULTI exp
    (84) exp -> . exp DIV exp
    (85) exp -> . exp PORCENTAJE exp
    (86) exp -> . exp DIGUAL exp
    (87) exp -> . exp DESIGUAL exp
    (88) exp -> . exp MAYOR exp
    (89) exp -> . exp MENOR exp
    (90) exp -> . exp MAYORIGUAL exp
    (91) exp -> . exp MENORIGUAL exp
    (92) exp -> . exp AND exp
    (93) exp -> . exp OR exp
    (94) exp -> . exp BAND exp
    (95) exp -> . exp BOR exp
    (96) exp -> . exp BXOR exp
    (97) exp -> . exp BLEFT exp
    (98) exp -> . exp BRIGHT exp
    (99) exp -> . RESTA exp
    (100) exp -> . NOT exp
    (101) exp -> . BNOT exp
    (102) exp -> . sizeof exp
    (103) exp -> . IZQPAR exp DERPAR
    (104) exp -> . IZQPAR TYPE DERPAR exp
    (105) exp -> . exp ASK exp DP exp
    (106) exp -> . DOUBLE
    (107) exp -> . INTEGER
    (108) exp -> . ident
    (109) exp -> . ident lacs
    (110) exp -> . STR
    (111) exp -> . IZQCOR lex DERCOR
    (76) ident -> . ID

    scanf           shift and go to state 35
    RESTA           shift and go to state 37
    NOT             shift and go to state 38
    BNOT            shift and go to state 39
    sizeof          shift and go to state 40
    IZQPAR          shift and go to state 36
    DOUBLE          shift and go to state 41
    INTEGER         shift and go to state 42
    STR             shift and go to state 43
    IZQCOR          shift and go to state 44
    ID              shift and go to state 17

    exp                            shift and go to state 137
    ident                          shift and go to state 33

state 83

    (84) exp -> exp DIV . exp
    (73) exp -> . scanf IZQPAR DERPAR
    (81) exp -> . exp SUMA exp
    (82) exp -> . exp RESTA exp
    (83) exp -> . exp MULTI exp
    (84) exp -> . exp DIV exp
    (85) exp -> . exp PORCENTAJE exp
    (86) exp -> . exp DIGUAL exp
    (87) exp -> . exp DESIGUAL exp
    (88) exp -> . exp MAYOR exp
    (89) exp -> . exp MENOR exp
    (90) exp -> . exp MAYORIGUAL exp
    (91) exp -> . exp MENORIGUAL exp
    (92) exp -> . exp AND exp
    (93) exp -> . exp OR exp
    (94) exp -> . exp BAND exp
    (95) exp -> . exp BOR exp
    (96) exp -> . exp BXOR exp
    (97) exp -> . exp BLEFT exp
    (98) exp -> . exp BRIGHT exp
    (99) exp -> . RESTA exp
    (100) exp -> . NOT exp
    (101) exp -> . BNOT exp
    (102) exp -> . sizeof exp
    (103) exp -> . IZQPAR exp DERPAR
    (104) exp -> . IZQPAR TYPE DERPAR exp
    (105) exp -> . exp ASK exp DP exp
    (106) exp -> . DOUBLE
    (107) exp -> . INTEGER
    (108) exp -> . ident
    (109) exp -> . ident lacs
    (110) exp -> . STR
    (111) exp -> . IZQCOR lex DERCOR
    (76) ident -> . ID

    scanf           shift and go to state 35
    RESTA           shift and go to state 37
    NOT             shift and go to state 38
    BNOT            shift and go to state 39
    sizeof          shift and go to state 40
    IZQPAR          shift and go to state 36
    DOUBLE          shift and go to state 41
    INTEGER         shift and go to state 42
    STR             shift and go to state 43
    IZQCOR          shift and go to state 44
    ID              shift and go to state 17

    exp                            shift and go to state 138
    ident                          shift and go to state 33

state 84

    (85) exp -> exp PORCENTAJE . exp
    (73) exp -> . scanf IZQPAR DERPAR
    (81) exp -> . exp SUMA exp
    (82) exp -> . exp RESTA exp
    (83) exp -> . exp MULTI exp
    (84) exp -> . exp DIV exp
    (85) exp -> . exp PORCENTAJE exp
    (86) exp -> . exp DIGUAL exp
    (87) exp -> . exp DESIGUAL exp
    (88) exp -> . exp MAYOR exp
    (89) exp -> . exp MENOR exp
    (90) exp -> . exp MAYORIGUAL exp
    (91) exp -> . exp MENORIGUAL exp
    (92) exp -> . exp AND exp
    (93) exp -> . exp OR exp
    (94) exp -> . exp BAND exp
    (95) exp -> . exp BOR exp
    (96) exp -> . exp BXOR exp
    (97) exp -> . exp BLEFT exp
    (98) exp -> . exp BRIGHT exp
    (99) exp -> . RESTA exp
    (100) exp -> . NOT exp
    (101) exp -> . BNOT exp
    (102) exp -> . sizeof exp
    (103) exp -> . IZQPAR exp DERPAR
    (104) exp -> . IZQPAR TYPE DERPAR exp
    (105) exp -> . exp ASK exp DP exp
    (106) exp -> . DOUBLE
    (107) exp -> . INTEGER
    (108) exp -> . ident
    (109) exp -> . ident lacs
    (110) exp -> . STR
    (111) exp -> . IZQCOR lex DERCOR
    (76) ident -> . ID

    scanf           shift and go to state 35
    RESTA           shift and go to state 37
    NOT             shift and go to state 38
    BNOT            shift and go to state 39
    sizeof          shift and go to state 40
    IZQPAR          shift and go to state 36
    DOUBLE          shift and go to state 41
    INTEGER         shift and go to state 42
    STR             shift and go to state 43
    IZQCOR          shift and go to state 44
    ID              shift and go to state 17

    exp                            shift and go to state 139
    ident                          shift and go to state 33

state 85

    (86) exp -> exp DIGUAL . exp
    (73) exp -> . scanf IZQPAR DERPAR
    (81) exp -> . exp SUMA exp
    (82) exp -> . exp RESTA exp
    (83) exp -> . exp MULTI exp
    (84) exp -> . exp DIV exp
    (85) exp -> . exp PORCENTAJE exp
    (86) exp -> . exp DIGUAL exp
    (87) exp -> . exp DESIGUAL exp
    (88) exp -> . exp MAYOR exp
    (89) exp -> . exp MENOR exp
    (90) exp -> . exp MAYORIGUAL exp
    (91) exp -> . exp MENORIGUAL exp
    (92) exp -> . exp AND exp
    (93) exp -> . exp OR exp
    (94) exp -> . exp BAND exp
    (95) exp -> . exp BOR exp
    (96) exp -> . exp BXOR exp
    (97) exp -> . exp BLEFT exp
    (98) exp -> . exp BRIGHT exp
    (99) exp -> . RESTA exp
    (100) exp -> . NOT exp
    (101) exp -> . BNOT exp
    (102) exp -> . sizeof exp
    (103) exp -> . IZQPAR exp DERPAR
    (104) exp -> . IZQPAR TYPE DERPAR exp
    (105) exp -> . exp ASK exp DP exp
    (106) exp -> . DOUBLE
    (107) exp -> . INTEGER
    (108) exp -> . ident
    (109) exp -> . ident lacs
    (110) exp -> . STR
    (111) exp -> . IZQCOR lex DERCOR
    (76) ident -> . ID

    scanf           shift and go to state 35
    RESTA           shift and go to state 37
    NOT             shift and go to state 38
    BNOT            shift and go to state 39
    sizeof          shift and go to state 40
    IZQPAR          shift and go to state 36
    DOUBLE          shift and go to state 41
    INTEGER         shift and go to state 42
    STR             shift and go to state 43
    IZQCOR          shift and go to state 44
    ID              shift and go to state 17

    exp                            shift and go to state 140
    ident                          shift and go to state 33

state 86

    (87) exp -> exp DESIGUAL . exp
    (73) exp -> . scanf IZQPAR DERPAR
    (81) exp -> . exp SUMA exp
    (82) exp -> . exp RESTA exp
    (83) exp -> . exp MULTI exp
    (84) exp -> . exp DIV exp
    (85) exp -> . exp PORCENTAJE exp
    (86) exp -> . exp DIGUAL exp
    (87) exp -> . exp DESIGUAL exp
    (88) exp -> . exp MAYOR exp
    (89) exp -> . exp MENOR exp
    (90) exp -> . exp MAYORIGUAL exp
    (91) exp -> . exp MENORIGUAL exp
    (92) exp -> . exp AND exp
    (93) exp -> . exp OR exp
    (94) exp -> . exp BAND exp
    (95) exp -> . exp BOR exp
    (96) exp -> . exp BXOR exp
    (97) exp -> . exp BLEFT exp
    (98) exp -> . exp BRIGHT exp
    (99) exp -> . RESTA exp
    (100) exp -> . NOT exp
    (101) exp -> . BNOT exp
    (102) exp -> . sizeof exp
    (103) exp -> . IZQPAR exp DERPAR
    (104) exp -> . IZQPAR TYPE DERPAR exp
    (105) exp -> . exp ASK exp DP exp
    (106) exp -> . DOUBLE
    (107) exp -> . INTEGER
    (108) exp -> . ident
    (109) exp -> . ident lacs
    (110) exp -> . STR
    (111) exp -> . IZQCOR lex DERCOR
    (76) ident -> . ID

    scanf           shift and go to state 35
    RESTA           shift and go to state 37
    NOT             shift and go to state 38
    BNOT            shift and go to state 39
    sizeof          shift and go to state 40
    IZQPAR          shift and go to state 36
    DOUBLE          shift and go to state 41
    INTEGER         shift and go to state 42
    STR             shift and go to state 43
    IZQCOR          shift and go to state 44
    ID              shift and go to state 17

    exp                            shift and go to state 141
    ident                          shift and go to state 33

state 87

    (88) exp -> exp MAYOR . exp
    (73) exp -> . scanf IZQPAR DERPAR
    (81) exp -> . exp SUMA exp
    (82) exp -> . exp RESTA exp
    (83) exp -> . exp MULTI exp
    (84) exp -> . exp DIV exp
    (85) exp -> . exp PORCENTAJE exp
    (86) exp -> . exp DIGUAL exp
    (87) exp -> . exp DESIGUAL exp
    (88) exp -> . exp MAYOR exp
    (89) exp -> . exp MENOR exp
    (90) exp -> . exp MAYORIGUAL exp
    (91) exp -> . exp MENORIGUAL exp
    (92) exp -> . exp AND exp
    (93) exp -> . exp OR exp
    (94) exp -> . exp BAND exp
    (95) exp -> . exp BOR exp
    (96) exp -> . exp BXOR exp
    (97) exp -> . exp BLEFT exp
    (98) exp -> . exp BRIGHT exp
    (99) exp -> . RESTA exp
    (100) exp -> . NOT exp
    (101) exp -> . BNOT exp
    (102) exp -> . sizeof exp
    (103) exp -> . IZQPAR exp DERPAR
    (104) exp -> . IZQPAR TYPE DERPAR exp
    (105) exp -> . exp ASK exp DP exp
    (106) exp -> . DOUBLE
    (107) exp -> . INTEGER
    (108) exp -> . ident
    (109) exp -> . ident lacs
    (110) exp -> . STR
    (111) exp -> . IZQCOR lex DERCOR
    (76) ident -> . ID

    scanf           shift and go to state 35
    RESTA           shift and go to state 37
    NOT             shift and go to state 38
    BNOT            shift and go to state 39
    sizeof          shift and go to state 40
    IZQPAR          shift and go to state 36
    DOUBLE          shift and go to state 41
    INTEGER         shift and go to state 42
    STR             shift and go to state 43
    IZQCOR          shift and go to state 44
    ID              shift and go to state 17

    exp                            shift and go to state 142
    ident                          shift and go to state 33

state 88

    (89) exp -> exp MENOR . exp
    (73) exp -> . scanf IZQPAR DERPAR
    (81) exp -> . exp SUMA exp
    (82) exp -> . exp RESTA exp
    (83) exp -> . exp MULTI exp
    (84) exp -> . exp DIV exp
    (85) exp -> . exp PORCENTAJE exp
    (86) exp -> . exp DIGUAL exp
    (87) exp -> . exp DESIGUAL exp
    (88) exp -> . exp MAYOR exp
    (89) exp -> . exp MENOR exp
    (90) exp -> . exp MAYORIGUAL exp
    (91) exp -> . exp MENORIGUAL exp
    (92) exp -> . exp AND exp
    (93) exp -> . exp OR exp
    (94) exp -> . exp BAND exp
    (95) exp -> . exp BOR exp
    (96) exp -> . exp BXOR exp
    (97) exp -> . exp BLEFT exp
    (98) exp -> . exp BRIGHT exp
    (99) exp -> . RESTA exp
    (100) exp -> . NOT exp
    (101) exp -> . BNOT exp
    (102) exp -> . sizeof exp
    (103) exp -> . IZQPAR exp DERPAR
    (104) exp -> . IZQPAR TYPE DERPAR exp
    (105) exp -> . exp ASK exp DP exp
    (106) exp -> . DOUBLE
    (107) exp -> . INTEGER
    (108) exp -> . ident
    (109) exp -> . ident lacs
    (110) exp -> . STR
    (111) exp -> . IZQCOR lex DERCOR
    (76) ident -> . ID

    scanf           shift and go to state 35
    RESTA           shift and go to state 37
    NOT             shift and go to state 38
    BNOT            shift and go to state 39
    sizeof          shift and go to state 40
    IZQPAR          shift and go to state 36
    DOUBLE          shift and go to state 41
    INTEGER         shift and go to state 42
    STR             shift and go to state 43
    IZQCOR          shift and go to state 44
    ID              shift and go to state 17

    exp                            shift and go to state 143
    ident                          shift and go to state 33

state 89

    (90) exp -> exp MAYORIGUAL . exp
    (73) exp -> . scanf IZQPAR DERPAR
    (81) exp -> . exp SUMA exp
    (82) exp -> . exp RESTA exp
    (83) exp -> . exp MULTI exp
    (84) exp -> . exp DIV exp
    (85) exp -> . exp PORCENTAJE exp
    (86) exp -> . exp DIGUAL exp
    (87) exp -> . exp DESIGUAL exp
    (88) exp -> . exp MAYOR exp
    (89) exp -> . exp MENOR exp
    (90) exp -> . exp MAYORIGUAL exp
    (91) exp -> . exp MENORIGUAL exp
    (92) exp -> . exp AND exp
    (93) exp -> . exp OR exp
    (94) exp -> . exp BAND exp
    (95) exp -> . exp BOR exp
    (96) exp -> . exp BXOR exp
    (97) exp -> . exp BLEFT exp
    (98) exp -> . exp BRIGHT exp
    (99) exp -> . RESTA exp
    (100) exp -> . NOT exp
    (101) exp -> . BNOT exp
    (102) exp -> . sizeof exp
    (103) exp -> . IZQPAR exp DERPAR
    (104) exp -> . IZQPAR TYPE DERPAR exp
    (105) exp -> . exp ASK exp DP exp
    (106) exp -> . DOUBLE
    (107) exp -> . INTEGER
    (108) exp -> . ident
    (109) exp -> . ident lacs
    (110) exp -> . STR
    (111) exp -> . IZQCOR lex DERCOR
    (76) ident -> . ID

    scanf           shift and go to state 35
    RESTA           shift and go to state 37
    NOT             shift and go to state 38
    BNOT            shift and go to state 39
    sizeof          shift and go to state 40
    IZQPAR          shift and go to state 36
    DOUBLE          shift and go to state 41
    INTEGER         shift and go to state 42
    STR             shift and go to state 43
    IZQCOR          shift and go to state 44
    ID              shift and go to state 17

    exp                            shift and go to state 144
    ident                          shift and go to state 33

state 90

    (91) exp -> exp MENORIGUAL . exp
    (73) exp -> . scanf IZQPAR DERPAR
    (81) exp -> . exp SUMA exp
    (82) exp -> . exp RESTA exp
    (83) exp -> . exp MULTI exp
    (84) exp -> . exp DIV exp
    (85) exp -> . exp PORCENTAJE exp
    (86) exp -> . exp DIGUAL exp
    (87) exp -> . exp DESIGUAL exp
    (88) exp -> . exp MAYOR exp
    (89) exp -> . exp MENOR exp
    (90) exp -> . exp MAYORIGUAL exp
    (91) exp -> . exp MENORIGUAL exp
    (92) exp -> . exp AND exp
    (93) exp -> . exp OR exp
    (94) exp -> . exp BAND exp
    (95) exp -> . exp BOR exp
    (96) exp -> . exp BXOR exp
    (97) exp -> . exp BLEFT exp
    (98) exp -> . exp BRIGHT exp
    (99) exp -> . RESTA exp
    (100) exp -> . NOT exp
    (101) exp -> . BNOT exp
    (102) exp -> . sizeof exp
    (103) exp -> . IZQPAR exp DERPAR
    (104) exp -> . IZQPAR TYPE DERPAR exp
    (105) exp -> . exp ASK exp DP exp
    (106) exp -> . DOUBLE
    (107) exp -> . INTEGER
    (108) exp -> . ident
    (109) exp -> . ident lacs
    (110) exp -> . STR
    (111) exp -> . IZQCOR lex DERCOR
    (76) ident -> . ID

    scanf           shift and go to state 35
    RESTA           shift and go to state 37
    NOT             shift and go to state 38
    BNOT            shift and go to state 39
    sizeof          shift and go to state 40
    IZQPAR          shift and go to state 36
    DOUBLE          shift and go to state 41
    INTEGER         shift and go to state 42
    STR             shift and go to state 43
    IZQCOR          shift and go to state 44
    ID              shift and go to state 17

    exp                            shift and go to state 145
    ident                          shift and go to state 33

state 91

    (92) exp -> exp AND . exp
    (73) exp -> . scanf IZQPAR DERPAR
    (81) exp -> . exp SUMA exp
    (82) exp -> . exp RESTA exp
    (83) exp -> . exp MULTI exp
    (84) exp -> . exp DIV exp
    (85) exp -> . exp PORCENTAJE exp
    (86) exp -> . exp DIGUAL exp
    (87) exp -> . exp DESIGUAL exp
    (88) exp -> . exp MAYOR exp
    (89) exp -> . exp MENOR exp
    (90) exp -> . exp MAYORIGUAL exp
    (91) exp -> . exp MENORIGUAL exp
    (92) exp -> . exp AND exp
    (93) exp -> . exp OR exp
    (94) exp -> . exp BAND exp
    (95) exp -> . exp BOR exp
    (96) exp -> . exp BXOR exp
    (97) exp -> . exp BLEFT exp
    (98) exp -> . exp BRIGHT exp
    (99) exp -> . RESTA exp
    (100) exp -> . NOT exp
    (101) exp -> . BNOT exp
    (102) exp -> . sizeof exp
    (103) exp -> . IZQPAR exp DERPAR
    (104) exp -> . IZQPAR TYPE DERPAR exp
    (105) exp -> . exp ASK exp DP exp
    (106) exp -> . DOUBLE
    (107) exp -> . INTEGER
    (108) exp -> . ident
    (109) exp -> . ident lacs
    (110) exp -> . STR
    (111) exp -> . IZQCOR lex DERCOR
    (76) ident -> . ID

    scanf           shift and go to state 35
    RESTA           shift and go to state 37
    NOT             shift and go to state 38
    BNOT            shift and go to state 39
    sizeof          shift and go to state 40
    IZQPAR          shift and go to state 36
    DOUBLE          shift and go to state 41
    INTEGER         shift and go to state 42
    STR             shift and go to state 43
    IZQCOR          shift and go to state 44
    ID              shift and go to state 17

    exp                            shift and go to state 146
    ident                          shift and go to state 33

state 92

    (93) exp -> exp OR . exp
    (73) exp -> . scanf IZQPAR DERPAR
    (81) exp -> . exp SUMA exp
    (82) exp -> . exp RESTA exp
    (83) exp -> . exp MULTI exp
    (84) exp -> . exp DIV exp
    (85) exp -> . exp PORCENTAJE exp
    (86) exp -> . exp DIGUAL exp
    (87) exp -> . exp DESIGUAL exp
    (88) exp -> . exp MAYOR exp
    (89) exp -> . exp MENOR exp
    (90) exp -> . exp MAYORIGUAL exp
    (91) exp -> . exp MENORIGUAL exp
    (92) exp -> . exp AND exp
    (93) exp -> . exp OR exp
    (94) exp -> . exp BAND exp
    (95) exp -> . exp BOR exp
    (96) exp -> . exp BXOR exp
    (97) exp -> . exp BLEFT exp
    (98) exp -> . exp BRIGHT exp
    (99) exp -> . RESTA exp
    (100) exp -> . NOT exp
    (101) exp -> . BNOT exp
    (102) exp -> . sizeof exp
    (103) exp -> . IZQPAR exp DERPAR
    (104) exp -> . IZQPAR TYPE DERPAR exp
    (105) exp -> . exp ASK exp DP exp
    (106) exp -> . DOUBLE
    (107) exp -> . INTEGER
    (108) exp -> . ident
    (109) exp -> . ident lacs
    (110) exp -> . STR
    (111) exp -> . IZQCOR lex DERCOR
    (76) ident -> . ID

    scanf           shift and go to state 35
    RESTA           shift and go to state 37
    NOT             shift and go to state 38
    BNOT            shift and go to state 39
    sizeof          shift and go to state 40
    IZQPAR          shift and go to state 36
    DOUBLE          shift and go to state 41
    INTEGER         shift and go to state 42
    STR             shift and go to state 43
    IZQCOR          shift and go to state 44
    ID              shift and go to state 17

    exp                            shift and go to state 147
    ident                          shift and go to state 33

state 93

    (94) exp -> exp BAND . exp
    (73) exp -> . scanf IZQPAR DERPAR
    (81) exp -> . exp SUMA exp
    (82) exp -> . exp RESTA exp
    (83) exp -> . exp MULTI exp
    (84) exp -> . exp DIV exp
    (85) exp -> . exp PORCENTAJE exp
    (86) exp -> . exp DIGUAL exp
    (87) exp -> . exp DESIGUAL exp
    (88) exp -> . exp MAYOR exp
    (89) exp -> . exp MENOR exp
    (90) exp -> . exp MAYORIGUAL exp
    (91) exp -> . exp MENORIGUAL exp
    (92) exp -> . exp AND exp
    (93) exp -> . exp OR exp
    (94) exp -> . exp BAND exp
    (95) exp -> . exp BOR exp
    (96) exp -> . exp BXOR exp
    (97) exp -> . exp BLEFT exp
    (98) exp -> . exp BRIGHT exp
    (99) exp -> . RESTA exp
    (100) exp -> . NOT exp
    (101) exp -> . BNOT exp
    (102) exp -> . sizeof exp
    (103) exp -> . IZQPAR exp DERPAR
    (104) exp -> . IZQPAR TYPE DERPAR exp
    (105) exp -> . exp ASK exp DP exp
    (106) exp -> . DOUBLE
    (107) exp -> . INTEGER
    (108) exp -> . ident
    (109) exp -> . ident lacs
    (110) exp -> . STR
    (111) exp -> . IZQCOR lex DERCOR
    (76) ident -> . ID

    scanf           shift and go to state 35
    RESTA           shift and go to state 37
    NOT             shift and go to state 38
    BNOT            shift and go to state 39
    sizeof          shift and go to state 40
    IZQPAR          shift and go to state 36
    DOUBLE          shift and go to state 41
    INTEGER         shift and go to state 42
    STR             shift and go to state 43
    IZQCOR          shift and go to state 44
    ID              shift and go to state 17

    exp                            shift and go to state 148
    ident                          shift and go to state 33

state 94

    (95) exp -> exp BOR . exp
    (73) exp -> . scanf IZQPAR DERPAR
    (81) exp -> . exp SUMA exp
    (82) exp -> . exp RESTA exp
    (83) exp -> . exp MULTI exp
    (84) exp -> . exp DIV exp
    (85) exp -> . exp PORCENTAJE exp
    (86) exp -> . exp DIGUAL exp
    (87) exp -> . exp DESIGUAL exp
    (88) exp -> . exp MAYOR exp
    (89) exp -> . exp MENOR exp
    (90) exp -> . exp MAYORIGUAL exp
    (91) exp -> . exp MENORIGUAL exp
    (92) exp -> . exp AND exp
    (93) exp -> . exp OR exp
    (94) exp -> . exp BAND exp
    (95) exp -> . exp BOR exp
    (96) exp -> . exp BXOR exp
    (97) exp -> . exp BLEFT exp
    (98) exp -> . exp BRIGHT exp
    (99) exp -> . RESTA exp
    (100) exp -> . NOT exp
    (101) exp -> . BNOT exp
    (102) exp -> . sizeof exp
    (103) exp -> . IZQPAR exp DERPAR
    (104) exp -> . IZQPAR TYPE DERPAR exp
    (105) exp -> . exp ASK exp DP exp
    (106) exp -> . DOUBLE
    (107) exp -> . INTEGER
    (108) exp -> . ident
    (109) exp -> . ident lacs
    (110) exp -> . STR
    (111) exp -> . IZQCOR lex DERCOR
    (76) ident -> . ID

    scanf           shift and go to state 35
    RESTA           shift and go to state 37
    NOT             shift and go to state 38
    BNOT            shift and go to state 39
    sizeof          shift and go to state 40
    IZQPAR          shift and go to state 36
    DOUBLE          shift and go to state 41
    INTEGER         shift and go to state 42
    STR             shift and go to state 43
    IZQCOR          shift and go to state 44
    ID              shift and go to state 17

    exp                            shift and go to state 149
    ident                          shift and go to state 33

state 95

    (96) exp -> exp BXOR . exp
    (73) exp -> . scanf IZQPAR DERPAR
    (81) exp -> . exp SUMA exp
    (82) exp -> . exp RESTA exp
    (83) exp -> . exp MULTI exp
    (84) exp -> . exp DIV exp
    (85) exp -> . exp PORCENTAJE exp
    (86) exp -> . exp DIGUAL exp
    (87) exp -> . exp DESIGUAL exp
    (88) exp -> . exp MAYOR exp
    (89) exp -> . exp MENOR exp
    (90) exp -> . exp MAYORIGUAL exp
    (91) exp -> . exp MENORIGUAL exp
    (92) exp -> . exp AND exp
    (93) exp -> . exp OR exp
    (94) exp -> . exp BAND exp
    (95) exp -> . exp BOR exp
    (96) exp -> . exp BXOR exp
    (97) exp -> . exp BLEFT exp
    (98) exp -> . exp BRIGHT exp
    (99) exp -> . RESTA exp
    (100) exp -> . NOT exp
    (101) exp -> . BNOT exp
    (102) exp -> . sizeof exp
    (103) exp -> . IZQPAR exp DERPAR
    (104) exp -> . IZQPAR TYPE DERPAR exp
    (105) exp -> . exp ASK exp DP exp
    (106) exp -> . DOUBLE
    (107) exp -> . INTEGER
    (108) exp -> . ident
    (109) exp -> . ident lacs
    (110) exp -> . STR
    (111) exp -> . IZQCOR lex DERCOR
    (76) ident -> . ID

    scanf           shift and go to state 35
    RESTA           shift and go to state 37
    NOT             shift and go to state 38
    BNOT            shift and go to state 39
    sizeof          shift and go to state 40
    IZQPAR          shift and go to state 36
    DOUBLE          shift and go to state 41
    INTEGER         shift and go to state 42
    STR             shift and go to state 43
    IZQCOR          shift and go to state 44
    ID              shift and go to state 17

    exp                            shift and go to state 150
    ident                          shift and go to state 33

state 96

    (97) exp -> exp BLEFT . exp
    (73) exp -> . scanf IZQPAR DERPAR
    (81) exp -> . exp SUMA exp
    (82) exp -> . exp RESTA exp
    (83) exp -> . exp MULTI exp
    (84) exp -> . exp DIV exp
    (85) exp -> . exp PORCENTAJE exp
    (86) exp -> . exp DIGUAL exp
    (87) exp -> . exp DESIGUAL exp
    (88) exp -> . exp MAYOR exp
    (89) exp -> . exp MENOR exp
    (90) exp -> . exp MAYORIGUAL exp
    (91) exp -> . exp MENORIGUAL exp
    (92) exp -> . exp AND exp
    (93) exp -> . exp OR exp
    (94) exp -> . exp BAND exp
    (95) exp -> . exp BOR exp
    (96) exp -> . exp BXOR exp
    (97) exp -> . exp BLEFT exp
    (98) exp -> . exp BRIGHT exp
    (99) exp -> . RESTA exp
    (100) exp -> . NOT exp
    (101) exp -> . BNOT exp
    (102) exp -> . sizeof exp
    (103) exp -> . IZQPAR exp DERPAR
    (104) exp -> . IZQPAR TYPE DERPAR exp
    (105) exp -> . exp ASK exp DP exp
    (106) exp -> . DOUBLE
    (107) exp -> . INTEGER
    (108) exp -> . ident
    (109) exp -> . ident lacs
    (110) exp -> . STR
    (111) exp -> . IZQCOR lex DERCOR
    (76) ident -> . ID

    scanf           shift and go to state 35
    RESTA           shift and go to state 37
    NOT             shift and go to state 38
    BNOT            shift and go to state 39
    sizeof          shift and go to state 40
    IZQPAR          shift and go to state 36
    DOUBLE          shift and go to state 41
    INTEGER         shift and go to state 42
    STR             shift and go to state 43
    IZQCOR          shift and go to state 44
    ID              shift and go to state 17

    exp                            shift and go to state 151
    ident                          shift and go to state 33

state 97

    (98) exp -> exp BRIGHT . exp
    (73) exp -> . scanf IZQPAR DERPAR
    (81) exp -> . exp SUMA exp
    (82) exp -> . exp RESTA exp
    (83) exp -> . exp MULTI exp
    (84) exp -> . exp DIV exp
    (85) exp -> . exp PORCENTAJE exp
    (86) exp -> . exp DIGUAL exp
    (87) exp -> . exp DESIGUAL exp
    (88) exp -> . exp MAYOR exp
    (89) exp -> . exp MENOR exp
    (90) exp -> . exp MAYORIGUAL exp
    (91) exp -> . exp MENORIGUAL exp
    (92) exp -> . exp AND exp
    (93) exp -> . exp OR exp
    (94) exp -> . exp BAND exp
    (95) exp -> . exp BOR exp
    (96) exp -> . exp BXOR exp
    (97) exp -> . exp BLEFT exp
    (98) exp -> . exp BRIGHT exp
    (99) exp -> . RESTA exp
    (100) exp -> . NOT exp
    (101) exp -> . BNOT exp
    (102) exp -> . sizeof exp
    (103) exp -> . IZQPAR exp DERPAR
    (104) exp -> . IZQPAR TYPE DERPAR exp
    (105) exp -> . exp ASK exp DP exp
    (106) exp -> . DOUBLE
    (107) exp -> . INTEGER
    (108) exp -> . ident
    (109) exp -> . ident lacs
    (110) exp -> . STR
    (111) exp -> . IZQCOR lex DERCOR
    (76) ident -> . ID

    scanf           shift and go to state 35
    RESTA           shift and go to state 37
    NOT             shift and go to state 38
    BNOT            shift and go to state 39
    sizeof          shift and go to state 40
    IZQPAR          shift and go to state 36
    DOUBLE          shift and go to state 41
    INTEGER         shift and go to state 42
    STR             shift and go to state 43
    IZQCOR          shift and go to state 44
    ID              shift and go to state 17

    exp                            shift and go to state 152
    ident                          shift and go to state 33

state 98

    (105) exp -> exp ASK . exp DP exp
    (73) exp -> . scanf IZQPAR DERPAR
    (81) exp -> . exp SUMA exp
    (82) exp -> . exp RESTA exp
    (83) exp -> . exp MULTI exp
    (84) exp -> . exp DIV exp
    (85) exp -> . exp PORCENTAJE exp
    (86) exp -> . exp DIGUAL exp
    (87) exp -> . exp DESIGUAL exp
    (88) exp -> . exp MAYOR exp
    (89) exp -> . exp MENOR exp
    (90) exp -> . exp MAYORIGUAL exp
    (91) exp -> . exp MENORIGUAL exp
    (92) exp -> . exp AND exp
    (93) exp -> . exp OR exp
    (94) exp -> . exp BAND exp
    (95) exp -> . exp BOR exp
    (96) exp -> . exp BXOR exp
    (97) exp -> . exp BLEFT exp
    (98) exp -> . exp BRIGHT exp
    (99) exp -> . RESTA exp
    (100) exp -> . NOT exp
    (101) exp -> . BNOT exp
    (102) exp -> . sizeof exp
    (103) exp -> . IZQPAR exp DERPAR
    (104) exp -> . IZQPAR TYPE DERPAR exp
    (105) exp -> . exp ASK exp DP exp
    (106) exp -> . DOUBLE
    (107) exp -> . INTEGER
    (108) exp -> . ident
    (109) exp -> . ident lacs
    (110) exp -> . STR
    (111) exp -> . IZQCOR lex DERCOR
    (76) ident -> . ID

    scanf           shift and go to state 35
    RESTA           shift and go to state 37
    NOT             shift and go to state 38
    BNOT            shift and go to state 39
    sizeof          shift and go to state 40
    IZQPAR          shift and go to state 36
    DOUBLE          shift and go to state 41
    INTEGER         shift and go to state 42
    STR             shift and go to state 43
    IZQCOR          shift and go to state 44
    ID              shift and go to state 17

    exp                            shift and go to state 153
    ident                          shift and go to state 33

state 99

    (73) exp -> scanf IZQPAR . DERPAR

    DERPAR          shift and go to state 154


state 100

    (103) exp -> IZQPAR exp . DERPAR
    (81) exp -> exp . SUMA exp
    (82) exp -> exp . RESTA exp
    (83) exp -> exp . MULTI exp
    (84) exp -> exp . DIV exp
    (85) exp -> exp . PORCENTAJE exp
    (86) exp -> exp . DIGUAL exp
    (87) exp -> exp . DESIGUAL exp
    (88) exp -> exp . MAYOR exp
    (89) exp -> exp . MENOR exp
    (90) exp -> exp . MAYORIGUAL exp
    (91) exp -> exp . MENORIGUAL exp
    (92) exp -> exp . AND exp
    (93) exp -> exp . OR exp
    (94) exp -> exp . BAND exp
    (95) exp -> exp . BOR exp
    (96) exp -> exp . BXOR exp
    (97) exp -> exp . BLEFT exp
    (98) exp -> exp . BRIGHT exp
    (105) exp -> exp . ASK exp DP exp

    DERPAR          shift and go to state 155
    SUMA            shift and go to state 80
    RESTA           shift and go to state 81
    MULTI           shift and go to state 82
    DIV             shift and go to state 83
    PORCENTAJE      shift and go to state 84
    DIGUAL          shift and go to state 85
    DESIGUAL        shift and go to state 86
    MAYOR           shift and go to state 87
    MENOR           shift and go to state 88
    MAYORIGUAL      shift and go to state 89
    MENORIGUAL      shift and go to state 90
    AND             shift and go to state 91
    OR              shift and go to state 92
    BAND            shift and go to state 93
    BOR             shift and go to state 94
    BXOR            shift and go to state 95
    BLEFT           shift and go to state 96
    BRIGHT          shift and go to state 97
    ASK             shift and go to state 98


state 101

    (104) exp -> IZQPAR TYPE . DERPAR exp

    DERPAR          shift and go to state 156


state 102

    (99) exp -> RESTA exp .
    (81) exp -> exp . SUMA exp
    (82) exp -> exp . RESTA exp
    (83) exp -> exp . MULTI exp
    (84) exp -> exp . DIV exp
    (85) exp -> exp . PORCENTAJE exp
    (86) exp -> exp . DIGUAL exp
    (87) exp -> exp . DESIGUAL exp
    (88) exp -> exp . MAYOR exp
    (89) exp -> exp . MENOR exp
    (90) exp -> exp . MAYORIGUAL exp
    (91) exp -> exp . MENORIGUAL exp
    (92) exp -> exp . AND exp
    (93) exp -> exp . OR exp
    (94) exp -> exp . BAND exp
    (95) exp -> exp . BOR exp
    (96) exp -> exp . BXOR exp
    (97) exp -> exp . BLEFT exp
    (98) exp -> exp . BRIGHT exp
    (105) exp -> exp . ASK exp DP exp

    SUMA            reduce using rule 99 (exp -> RESTA exp .)
    RESTA           reduce using rule 99 (exp -> RESTA exp .)
    DIGUAL          reduce using rule 99 (exp -> RESTA exp .)
    DESIGUAL        reduce using rule 99 (exp -> RESTA exp .)
    MAYOR           reduce using rule 99 (exp -> RESTA exp .)
    MENOR           reduce using rule 99 (exp -> RESTA exp .)
    MAYORIGUAL      reduce using rule 99 (exp -> RESTA exp .)
    MENORIGUAL      reduce using rule 99 (exp -> RESTA exp .)
    AND             reduce using rule 99 (exp -> RESTA exp .)
    OR              reduce using rule 99 (exp -> RESTA exp .)
    BAND            reduce using rule 99 (exp -> RESTA exp .)
    BOR             reduce using rule 99 (exp -> RESTA exp .)
    BXOR            reduce using rule 99 (exp -> RESTA exp .)
    BLEFT           reduce using rule 99 (exp -> RESTA exp .)
    BRIGHT          reduce using rule 99 (exp -> RESTA exp .)
    ASK             reduce using rule 99 (exp -> RESTA exp .)
    PCOMA           reduce using rule 99 (exp -> RESTA exp .)
    DERPAR          reduce using rule 99 (exp -> RESTA exp .)
    DERLLAVE        reduce using rule 99 (exp -> RESTA exp .)
    DERCOR          reduce using rule 99 (exp -> RESTA exp .)
    COMA            reduce using rule 99 (exp -> RESTA exp .)
    DP              reduce using rule 99 (exp -> RESTA exp .)
    MULTI           shift and go to state 82
    DIV             shift and go to state 83
    PORCENTAJE      shift and go to state 84

  ! MULTI           [ reduce using rule 99 (exp -> RESTA exp .) ]
  ! DIV             [ reduce using rule 99 (exp -> RESTA exp .) ]
  ! PORCENTAJE      [ reduce using rule 99 (exp -> RESTA exp .) ]
  ! SUMA            [ shift and go to state 80 ]
  ! RESTA           [ shift and go to state 81 ]
  ! DIGUAL          [ shift and go to state 85 ]
  ! DESIGUAL        [ shift and go to state 86 ]
  ! MAYOR           [ shift and go to state 87 ]
  ! MENOR           [ shift and go to state 88 ]
  ! MAYORIGUAL      [ shift and go to state 89 ]
  ! MENORIGUAL      [ shift and go to state 90 ]
  ! AND             [ shift and go to state 91 ]
  ! OR              [ shift and go to state 92 ]
  ! BAND            [ shift and go to state 93 ]
  ! BOR             [ shift and go to state 94 ]
  ! BXOR            [ shift and go to state 95 ]
  ! BLEFT           [ shift and go to state 96 ]
  ! BRIGHT          [ shift and go to state 97 ]
  ! ASK             [ shift and go to state 98 ]


state 103

    (100) exp -> NOT exp .
    (81) exp -> exp . SUMA exp
    (82) exp -> exp . RESTA exp
    (83) exp -> exp . MULTI exp
    (84) exp -> exp . DIV exp
    (85) exp -> exp . PORCENTAJE exp
    (86) exp -> exp . DIGUAL exp
    (87) exp -> exp . DESIGUAL exp
    (88) exp -> exp . MAYOR exp
    (89) exp -> exp . MENOR exp
    (90) exp -> exp . MAYORIGUAL exp
    (91) exp -> exp . MENORIGUAL exp
    (92) exp -> exp . AND exp
    (93) exp -> exp . OR exp
    (94) exp -> exp . BAND exp
    (95) exp -> exp . BOR exp
    (96) exp -> exp . BXOR exp
    (97) exp -> exp . BLEFT exp
    (98) exp -> exp . BRIGHT exp
    (105) exp -> exp . ASK exp DP exp

    SUMA            reduce using rule 100 (exp -> NOT exp .)
    RESTA           reduce using rule 100 (exp -> NOT exp .)
    MULTI           reduce using rule 100 (exp -> NOT exp .)
    DIV             reduce using rule 100 (exp -> NOT exp .)
    PORCENTAJE      reduce using rule 100 (exp -> NOT exp .)
    DIGUAL          reduce using rule 100 (exp -> NOT exp .)
    DESIGUAL        reduce using rule 100 (exp -> NOT exp .)
    MAYOR           reduce using rule 100 (exp -> NOT exp .)
    MENOR           reduce using rule 100 (exp -> NOT exp .)
    MAYORIGUAL      reduce using rule 100 (exp -> NOT exp .)
    MENORIGUAL      reduce using rule 100 (exp -> NOT exp .)
    AND             reduce using rule 100 (exp -> NOT exp .)
    OR              reduce using rule 100 (exp -> NOT exp .)
    BAND            reduce using rule 100 (exp -> NOT exp .)
    BOR             reduce using rule 100 (exp -> NOT exp .)
    BXOR            reduce using rule 100 (exp -> NOT exp .)
    BLEFT           reduce using rule 100 (exp -> NOT exp .)
    BRIGHT          reduce using rule 100 (exp -> NOT exp .)
    ASK             reduce using rule 100 (exp -> NOT exp .)
    PCOMA           reduce using rule 100 (exp -> NOT exp .)
    DERPAR          reduce using rule 100 (exp -> NOT exp .)
    DERLLAVE        reduce using rule 100 (exp -> NOT exp .)
    DERCOR          reduce using rule 100 (exp -> NOT exp .)
    COMA            reduce using rule 100 (exp -> NOT exp .)
    DP              reduce using rule 100 (exp -> NOT exp .)

  ! SUMA            [ shift and go to state 80 ]
  ! RESTA           [ shift and go to state 81 ]
  ! MULTI           [ shift and go to state 82 ]
  ! DIV             [ shift and go to state 83 ]
  ! PORCENTAJE      [ shift and go to state 84 ]
  ! DIGUAL          [ shift and go to state 85 ]
  ! DESIGUAL        [ shift and go to state 86 ]
  ! MAYOR           [ shift and go to state 87 ]
  ! MENOR           [ shift and go to state 88 ]
  ! MAYORIGUAL      [ shift and go to state 89 ]
  ! MENORIGUAL      [ shift and go to state 90 ]
  ! AND             [ shift and go to state 91 ]
  ! OR              [ shift and go to state 92 ]
  ! BAND            [ shift and go to state 93 ]
  ! BOR             [ shift and go to state 94 ]
  ! BXOR            [ shift and go to state 95 ]
  ! BLEFT           [ shift and go to state 96 ]
  ! BRIGHT          [ shift and go to state 97 ]
  ! ASK             [ shift and go to state 98 ]


state 104

    (101) exp -> BNOT exp .
    (81) exp -> exp . SUMA exp
    (82) exp -> exp . RESTA exp
    (83) exp -> exp . MULTI exp
    (84) exp -> exp . DIV exp
    (85) exp -> exp . PORCENTAJE exp
    (86) exp -> exp . DIGUAL exp
    (87) exp -> exp . DESIGUAL exp
    (88) exp -> exp . MAYOR exp
    (89) exp -> exp . MENOR exp
    (90) exp -> exp . MAYORIGUAL exp
    (91) exp -> exp . MENORIGUAL exp
    (92) exp -> exp . AND exp
    (93) exp -> exp . OR exp
    (94) exp -> exp . BAND exp
    (95) exp -> exp . BOR exp
    (96) exp -> exp . BXOR exp
    (97) exp -> exp . BLEFT exp
    (98) exp -> exp . BRIGHT exp
    (105) exp -> exp . ASK exp DP exp

    SUMA            reduce using rule 101 (exp -> BNOT exp .)
    RESTA           reduce using rule 101 (exp -> BNOT exp .)
    MULTI           reduce using rule 101 (exp -> BNOT exp .)
    DIV             reduce using rule 101 (exp -> BNOT exp .)
    PORCENTAJE      reduce using rule 101 (exp -> BNOT exp .)
    DIGUAL          reduce using rule 101 (exp -> BNOT exp .)
    DESIGUAL        reduce using rule 101 (exp -> BNOT exp .)
    MAYOR           reduce using rule 101 (exp -> BNOT exp .)
    MENOR           reduce using rule 101 (exp -> BNOT exp .)
    MAYORIGUAL      reduce using rule 101 (exp -> BNOT exp .)
    MENORIGUAL      reduce using rule 101 (exp -> BNOT exp .)
    AND             reduce using rule 101 (exp -> BNOT exp .)
    OR              reduce using rule 101 (exp -> BNOT exp .)
    BAND            reduce using rule 101 (exp -> BNOT exp .)
    BOR             reduce using rule 101 (exp -> BNOT exp .)
    BXOR            reduce using rule 101 (exp -> BNOT exp .)
    BLEFT           reduce using rule 101 (exp -> BNOT exp .)
    BRIGHT          reduce using rule 101 (exp -> BNOT exp .)
    ASK             reduce using rule 101 (exp -> BNOT exp .)
    PCOMA           reduce using rule 101 (exp -> BNOT exp .)
    DERPAR          reduce using rule 101 (exp -> BNOT exp .)
    DERLLAVE        reduce using rule 101 (exp -> BNOT exp .)
    DERCOR          reduce using rule 101 (exp -> BNOT exp .)
    COMA            reduce using rule 101 (exp -> BNOT exp .)
    DP              reduce using rule 101 (exp -> BNOT exp .)

  ! SUMA            [ shift and go to state 80 ]
  ! RESTA           [ shift and go to state 81 ]
  ! MULTI           [ shift and go to state 82 ]
  ! DIV             [ shift and go to state 83 ]
  ! PORCENTAJE      [ shift and go to state 84 ]
  ! DIGUAL          [ shift and go to state 85 ]
  ! DESIGUAL        [ shift and go to state 86 ]
  ! MAYOR           [ shift and go to state 87 ]
  ! MENOR           [ shift and go to state 88 ]
  ! MAYORIGUAL      [ shift and go to state 89 ]
  ! MENORIGUAL      [ shift and go to state 90 ]
  ! AND             [ shift and go to state 91 ]
  ! OR              [ shift and go to state 92 ]
  ! BAND            [ shift and go to state 93 ]
  ! BOR             [ shift and go to state 94 ]
  ! BXOR            [ shift and go to state 95 ]
  ! BLEFT           [ shift and go to state 96 ]
  ! BRIGHT          [ shift and go to state 97 ]
  ! ASK             [ shift and go to state 98 ]


state 105

    (102) exp -> sizeof exp .
    (81) exp -> exp . SUMA exp
    (82) exp -> exp . RESTA exp
    (83) exp -> exp . MULTI exp
    (84) exp -> exp . DIV exp
    (85) exp -> exp . PORCENTAJE exp
    (86) exp -> exp . DIGUAL exp
    (87) exp -> exp . DESIGUAL exp
    (88) exp -> exp . MAYOR exp
    (89) exp -> exp . MENOR exp
    (90) exp -> exp . MAYORIGUAL exp
    (91) exp -> exp . MENORIGUAL exp
    (92) exp -> exp . AND exp
    (93) exp -> exp . OR exp
    (94) exp -> exp . BAND exp
    (95) exp -> exp . BOR exp
    (96) exp -> exp . BXOR exp
    (97) exp -> exp . BLEFT exp
    (98) exp -> exp . BRIGHT exp
    (105) exp -> exp . ASK exp DP exp

    SUMA            reduce using rule 102 (exp -> sizeof exp .)
    RESTA           reduce using rule 102 (exp -> sizeof exp .)
    MULTI           reduce using rule 102 (exp -> sizeof exp .)
    DIV             reduce using rule 102 (exp -> sizeof exp .)
    PORCENTAJE      reduce using rule 102 (exp -> sizeof exp .)
    DIGUAL          reduce using rule 102 (exp -> sizeof exp .)
    DESIGUAL        reduce using rule 102 (exp -> sizeof exp .)
    MAYOR           reduce using rule 102 (exp -> sizeof exp .)
    MENOR           reduce using rule 102 (exp -> sizeof exp .)
    MAYORIGUAL      reduce using rule 102 (exp -> sizeof exp .)
    MENORIGUAL      reduce using rule 102 (exp -> sizeof exp .)
    AND             reduce using rule 102 (exp -> sizeof exp .)
    OR              reduce using rule 102 (exp -> sizeof exp .)
    BAND            reduce using rule 102 (exp -> sizeof exp .)
    BOR             reduce using rule 102 (exp -> sizeof exp .)
    BXOR            reduce using rule 102 (exp -> sizeof exp .)
    BLEFT           reduce using rule 102 (exp -> sizeof exp .)
    BRIGHT          reduce using rule 102 (exp -> sizeof exp .)
    ASK             reduce using rule 102 (exp -> sizeof exp .)
    PCOMA           reduce using rule 102 (exp -> sizeof exp .)
    DERPAR          reduce using rule 102 (exp -> sizeof exp .)
    DERLLAVE        reduce using rule 102 (exp -> sizeof exp .)
    DERCOR          reduce using rule 102 (exp -> sizeof exp .)
    COMA            reduce using rule 102 (exp -> sizeof exp .)
    DP              reduce using rule 102 (exp -> sizeof exp .)

  ! SUMA            [ shift and go to state 80 ]
  ! RESTA           [ shift and go to state 81 ]
  ! MULTI           [ shift and go to state 82 ]
  ! DIV             [ shift and go to state 83 ]
  ! PORCENTAJE      [ shift and go to state 84 ]
  ! DIGUAL          [ shift and go to state 85 ]
  ! DESIGUAL        [ shift and go to state 86 ]
  ! MAYOR           [ shift and go to state 87 ]
  ! MENOR           [ shift and go to state 88 ]
  ! MAYORIGUAL      [ shift and go to state 89 ]
  ! MENORIGUAL      [ shift and go to state 90 ]
  ! AND             [ shift and go to state 91 ]
  ! OR              [ shift and go to state 92 ]
  ! BAND            [ shift and go to state 93 ]
  ! BOR             [ shift and go to state 94 ]
  ! BXOR            [ shift and go to state 95 ]
  ! BLEFT           [ shift and go to state 96 ]
  ! BRIGHT          [ shift and go to state 97 ]
  ! ASK             [ shift and go to state 98 ]


state 106

    (111) exp -> IZQCOR lex . DERCOR
    (37) lex -> lex . COMA exp

    DERCOR          shift and go to state 157
    COMA            shift and go to state 158


state 107

    (38) lex -> exp .
    (81) exp -> exp . SUMA exp
    (82) exp -> exp . RESTA exp
    (83) exp -> exp . MULTI exp
    (84) exp -> exp . DIV exp
    (85) exp -> exp . PORCENTAJE exp
    (86) exp -> exp . DIGUAL exp
    (87) exp -> exp . DESIGUAL exp
    (88) exp -> exp . MAYOR exp
    (89) exp -> exp . MENOR exp
    (90) exp -> exp . MAYORIGUAL exp
    (91) exp -> exp . MENORIGUAL exp
    (92) exp -> exp . AND exp
    (93) exp -> exp . OR exp
    (94) exp -> exp . BAND exp
    (95) exp -> exp . BOR exp
    (96) exp -> exp . BXOR exp
    (97) exp -> exp . BLEFT exp
    (98) exp -> exp . BRIGHT exp
    (105) exp -> exp . ASK exp DP exp

    DERCOR          reduce using rule 38 (lex -> exp .)
    COMA            reduce using rule 38 (lex -> exp .)
    DERPAR          reduce using rule 38 (lex -> exp .)
    SUMA            shift and go to state 80
    RESTA           shift and go to state 81
    MULTI           shift and go to state 82
    DIV             shift and go to state 83
    PORCENTAJE      shift and go to state 84
    DIGUAL          shift and go to state 85
    DESIGUAL        shift and go to state 86
    MAYOR           shift and go to state 87
    MENOR           shift and go to state 88
    MAYORIGUAL      shift and go to state 89
    MENORIGUAL      shift and go to state 90
    AND             shift and go to state 91
    OR              shift and go to state 92
    BAND            shift and go to state 93
    BOR             shift and go to state 94
    BXOR            shift and go to state 95
    BLEFT           shift and go to state 96
    BRIGHT          shift and go to state 97
    ASK             shift and go to state 98


state 108

    (79) acs -> IZQLLAVE exp DERLLAVE .

    IGUAL           reduce using rule 79 (acs -> IZQLLAVE exp DERLLAVE .)
    IZQLLAVE        reduce using rule 79 (acs -> IZQLLAVE exp DERLLAVE .)
    PUNTO           reduce using rule 79 (acs -> IZQLLAVE exp DERLLAVE .)
    SUMA            reduce using rule 79 (acs -> IZQLLAVE exp DERLLAVE .)
    RESTA           reduce using rule 79 (acs -> IZQLLAVE exp DERLLAVE .)
    MULTI           reduce using rule 79 (acs -> IZQLLAVE exp DERLLAVE .)
    DIV             reduce using rule 79 (acs -> IZQLLAVE exp DERLLAVE .)
    PORCENTAJE      reduce using rule 79 (acs -> IZQLLAVE exp DERLLAVE .)
    DIGUAL          reduce using rule 79 (acs -> IZQLLAVE exp DERLLAVE .)
    DESIGUAL        reduce using rule 79 (acs -> IZQLLAVE exp DERLLAVE .)
    MAYOR           reduce using rule 79 (acs -> IZQLLAVE exp DERLLAVE .)
    MENOR           reduce using rule 79 (acs -> IZQLLAVE exp DERLLAVE .)
    MAYORIGUAL      reduce using rule 79 (acs -> IZQLLAVE exp DERLLAVE .)
    MENORIGUAL      reduce using rule 79 (acs -> IZQLLAVE exp DERLLAVE .)
    AND             reduce using rule 79 (acs -> IZQLLAVE exp DERLLAVE .)
    OR              reduce using rule 79 (acs -> IZQLLAVE exp DERLLAVE .)
    BAND            reduce using rule 79 (acs -> IZQLLAVE exp DERLLAVE .)
    BOR             reduce using rule 79 (acs -> IZQLLAVE exp DERLLAVE .)
    BXOR            reduce using rule 79 (acs -> IZQLLAVE exp DERLLAVE .)
    BLEFT           reduce using rule 79 (acs -> IZQLLAVE exp DERLLAVE .)
    BRIGHT          reduce using rule 79 (acs -> IZQLLAVE exp DERLLAVE .)
    ASK             reduce using rule 79 (acs -> IZQLLAVE exp DERLLAVE .)
    PCOMA           reduce using rule 79 (acs -> IZQLLAVE exp DERLLAVE .)
    DERPAR          reduce using rule 79 (acs -> IZQLLAVE exp DERLLAVE .)
    DERLLAVE        reduce using rule 79 (acs -> IZQLLAVE exp DERLLAVE .)
    DERCOR          reduce using rule 79 (acs -> IZQLLAVE exp DERLLAVE .)
    COMA            reduce using rule 79 (acs -> IZQLLAVE exp DERLLAVE .)
    DP              reduce using rule 79 (acs -> IZQLLAVE exp DERLLAVE .)
    INCE            reduce using rule 79 (acs -> IZQLLAVE exp DERLLAVE .)
    DECRE           reduce using rule 79 (acs -> IZQLLAVE exp DERLLAVE .)


state 109

    (41) asig -> ident lacs . IGUAL exp
    (43) asig -> ident lacs . INCE
    (45) asig -> ident lacs . DECRE
    (77) lacs -> lacs . acs
    (79) acs -> . IZQLLAVE exp DERLLAVE
    (80) acs -> . PUNTO ID

    IGUAL           shift and go to state 159
    INCE            shift and go to state 160
    DECRE           shift and go to state 161
    IZQLLAVE        shift and go to state 24
    PUNTO           shift and go to state 25

    acs                            shift and go to state 32

state 110

    (42) asig -> ident IGUAL . exp
    (73) exp -> . scanf IZQPAR DERPAR
    (81) exp -> . exp SUMA exp
    (82) exp -> . exp RESTA exp
    (83) exp -> . exp MULTI exp
    (84) exp -> . exp DIV exp
    (85) exp -> . exp PORCENTAJE exp
    (86) exp -> . exp DIGUAL exp
    (87) exp -> . exp DESIGUAL exp
    (88) exp -> . exp MAYOR exp
    (89) exp -> . exp MENOR exp
    (90) exp -> . exp MAYORIGUAL exp
    (91) exp -> . exp MENORIGUAL exp
    (92) exp -> . exp AND exp
    (93) exp -> . exp OR exp
    (94) exp -> . exp BAND exp
    (95) exp -> . exp BOR exp
    (96) exp -> . exp BXOR exp
    (97) exp -> . exp BLEFT exp
    (98) exp -> . exp BRIGHT exp
    (99) exp -> . RESTA exp
    (100) exp -> . NOT exp
    (101) exp -> . BNOT exp
    (102) exp -> . sizeof exp
    (103) exp -> . IZQPAR exp DERPAR
    (104) exp -> . IZQPAR TYPE DERPAR exp
    (105) exp -> . exp ASK exp DP exp
    (106) exp -> . DOUBLE
    (107) exp -> . INTEGER
    (108) exp -> . ident
    (109) exp -> . ident lacs
    (110) exp -> . STR
    (111) exp -> . IZQCOR lex DERCOR
    (76) ident -> . ID

    scanf           shift and go to state 35
    RESTA           shift and go to state 37
    NOT             shift and go to state 38
    BNOT            shift and go to state 39
    sizeof          shift and go to state 40
    IZQPAR          shift and go to state 36
    DOUBLE          shift and go to state 41
    INTEGER         shift and go to state 42
    STR             shift and go to state 43
    IZQCOR          shift and go to state 44
    ID              shift and go to state 17

    ident                          shift and go to state 33
    exp                            shift and go to state 162

state 111

    (44) asig -> ident INCE .

    PCOMA           reduce using rule 44 (asig -> ident INCE .)
    DERPAR          reduce using rule 44 (asig -> ident INCE .)


state 112

    (46) asig -> ident DECRE .

    PCOMA           reduce using rule 46 (asig -> ident DECRE .)
    DERPAR          reduce using rule 46 (asig -> ident DECRE .)


state 113

    (31) call -> ident IZQPAR . plex DERPAR PCOMA
    (35) plex -> . lex
    (36) plex -> .
    (37) lex -> . lex COMA exp
    (38) lex -> . exp
    (73) exp -> . scanf IZQPAR DERPAR
    (81) exp -> . exp SUMA exp
    (82) exp -> . exp RESTA exp
    (83) exp -> . exp MULTI exp
    (84) exp -> . exp DIV exp
    (85) exp -> . exp PORCENTAJE exp
    (86) exp -> . exp DIGUAL exp
    (87) exp -> . exp DESIGUAL exp
    (88) exp -> . exp MAYOR exp
    (89) exp -> . exp MENOR exp
    (90) exp -> . exp MAYORIGUAL exp
    (91) exp -> . exp MENORIGUAL exp
    (92) exp -> . exp AND exp
    (93) exp -> . exp OR exp
    (94) exp -> . exp BAND exp
    (95) exp -> . exp BOR exp
    (96) exp -> . exp BXOR exp
    (97) exp -> . exp BLEFT exp
    (98) exp -> . exp BRIGHT exp
    (99) exp -> . RESTA exp
    (100) exp -> . NOT exp
    (101) exp -> . BNOT exp
    (102) exp -> . sizeof exp
    (103) exp -> . IZQPAR exp DERPAR
    (104) exp -> . IZQPAR TYPE DERPAR exp
    (105) exp -> . exp ASK exp DP exp
    (106) exp -> . DOUBLE
    (107) exp -> . INTEGER
    (108) exp -> . ident
    (109) exp -> . ident lacs
    (110) exp -> . STR
    (111) exp -> . IZQCOR lex DERCOR
    (76) ident -> . ID

    DERPAR          reduce using rule 36 (plex -> .)
    scanf           shift and go to state 35
    RESTA           shift and go to state 37
    NOT             shift and go to state 38
    BNOT            shift and go to state 39
    sizeof          shift and go to state 40
    IZQPAR          shift and go to state 36
    DOUBLE          shift and go to state 41
    INTEGER         shift and go to state 42
    STR             shift and go to state 43
    IZQCOR          shift and go to state 44
    ID              shift and go to state 17

    ident                          shift and go to state 33
    plex                           shift and go to state 163
    lex                            shift and go to state 164
    exp                            shift and go to state 107

state 114

    (39) tag -> ident DP .

    DERCOR          reduce using rule 39 (tag -> ident DP .)
    for             reduce using rule 39 (tag -> ident DP .)
    if              reduce using rule 39 (tag -> ident DP .)
    while           reduce using rule 39 (tag -> ident DP .)
    switch          reduce using rule 39 (tag -> ident DP .)
    do              reduce using rule 39 (tag -> ident DP .)
    printf          reduce using rule 39 (tag -> ident DP .)
    goto            reduce using rule 39 (tag -> ident DP .)
    break           reduce using rule 39 (tag -> ident DP .)
    return          reduce using rule 39 (tag -> ident DP .)
    ID              reduce using rule 39 (tag -> ident DP .)
    int             reduce using rule 39 (tag -> ident DP .)
    float           reduce using rule 39 (tag -> ident DP .)
    char            reduce using rule 39 (tag -> ident DP .)
    double          reduce using rule 39 (tag -> ident DP .)
    void            reduce using rule 39 (tag -> ident DP .)
    default         reduce using rule 39 (tag -> ident DP .)
    case            reduce using rule 39 (tag -> ident DP .)


state 115

    (6) body -> struct ident IZQCOR linst DERCOR . PCOMA

    PCOMA           shift and go to state 165


state 116

    (8) linst -> linst inst .

    DERCOR          reduce using rule 8 (linst -> linst inst .)
    for             reduce using rule 8 (linst -> linst inst .)
    if              reduce using rule 8 (linst -> linst inst .)
    while           reduce using rule 8 (linst -> linst inst .)
    switch          reduce using rule 8 (linst -> linst inst .)
    do              reduce using rule 8 (linst -> linst inst .)
    printf          reduce using rule 8 (linst -> linst inst .)
    goto            reduce using rule 8 (linst -> linst inst .)
    break           reduce using rule 8 (linst -> linst inst .)
    return          reduce using rule 8 (linst -> linst inst .)
    ID              reduce using rule 8 (linst -> linst inst .)
    int             reduce using rule 8 (linst -> linst inst .)
    float           reduce using rule 8 (linst -> linst inst .)
    char            reduce using rule 8 (linst -> linst inst .)
    double          reduce using rule 8 (linst -> linst inst .)
    void            reduce using rule 8 (linst -> linst inst .)
    default         reduce using rule 8 (linst -> linst inst .)
    case            reduce using rule 8 (linst -> linst inst .)


state 117

    (14) inst -> asig PCOMA .

    DERCOR          reduce using rule 14 (inst -> asig PCOMA .)
    for             reduce using rule 14 (inst -> asig PCOMA .)
    if              reduce using rule 14 (inst -> asig PCOMA .)
    while           reduce using rule 14 (inst -> asig PCOMA .)
    switch          reduce using rule 14 (inst -> asig PCOMA .)
    do              reduce using rule 14 (inst -> asig PCOMA .)
    printf          reduce using rule 14 (inst -> asig PCOMA .)
    goto            reduce using rule 14 (inst -> asig PCOMA .)
    break           reduce using rule 14 (inst -> asig PCOMA .)
    return          reduce using rule 14 (inst -> asig PCOMA .)
    ID              reduce using rule 14 (inst -> asig PCOMA .)
    int             reduce using rule 14 (inst -> asig PCOMA .)
    float           reduce using rule 14 (inst -> asig PCOMA .)
    char            reduce using rule 14 (inst -> asig PCOMA .)
    double          reduce using rule 14 (inst -> asig PCOMA .)
    void            reduce using rule 14 (inst -> asig PCOMA .)
    default         reduce using rule 14 (inst -> asig PCOMA .)
    case            reduce using rule 14 (inst -> asig PCOMA .)


state 118

    (23) inst -> decla PCOMA .

    DERCOR          reduce using rule 23 (inst -> decla PCOMA .)
    for             reduce using rule 23 (inst -> decla PCOMA .)
    if              reduce using rule 23 (inst -> decla PCOMA .)
    while           reduce using rule 23 (inst -> decla PCOMA .)
    switch          reduce using rule 23 (inst -> decla PCOMA .)
    do              reduce using rule 23 (inst -> decla PCOMA .)
    printf          reduce using rule 23 (inst -> decla PCOMA .)
    goto            reduce using rule 23 (inst -> decla PCOMA .)
    break           reduce using rule 23 (inst -> decla PCOMA .)
    return          reduce using rule 23 (inst -> decla PCOMA .)
    ID              reduce using rule 23 (inst -> decla PCOMA .)
    int             reduce using rule 23 (inst -> decla PCOMA .)
    float           reduce using rule 23 (inst -> decla PCOMA .)
    char            reduce using rule 23 (inst -> decla PCOMA .)
    double          reduce using rule 23 (inst -> decla PCOMA .)
    void            reduce using rule 23 (inst -> decla PCOMA .)
    default         reduce using rule 23 (inst -> decla PCOMA .)
    case            reduce using rule 23 (inst -> decla PCOMA .)


state 119

    (25) inst -> gotot PCOMA .

    DERCOR          reduce using rule 25 (inst -> gotot PCOMA .)
    for             reduce using rule 25 (inst -> gotot PCOMA .)
    if              reduce using rule 25 (inst -> gotot PCOMA .)
    while           reduce using rule 25 (inst -> gotot PCOMA .)
    switch          reduce using rule 25 (inst -> gotot PCOMA .)
    do              reduce using rule 25 (inst -> gotot PCOMA .)
    printf          reduce using rule 25 (inst -> gotot PCOMA .)
    goto            reduce using rule 25 (inst -> gotot PCOMA .)
    break           reduce using rule 25 (inst -> gotot PCOMA .)
    return          reduce using rule 25 (inst -> gotot PCOMA .)
    ID              reduce using rule 25 (inst -> gotot PCOMA .)
    int             reduce using rule 25 (inst -> gotot PCOMA .)
    float           reduce using rule 25 (inst -> gotot PCOMA .)
    char            reduce using rule 25 (inst -> gotot PCOMA .)
    double          reduce using rule 25 (inst -> gotot PCOMA .)
    void            reduce using rule 25 (inst -> gotot PCOMA .)
    default         reduce using rule 25 (inst -> gotot PCOMA .)
    case            reduce using rule 25 (inst -> gotot PCOMA .)


state 120

    (26) inst -> brk PCOMA .

    DERCOR          reduce using rule 26 (inst -> brk PCOMA .)
    for             reduce using rule 26 (inst -> brk PCOMA .)
    if              reduce using rule 26 (inst -> brk PCOMA .)
    while           reduce using rule 26 (inst -> brk PCOMA .)
    switch          reduce using rule 26 (inst -> brk PCOMA .)
    do              reduce using rule 26 (inst -> brk PCOMA .)
    printf          reduce using rule 26 (inst -> brk PCOMA .)
    goto            reduce using rule 26 (inst -> brk PCOMA .)
    break           reduce using rule 26 (inst -> brk PCOMA .)
    return          reduce using rule 26 (inst -> brk PCOMA .)
    ID              reduce using rule 26 (inst -> brk PCOMA .)
    int             reduce using rule 26 (inst -> brk PCOMA .)
    float           reduce using rule 26 (inst -> brk PCOMA .)
    char            reduce using rule 26 (inst -> brk PCOMA .)
    double          reduce using rule 26 (inst -> brk PCOMA .)
    void            reduce using rule 26 (inst -> brk PCOMA .)
    default         reduce using rule 26 (inst -> brk PCOMA .)
    case            reduce using rule 26 (inst -> brk PCOMA .)


state 121

    (27) inst -> ret PCOMA .

    DERCOR          reduce using rule 27 (inst -> ret PCOMA .)
    for             reduce using rule 27 (inst -> ret PCOMA .)
    if              reduce using rule 27 (inst -> ret PCOMA .)
    while           reduce using rule 27 (inst -> ret PCOMA .)
    switch          reduce using rule 27 (inst -> ret PCOMA .)
    do              reduce using rule 27 (inst -> ret PCOMA .)
    printf          reduce using rule 27 (inst -> ret PCOMA .)
    goto            reduce using rule 27 (inst -> ret PCOMA .)
    break           reduce using rule 27 (inst -> ret PCOMA .)
    return          reduce using rule 27 (inst -> ret PCOMA .)
    ID              reduce using rule 27 (inst -> ret PCOMA .)
    int             reduce using rule 27 (inst -> ret PCOMA .)
    float           reduce using rule 27 (inst -> ret PCOMA .)
    char            reduce using rule 27 (inst -> ret PCOMA .)
    double          reduce using rule 27 (inst -> ret PCOMA .)
    void            reduce using rule 27 (inst -> ret PCOMA .)
    default         reduce using rule 27 (inst -> ret PCOMA .)
    case            reduce using rule 27 (inst -> ret PCOMA .)


state 122

    (58) para -> for IZQPAR . para1 exp PCOMA para2 DERPAR IZQCOR linst DERCOR
    (59) para1 -> . asig PCOMA
    (60) para1 -> . decla PCOMA
    (41) asig -> . ident lacs IGUAL exp
    (42) asig -> . ident IGUAL exp
    (43) asig -> . ident lacs INCE
    (44) asig -> . ident INCE
    (45) asig -> . ident lacs DECRE
    (46) asig -> . ident DECRE
    (47) decla -> . TYPE ident lacs IGUAL exp
    (48) decla -> . TYPE ident IGUAL exp
    (76) ident -> . ID
    (112) TYPE -> . int
    (113) TYPE -> . float
    (114) TYPE -> . char
    (115) TYPE -> . double
    (116) TYPE -> . void

    ID              shift and go to state 17
    int             shift and go to state 7
    float           shift and go to state 8
    char            shift and go to state 9
    double          shift and go to state 10
    void            shift and go to state 11

    para1                          shift and go to state 166
    asig                           shift and go to state 167
    decla                          shift and go to state 168
    ident                          shift and go to state 169
    TYPE                           shift and go to state 170

state 123

    (51) si -> if IZQPAR . exp DERPAR IZQCOR linst DERCOR lelsi els
    (52) si -> if IZQPAR . exp DERPAR IZQCOR linst DERCOR els
    (73) exp -> . scanf IZQPAR DERPAR
    (81) exp -> . exp SUMA exp
    (82) exp -> . exp RESTA exp
    (83) exp -> . exp MULTI exp
    (84) exp -> . exp DIV exp
    (85) exp -> . exp PORCENTAJE exp
    (86) exp -> . exp DIGUAL exp
    (87) exp -> . exp DESIGUAL exp
    (88) exp -> . exp MAYOR exp
    (89) exp -> . exp MENOR exp
    (90) exp -> . exp MAYORIGUAL exp
    (91) exp -> . exp MENORIGUAL exp
    (92) exp -> . exp AND exp
    (93) exp -> . exp OR exp
    (94) exp -> . exp BAND exp
    (95) exp -> . exp BOR exp
    (96) exp -> . exp BXOR exp
    (97) exp -> . exp BLEFT exp
    (98) exp -> . exp BRIGHT exp
    (99) exp -> . RESTA exp
    (100) exp -> . NOT exp
    (101) exp -> . BNOT exp
    (102) exp -> . sizeof exp
    (103) exp -> . IZQPAR exp DERPAR
    (104) exp -> . IZQPAR TYPE DERPAR exp
    (105) exp -> . exp ASK exp DP exp
    (106) exp -> . DOUBLE
    (107) exp -> . INTEGER
    (108) exp -> . ident
    (109) exp -> . ident lacs
    (110) exp -> . STR
    (111) exp -> . IZQCOR lex DERCOR
    (76) ident -> . ID

    scanf           shift and go to state 35
    RESTA           shift and go to state 37
    NOT             shift and go to state 38
    BNOT            shift and go to state 39
    sizeof          shift and go to state 40
    IZQPAR          shift and go to state 36
    DOUBLE          shift and go to state 41
    INTEGER         shift and go to state 42
    STR             shift and go to state 43
    IZQCOR          shift and go to state 44
    ID              shift and go to state 17

    exp                            shift and go to state 171
    ident                          shift and go to state 33

state 124

    (49) mientras -> while IZQPAR . exp DERPAR IZQCOR linst DERCOR
    (73) exp -> . scanf IZQPAR DERPAR
    (81) exp -> . exp SUMA exp
    (82) exp -> . exp RESTA exp
    (83) exp -> . exp MULTI exp
    (84) exp -> . exp DIV exp
    (85) exp -> . exp PORCENTAJE exp
    (86) exp -> . exp DIGUAL exp
    (87) exp -> . exp DESIGUAL exp
    (88) exp -> . exp MAYOR exp
    (89) exp -> . exp MENOR exp
    (90) exp -> . exp MAYORIGUAL exp
    (91) exp -> . exp MENORIGUAL exp
    (92) exp -> . exp AND exp
    (93) exp -> . exp OR exp
    (94) exp -> . exp BAND exp
    (95) exp -> . exp BOR exp
    (96) exp -> . exp BXOR exp
    (97) exp -> . exp BLEFT exp
    (98) exp -> . exp BRIGHT exp
    (99) exp -> . RESTA exp
    (100) exp -> . NOT exp
    (101) exp -> . BNOT exp
    (102) exp -> . sizeof exp
    (103) exp -> . IZQPAR exp DERPAR
    (104) exp -> . IZQPAR TYPE DERPAR exp
    (105) exp -> . exp ASK exp DP exp
    (106) exp -> . DOUBLE
    (107) exp -> . INTEGER
    (108) exp -> . ident
    (109) exp -> . ident lacs
    (110) exp -> . STR
    (111) exp -> . IZQCOR lex DERCOR
    (76) ident -> . ID

    scanf           shift and go to state 35
    RESTA           shift and go to state 37
    NOT             shift and go to state 38
    BNOT            shift and go to state 39
    sizeof          shift and go to state 40
    IZQPAR          shift and go to state 36
    DOUBLE          shift and go to state 41
    INTEGER         shift and go to state 42
    STR             shift and go to state 43
    IZQCOR          shift and go to state 44
    ID              shift and go to state 17

    exp                            shift and go to state 172
    ident                          shift and go to state 33

state 125

    (64) cual -> switch IZQPAR . exp DERPAR IZQCOR lcase def DERCOR
    (73) exp -> . scanf IZQPAR DERPAR
    (81) exp -> . exp SUMA exp
    (82) exp -> . exp RESTA exp
    (83) exp -> . exp MULTI exp
    (84) exp -> . exp DIV exp
    (85) exp -> . exp PORCENTAJE exp
    (86) exp -> . exp DIGUAL exp
    (87) exp -> . exp DESIGUAL exp
    (88) exp -> . exp MAYOR exp
    (89) exp -> . exp MENOR exp
    (90) exp -> . exp MAYORIGUAL exp
    (91) exp -> . exp MENORIGUAL exp
    (92) exp -> . exp AND exp
    (93) exp -> . exp OR exp
    (94) exp -> . exp BAND exp
    (95) exp -> . exp BOR exp
    (96) exp -> . exp BXOR exp
    (97) exp -> . exp BLEFT exp
    (98) exp -> . exp BRIGHT exp
    (99) exp -> . RESTA exp
    (100) exp -> . NOT exp
    (101) exp -> . BNOT exp
    (102) exp -> . sizeof exp
    (103) exp -> . IZQPAR exp DERPAR
    (104) exp -> . IZQPAR TYPE DERPAR exp
    (105) exp -> . exp ASK exp DP exp
    (106) exp -> . DOUBLE
    (107) exp -> . INTEGER
    (108) exp -> . ident
    (109) exp -> . ident lacs
    (110) exp -> . STR
    (111) exp -> . IZQCOR lex DERCOR
    (76) ident -> . ID

    scanf           shift and go to state 35
    RESTA           shift and go to state 37
    NOT             shift and go to state 38
    BNOT            shift and go to state 39
    sizeof          shift and go to state 40
    IZQPAR          shift and go to state 36
    DOUBLE          shift and go to state 41
    INTEGER         shift and go to state 42
    STR             shift and go to state 43
    IZQCOR          shift and go to state 44
    ID              shift and go to state 17

    exp                            shift and go to state 173
    ident                          shift and go to state 33

state 126

    (50) dow -> do IZQCOR . linst DERCOR while IZQPAR exp DERPAR PCOMA
    (8) linst -> . linst inst
    (9) linst -> . inst
    (14) inst -> . asig PCOMA
    (15) inst -> . para
    (16) inst -> . si
    (17) inst -> . mientras
    (18) inst -> . cual
    (19) inst -> . call
    (20) inst -> . dow
    (21) inst -> . asg
    (22) inst -> . prin
    (23) inst -> . decla PCOMA
    (24) inst -> . tag
    (25) inst -> . gotot PCOMA
    (26) inst -> . brk PCOMA
    (27) inst -> . ret PCOMA
    (41) asig -> . ident lacs IGUAL exp
    (42) asig -> . ident IGUAL exp
    (43) asig -> . ident lacs INCE
    (44) asig -> . ident INCE
    (45) asig -> . ident lacs DECRE
    (46) asig -> . ident DECRE
    (58) para -> . for IZQPAR para1 exp PCOMA para2 DERPAR IZQCOR linst DERCOR
    (51) si -> . if IZQPAR exp DERPAR IZQCOR linst DERCOR lelsi els
    (52) si -> . if IZQPAR exp DERPAR IZQCOR linst DERCOR els
    (49) mientras -> . while IZQPAR exp DERPAR IZQCOR linst DERCOR
    (64) cual -> . switch IZQPAR exp DERPAR IZQCOR lcase def DERCOR
    (31) call -> . ident IZQPAR plex DERPAR PCOMA
    (50) dow -> . do IZQCOR linst DERCOR while IZQPAR exp DERPAR PCOMA
    (28) asg -> . TYPE lids PCOMA
    (71) prin -> . printf IZQPAR STR lexpr DERPAR PCOMA
    (72) prin -> . printf IZQPAR STR DERPAR PCOMA
    (47) decla -> . TYPE ident lacs IGUAL exp
    (48) decla -> . TYPE ident IGUAL exp
    (39) tag -> . ident DP
    (40) gotot -> . goto ident
    (32) brk -> . break
    (33) ret -> . return exp
    (34) ret -> . return
    (76) ident -> . ID
    (112) TYPE -> . int
    (113) TYPE -> . float
    (114) TYPE -> . char
    (115) TYPE -> . double
    (116) TYPE -> . void

    for             shift and go to state 64
    if              shift and go to state 65
    while           shift and go to state 66
    switch          shift and go to state 67
    do              shift and go to state 68
    printf          shift and go to state 70
    goto            shift and go to state 71
    break           shift and go to state 72
    return          shift and go to state 73
    ID              shift and go to state 17
    int             shift and go to state 7
    float           shift and go to state 8
    char            shift and go to state 9
    double          shift and go to state 10
    void            shift and go to state 11

    linst                          shift and go to state 174
    inst                           shift and go to state 49
    asig                           shift and go to state 50
    para                           shift and go to state 51
    si                             shift and go to state 52
    mientras                       shift and go to state 53
    cual                           shift and go to state 54
    call                           shift and go to state 55
    dow                            shift and go to state 56
    asg                            shift and go to state 57
    prin                           shift and go to state 58
    decla                          shift and go to state 59
    tag                            shift and go to state 60
    gotot                          shift and go to state 61
    brk                            shift and go to state 62
    ret                            shift and go to state 63
    ident                          shift and go to state 47
    TYPE                           shift and go to state 69

state 127

    (28) asg -> TYPE lids . PCOMA
    (29) lids -> lids . COMA ident

    PCOMA           shift and go to state 175
    COMA            shift and go to state 176


state 128

    (47) decla -> TYPE ident . lacs IGUAL exp
    (48) decla -> TYPE ident . IGUAL exp
    (30) lids -> ident .
    (77) lacs -> . lacs acs
    (78) lacs -> . acs
    (79) acs -> . IZQLLAVE exp DERLLAVE
    (80) acs -> . PUNTO ID

    IGUAL           shift and go to state 22
    PCOMA           reduce using rule 30 (lids -> ident .)
    COMA            reduce using rule 30 (lids -> ident .)
    IZQLLAVE        shift and go to state 24
    PUNTO           shift and go to state 25

    lacs                           shift and go to state 21
    acs                            shift and go to state 23

state 129

    (71) prin -> printf IZQPAR . STR lexpr DERPAR PCOMA
    (72) prin -> printf IZQPAR . STR DERPAR PCOMA

    STR             shift and go to state 177


state 130

    (40) gotot -> goto ident .

    PCOMA           reduce using rule 40 (gotot -> goto ident .)


state 131

    (33) ret -> return exp .
    (81) exp -> exp . SUMA exp
    (82) exp -> exp . RESTA exp
    (83) exp -> exp . MULTI exp
    (84) exp -> exp . DIV exp
    (85) exp -> exp . PORCENTAJE exp
    (86) exp -> exp . DIGUAL exp
    (87) exp -> exp . DESIGUAL exp
    (88) exp -> exp . MAYOR exp
    (89) exp -> exp . MENOR exp
    (90) exp -> exp . MAYORIGUAL exp
    (91) exp -> exp . MENORIGUAL exp
    (92) exp -> exp . AND exp
    (93) exp -> exp . OR exp
    (94) exp -> exp . BAND exp
    (95) exp -> exp . BOR exp
    (96) exp -> exp . BXOR exp
    (97) exp -> exp . BLEFT exp
    (98) exp -> exp . BRIGHT exp
    (105) exp -> exp . ASK exp DP exp

    PCOMA           reduce using rule 33 (ret -> return exp .)
    SUMA            shift and go to state 80
    RESTA           shift and go to state 81
    MULTI           shift and go to state 82
    DIV             shift and go to state 83
    PORCENTAJE      shift and go to state 84
    DIGUAL          shift and go to state 85
    DESIGUAL        shift and go to state 86
    MAYOR           shift and go to state 87
    MENOR           shift and go to state 88
    MAYORIGUAL      shift and go to state 89
    MENORIGUAL      shift and go to state 90
    AND             shift and go to state 91
    OR              shift and go to state 92
    BAND            shift and go to state 93
    BOR             shift and go to state 94
    BXOR            shift and go to state 95
    BLEFT           shift and go to state 96
    BRIGHT          shift and go to state 97
    ASK             shift and go to state 98


state 132

    (4) body -> TYPE ID IZQPAR lpam DERPAR IZQCOR . linst DERCOR
    (8) linst -> . linst inst
    (9) linst -> . inst
    (14) inst -> . asig PCOMA
    (15) inst -> . para
    (16) inst -> . si
    (17) inst -> . mientras
    (18) inst -> . cual
    (19) inst -> . call
    (20) inst -> . dow
    (21) inst -> . asg
    (22) inst -> . prin
    (23) inst -> . decla PCOMA
    (24) inst -> . tag
    (25) inst -> . gotot PCOMA
    (26) inst -> . brk PCOMA
    (27) inst -> . ret PCOMA
    (41) asig -> . ident lacs IGUAL exp
    (42) asig -> . ident IGUAL exp
    (43) asig -> . ident lacs INCE
    (44) asig -> . ident INCE
    (45) asig -> . ident lacs DECRE
    (46) asig -> . ident DECRE
    (58) para -> . for IZQPAR para1 exp PCOMA para2 DERPAR IZQCOR linst DERCOR
    (51) si -> . if IZQPAR exp DERPAR IZQCOR linst DERCOR lelsi els
    (52) si -> . if IZQPAR exp DERPAR IZQCOR linst DERCOR els
    (49) mientras -> . while IZQPAR exp DERPAR IZQCOR linst DERCOR
    (64) cual -> . switch IZQPAR exp DERPAR IZQCOR lcase def DERCOR
    (31) call -> . ident IZQPAR plex DERPAR PCOMA
    (50) dow -> . do IZQCOR linst DERCOR while IZQPAR exp DERPAR PCOMA
    (28) asg -> . TYPE lids PCOMA
    (71) prin -> . printf IZQPAR STR lexpr DERPAR PCOMA
    (72) prin -> . printf IZQPAR STR DERPAR PCOMA
    (47) decla -> . TYPE ident lacs IGUAL exp
    (48) decla -> . TYPE ident IGUAL exp
    (39) tag -> . ident DP
    (40) gotot -> . goto ident
    (32) brk -> . break
    (33) ret -> . return exp
    (34) ret -> . return
    (76) ident -> . ID
    (112) TYPE -> . int
    (113) TYPE -> . float
    (114) TYPE -> . char
    (115) TYPE -> . double
    (116) TYPE -> . void

    for             shift and go to state 64
    if              shift and go to state 65
    while           shift and go to state 66
    switch          shift and go to state 67
    do              shift and go to state 68
    printf          shift and go to state 70
    goto            shift and go to state 71
    break           shift and go to state 72
    return          shift and go to state 73
    ID              shift and go to state 17
    int             shift and go to state 7
    float           shift and go to state 8
    char            shift and go to state 9
    double          shift and go to state 10
    void            shift and go to state 11

    TYPE                           shift and go to state 69
    linst                          shift and go to state 178
    inst                           shift and go to state 49
    asig                           shift and go to state 50
    para                           shift and go to state 51
    si                             shift and go to state 52
    mientras                       shift and go to state 53
    cual                           shift and go to state 54
    call                           shift and go to state 55
    dow                            shift and go to state 56
    asg                            shift and go to state 57
    prin                           shift and go to state 58
    decla                          shift and go to state 59
    tag                            shift and go to state 60
    gotot                          shift and go to state 61
    brk                            shift and go to state 62
    ret                            shift and go to state 63
    ident                          shift and go to state 47

state 133

    (12) lparam -> lparam COMA TYPE . ident
    (76) ident -> . ID

    ID              shift and go to state 17

    ident                          shift and go to state 179

state 134

    (5) body -> TYPE main IZQPAR lpam DERPAR IZQCOR . linst DERCOR
    (8) linst -> . linst inst
    (9) linst -> . inst
    (14) inst -> . asig PCOMA
    (15) inst -> . para
    (16) inst -> . si
    (17) inst -> . mientras
    (18) inst -> . cual
    (19) inst -> . call
    (20) inst -> . dow
    (21) inst -> . asg
    (22) inst -> . prin
    (23) inst -> . decla PCOMA
    (24) inst -> . tag
    (25) inst -> . gotot PCOMA
    (26) inst -> . brk PCOMA
    (27) inst -> . ret PCOMA
    (41) asig -> . ident lacs IGUAL exp
    (42) asig -> . ident IGUAL exp
    (43) asig -> . ident lacs INCE
    (44) asig -> . ident INCE
    (45) asig -> . ident lacs DECRE
    (46) asig -> . ident DECRE
    (58) para -> . for IZQPAR para1 exp PCOMA para2 DERPAR IZQCOR linst DERCOR
    (51) si -> . if IZQPAR exp DERPAR IZQCOR linst DERCOR lelsi els
    (52) si -> . if IZQPAR exp DERPAR IZQCOR linst DERCOR els
    (49) mientras -> . while IZQPAR exp DERPAR IZQCOR linst DERCOR
    (64) cual -> . switch IZQPAR exp DERPAR IZQCOR lcase def DERCOR
    (31) call -> . ident IZQPAR plex DERPAR PCOMA
    (50) dow -> . do IZQCOR linst DERCOR while IZQPAR exp DERPAR PCOMA
    (28) asg -> . TYPE lids PCOMA
    (71) prin -> . printf IZQPAR STR lexpr DERPAR PCOMA
    (72) prin -> . printf IZQPAR STR DERPAR PCOMA
    (47) decla -> . TYPE ident lacs IGUAL exp
    (48) decla -> . TYPE ident IGUAL exp
    (39) tag -> . ident DP
    (40) gotot -> . goto ident
    (32) brk -> . break
    (33) ret -> . return exp
    (34) ret -> . return
    (76) ident -> . ID
    (112) TYPE -> . int
    (113) TYPE -> . float
    (114) TYPE -> . char
    (115) TYPE -> . double
    (116) TYPE -> . void

    for             shift and go to state 64
    if              shift and go to state 65
    while           shift and go to state 66
    switch          shift and go to state 67
    do              shift and go to state 68
    printf          shift and go to state 70
    goto            shift and go to state 71
    break           shift and go to state 72
    return          shift and go to state 73
    ID              shift and go to state 17
    int             shift and go to state 7
    float           shift and go to state 8
    char            shift and go to state 9
    double          shift and go to state 10
    void            shift and go to state 11

    TYPE                           shift and go to state 69
    linst                          shift and go to state 180
    inst                           shift and go to state 49
    asig                           shift and go to state 50
    para                           shift and go to state 51
    si                             shift and go to state 52
    mientras                       shift and go to state 53
    cual                           shift and go to state 54
    call                           shift and go to state 55
    dow                            shift and go to state 56
    asg                            shift and go to state 57
    prin                           shift and go to state 58
    decla                          shift and go to state 59
    tag                            shift and go to state 60
    gotot                          shift and go to state 61
    brk                            shift and go to state 62
    ret                            shift and go to state 63
    ident                          shift and go to state 47

state 135

    (81) exp -> exp SUMA exp .
    (81) exp -> exp . SUMA exp
    (82) exp -> exp . RESTA exp
    (83) exp -> exp . MULTI exp
    (84) exp -> exp . DIV exp
    (85) exp -> exp . PORCENTAJE exp
    (86) exp -> exp . DIGUAL exp
    (87) exp -> exp . DESIGUAL exp
    (88) exp -> exp . MAYOR exp
    (89) exp -> exp . MENOR exp
    (90) exp -> exp . MAYORIGUAL exp
    (91) exp -> exp . MENORIGUAL exp
    (92) exp -> exp . AND exp
    (93) exp -> exp . OR exp
    (94) exp -> exp . BAND exp
    (95) exp -> exp . BOR exp
    (96) exp -> exp . BXOR exp
    (97) exp -> exp . BLEFT exp
    (98) exp -> exp . BRIGHT exp
    (105) exp -> exp . ASK exp DP exp

    SUMA            reduce using rule 81 (exp -> exp SUMA exp .)
    RESTA           reduce using rule 81 (exp -> exp SUMA exp .)
    DIGUAL          reduce using rule 81 (exp -> exp SUMA exp .)
    DESIGUAL        reduce using rule 81 (exp -> exp SUMA exp .)
    MAYOR           reduce using rule 81 (exp -> exp SUMA exp .)
    MENOR           reduce using rule 81 (exp -> exp SUMA exp .)
    MAYORIGUAL      reduce using rule 81 (exp -> exp SUMA exp .)
    MENORIGUAL      reduce using rule 81 (exp -> exp SUMA exp .)
    AND             reduce using rule 81 (exp -> exp SUMA exp .)
    OR              reduce using rule 81 (exp -> exp SUMA exp .)
    BAND            reduce using rule 81 (exp -> exp SUMA exp .)
    BOR             reduce using rule 81 (exp -> exp SUMA exp .)
    BXOR            reduce using rule 81 (exp -> exp SUMA exp .)
    BLEFT           reduce using rule 81 (exp -> exp SUMA exp .)
    BRIGHT          reduce using rule 81 (exp -> exp SUMA exp .)
    ASK             reduce using rule 81 (exp -> exp SUMA exp .)
    PCOMA           reduce using rule 81 (exp -> exp SUMA exp .)
    DERPAR          reduce using rule 81 (exp -> exp SUMA exp .)
    DERLLAVE        reduce using rule 81 (exp -> exp SUMA exp .)
    DERCOR          reduce using rule 81 (exp -> exp SUMA exp .)
    COMA            reduce using rule 81 (exp -> exp SUMA exp .)
    DP              reduce using rule 81 (exp -> exp SUMA exp .)
    MULTI           shift and go to state 82
    DIV             shift and go to state 83
    PORCENTAJE      shift and go to state 84

  ! MULTI           [ reduce using rule 81 (exp -> exp SUMA exp .) ]
  ! DIV             [ reduce using rule 81 (exp -> exp SUMA exp .) ]
  ! PORCENTAJE      [ reduce using rule 81 (exp -> exp SUMA exp .) ]
  ! SUMA            [ shift and go to state 80 ]
  ! RESTA           [ shift and go to state 81 ]
  ! DIGUAL          [ shift and go to state 85 ]
  ! DESIGUAL        [ shift and go to state 86 ]
  ! MAYOR           [ shift and go to state 87 ]
  ! MENOR           [ shift and go to state 88 ]
  ! MAYORIGUAL      [ shift and go to state 89 ]
  ! MENORIGUAL      [ shift and go to state 90 ]
  ! AND             [ shift and go to state 91 ]
  ! OR              [ shift and go to state 92 ]
  ! BAND            [ shift and go to state 93 ]
  ! BOR             [ shift and go to state 94 ]
  ! BXOR            [ shift and go to state 95 ]
  ! BLEFT           [ shift and go to state 96 ]
  ! BRIGHT          [ shift and go to state 97 ]
  ! ASK             [ shift and go to state 98 ]


state 136

    (82) exp -> exp RESTA exp .
    (81) exp -> exp . SUMA exp
    (82) exp -> exp . RESTA exp
    (83) exp -> exp . MULTI exp
    (84) exp -> exp . DIV exp
    (85) exp -> exp . PORCENTAJE exp
    (86) exp -> exp . DIGUAL exp
    (87) exp -> exp . DESIGUAL exp
    (88) exp -> exp . MAYOR exp
    (89) exp -> exp . MENOR exp
    (90) exp -> exp . MAYORIGUAL exp
    (91) exp -> exp . MENORIGUAL exp
    (92) exp -> exp . AND exp
    (93) exp -> exp . OR exp
    (94) exp -> exp . BAND exp
    (95) exp -> exp . BOR exp
    (96) exp -> exp . BXOR exp
    (97) exp -> exp . BLEFT exp
    (98) exp -> exp . BRIGHT exp
    (105) exp -> exp . ASK exp DP exp

    SUMA            reduce using rule 82 (exp -> exp RESTA exp .)
    RESTA           reduce using rule 82 (exp -> exp RESTA exp .)
    DIGUAL          reduce using rule 82 (exp -> exp RESTA exp .)
    DESIGUAL        reduce using rule 82 (exp -> exp RESTA exp .)
    MAYOR           reduce using rule 82 (exp -> exp RESTA exp .)
    MENOR           reduce using rule 82 (exp -> exp RESTA exp .)
    MAYORIGUAL      reduce using rule 82 (exp -> exp RESTA exp .)
    MENORIGUAL      reduce using rule 82 (exp -> exp RESTA exp .)
    AND             reduce using rule 82 (exp -> exp RESTA exp .)
    OR              reduce using rule 82 (exp -> exp RESTA exp .)
    BAND            reduce using rule 82 (exp -> exp RESTA exp .)
    BOR             reduce using rule 82 (exp -> exp RESTA exp .)
    BXOR            reduce using rule 82 (exp -> exp RESTA exp .)
    BLEFT           reduce using rule 82 (exp -> exp RESTA exp .)
    BRIGHT          reduce using rule 82 (exp -> exp RESTA exp .)
    ASK             reduce using rule 82 (exp -> exp RESTA exp .)
    PCOMA           reduce using rule 82 (exp -> exp RESTA exp .)
    DERPAR          reduce using rule 82 (exp -> exp RESTA exp .)
    DERLLAVE        reduce using rule 82 (exp -> exp RESTA exp .)
    DERCOR          reduce using rule 82 (exp -> exp RESTA exp .)
    COMA            reduce using rule 82 (exp -> exp RESTA exp .)
    DP              reduce using rule 82 (exp -> exp RESTA exp .)
    MULTI           shift and go to state 82
    DIV             shift and go to state 83
    PORCENTAJE      shift and go to state 84

  ! MULTI           [ reduce using rule 82 (exp -> exp RESTA exp .) ]
  ! DIV             [ reduce using rule 82 (exp -> exp RESTA exp .) ]
  ! PORCENTAJE      [ reduce using rule 82 (exp -> exp RESTA exp .) ]
  ! SUMA            [ shift and go to state 80 ]
  ! RESTA           [ shift and go to state 81 ]
  ! DIGUAL          [ shift and go to state 85 ]
  ! DESIGUAL        [ shift and go to state 86 ]
  ! MAYOR           [ shift and go to state 87 ]
  ! MENOR           [ shift and go to state 88 ]
  ! MAYORIGUAL      [ shift and go to state 89 ]
  ! MENORIGUAL      [ shift and go to state 90 ]
  ! AND             [ shift and go to state 91 ]
  ! OR              [ shift and go to state 92 ]
  ! BAND            [ shift and go to state 93 ]
  ! BOR             [ shift and go to state 94 ]
  ! BXOR            [ shift and go to state 95 ]
  ! BLEFT           [ shift and go to state 96 ]
  ! BRIGHT          [ shift and go to state 97 ]
  ! ASK             [ shift and go to state 98 ]


state 137

    (83) exp -> exp MULTI exp .
    (81) exp -> exp . SUMA exp
    (82) exp -> exp . RESTA exp
    (83) exp -> exp . MULTI exp
    (84) exp -> exp . DIV exp
    (85) exp -> exp . PORCENTAJE exp
    (86) exp -> exp . DIGUAL exp
    (87) exp -> exp . DESIGUAL exp
    (88) exp -> exp . MAYOR exp
    (89) exp -> exp . MENOR exp
    (90) exp -> exp . MAYORIGUAL exp
    (91) exp -> exp . MENORIGUAL exp
    (92) exp -> exp . AND exp
    (93) exp -> exp . OR exp
    (94) exp -> exp . BAND exp
    (95) exp -> exp . BOR exp
    (96) exp -> exp . BXOR exp
    (97) exp -> exp . BLEFT exp
    (98) exp -> exp . BRIGHT exp
    (105) exp -> exp . ASK exp DP exp

    SUMA            reduce using rule 83 (exp -> exp MULTI exp .)
    RESTA           reduce using rule 83 (exp -> exp MULTI exp .)
    MULTI           reduce using rule 83 (exp -> exp MULTI exp .)
    DIV             reduce using rule 83 (exp -> exp MULTI exp .)
    PORCENTAJE      reduce using rule 83 (exp -> exp MULTI exp .)
    DIGUAL          reduce using rule 83 (exp -> exp MULTI exp .)
    DESIGUAL        reduce using rule 83 (exp -> exp MULTI exp .)
    MAYOR           reduce using rule 83 (exp -> exp MULTI exp .)
    MENOR           reduce using rule 83 (exp -> exp MULTI exp .)
    MAYORIGUAL      reduce using rule 83 (exp -> exp MULTI exp .)
    MENORIGUAL      reduce using rule 83 (exp -> exp MULTI exp .)
    AND             reduce using rule 83 (exp -> exp MULTI exp .)
    OR              reduce using rule 83 (exp -> exp MULTI exp .)
    BAND            reduce using rule 83 (exp -> exp MULTI exp .)
    BOR             reduce using rule 83 (exp -> exp MULTI exp .)
    BXOR            reduce using rule 83 (exp -> exp MULTI exp .)
    BLEFT           reduce using rule 83 (exp -> exp MULTI exp .)
    BRIGHT          reduce using rule 83 (exp -> exp MULTI exp .)
    ASK             reduce using rule 83 (exp -> exp MULTI exp .)
    PCOMA           reduce using rule 83 (exp -> exp MULTI exp .)
    DERPAR          reduce using rule 83 (exp -> exp MULTI exp .)
    DERLLAVE        reduce using rule 83 (exp -> exp MULTI exp .)
    DERCOR          reduce using rule 83 (exp -> exp MULTI exp .)
    COMA            reduce using rule 83 (exp -> exp MULTI exp .)
    DP              reduce using rule 83 (exp -> exp MULTI exp .)

  ! SUMA            [ shift and go to state 80 ]
  ! RESTA           [ shift and go to state 81 ]
  ! MULTI           [ shift and go to state 82 ]
  ! DIV             [ shift and go to state 83 ]
  ! PORCENTAJE      [ shift and go to state 84 ]
  ! DIGUAL          [ shift and go to state 85 ]
  ! DESIGUAL        [ shift and go to state 86 ]
  ! MAYOR           [ shift and go to state 87 ]
  ! MENOR           [ shift and go to state 88 ]
  ! MAYORIGUAL      [ shift and go to state 89 ]
  ! MENORIGUAL      [ shift and go to state 90 ]
  ! AND             [ shift and go to state 91 ]
  ! OR              [ shift and go to state 92 ]
  ! BAND            [ shift and go to state 93 ]
  ! BOR             [ shift and go to state 94 ]
  ! BXOR            [ shift and go to state 95 ]
  ! BLEFT           [ shift and go to state 96 ]
  ! BRIGHT          [ shift and go to state 97 ]
  ! ASK             [ shift and go to state 98 ]


state 138

    (84) exp -> exp DIV exp .
    (81) exp -> exp . SUMA exp
    (82) exp -> exp . RESTA exp
    (83) exp -> exp . MULTI exp
    (84) exp -> exp . DIV exp
    (85) exp -> exp . PORCENTAJE exp
    (86) exp -> exp . DIGUAL exp
    (87) exp -> exp . DESIGUAL exp
    (88) exp -> exp . MAYOR exp
    (89) exp -> exp . MENOR exp
    (90) exp -> exp . MAYORIGUAL exp
    (91) exp -> exp . MENORIGUAL exp
    (92) exp -> exp . AND exp
    (93) exp -> exp . OR exp
    (94) exp -> exp . BAND exp
    (95) exp -> exp . BOR exp
    (96) exp -> exp . BXOR exp
    (97) exp -> exp . BLEFT exp
    (98) exp -> exp . BRIGHT exp
    (105) exp -> exp . ASK exp DP exp

    SUMA            reduce using rule 84 (exp -> exp DIV exp .)
    RESTA           reduce using rule 84 (exp -> exp DIV exp .)
    MULTI           reduce using rule 84 (exp -> exp DIV exp .)
    DIV             reduce using rule 84 (exp -> exp DIV exp .)
    PORCENTAJE      reduce using rule 84 (exp -> exp DIV exp .)
    DIGUAL          reduce using rule 84 (exp -> exp DIV exp .)
    DESIGUAL        reduce using rule 84 (exp -> exp DIV exp .)
    MAYOR           reduce using rule 84 (exp -> exp DIV exp .)
    MENOR           reduce using rule 84 (exp -> exp DIV exp .)
    MAYORIGUAL      reduce using rule 84 (exp -> exp DIV exp .)
    MENORIGUAL      reduce using rule 84 (exp -> exp DIV exp .)
    AND             reduce using rule 84 (exp -> exp DIV exp .)
    OR              reduce using rule 84 (exp -> exp DIV exp .)
    BAND            reduce using rule 84 (exp -> exp DIV exp .)
    BOR             reduce using rule 84 (exp -> exp DIV exp .)
    BXOR            reduce using rule 84 (exp -> exp DIV exp .)
    BLEFT           reduce using rule 84 (exp -> exp DIV exp .)
    BRIGHT          reduce using rule 84 (exp -> exp DIV exp .)
    ASK             reduce using rule 84 (exp -> exp DIV exp .)
    PCOMA           reduce using rule 84 (exp -> exp DIV exp .)
    DERPAR          reduce using rule 84 (exp -> exp DIV exp .)
    DERLLAVE        reduce using rule 84 (exp -> exp DIV exp .)
    DERCOR          reduce using rule 84 (exp -> exp DIV exp .)
    COMA            reduce using rule 84 (exp -> exp DIV exp .)
    DP              reduce using rule 84 (exp -> exp DIV exp .)

  ! SUMA            [ shift and go to state 80 ]
  ! RESTA           [ shift and go to state 81 ]
  ! MULTI           [ shift and go to state 82 ]
  ! DIV             [ shift and go to state 83 ]
  ! PORCENTAJE      [ shift and go to state 84 ]
  ! DIGUAL          [ shift and go to state 85 ]
  ! DESIGUAL        [ shift and go to state 86 ]
  ! MAYOR           [ shift and go to state 87 ]
  ! MENOR           [ shift and go to state 88 ]
  ! MAYORIGUAL      [ shift and go to state 89 ]
  ! MENORIGUAL      [ shift and go to state 90 ]
  ! AND             [ shift and go to state 91 ]
  ! OR              [ shift and go to state 92 ]
  ! BAND            [ shift and go to state 93 ]
  ! BOR             [ shift and go to state 94 ]
  ! BXOR            [ shift and go to state 95 ]
  ! BLEFT           [ shift and go to state 96 ]
  ! BRIGHT          [ shift and go to state 97 ]
  ! ASK             [ shift and go to state 98 ]


state 139

    (85) exp -> exp PORCENTAJE exp .
    (81) exp -> exp . SUMA exp
    (82) exp -> exp . RESTA exp
    (83) exp -> exp . MULTI exp
    (84) exp -> exp . DIV exp
    (85) exp -> exp . PORCENTAJE exp
    (86) exp -> exp . DIGUAL exp
    (87) exp -> exp . DESIGUAL exp
    (88) exp -> exp . MAYOR exp
    (89) exp -> exp . MENOR exp
    (90) exp -> exp . MAYORIGUAL exp
    (91) exp -> exp . MENORIGUAL exp
    (92) exp -> exp . AND exp
    (93) exp -> exp . OR exp
    (94) exp -> exp . BAND exp
    (95) exp -> exp . BOR exp
    (96) exp -> exp . BXOR exp
    (97) exp -> exp . BLEFT exp
    (98) exp -> exp . BRIGHT exp
    (105) exp -> exp . ASK exp DP exp

    SUMA            reduce using rule 85 (exp -> exp PORCENTAJE exp .)
    RESTA           reduce using rule 85 (exp -> exp PORCENTAJE exp .)
    MULTI           reduce using rule 85 (exp -> exp PORCENTAJE exp .)
    DIV             reduce using rule 85 (exp -> exp PORCENTAJE exp .)
    PORCENTAJE      reduce using rule 85 (exp -> exp PORCENTAJE exp .)
    DIGUAL          reduce using rule 85 (exp -> exp PORCENTAJE exp .)
    DESIGUAL        reduce using rule 85 (exp -> exp PORCENTAJE exp .)
    MAYOR           reduce using rule 85 (exp -> exp PORCENTAJE exp .)
    MENOR           reduce using rule 85 (exp -> exp PORCENTAJE exp .)
    MAYORIGUAL      reduce using rule 85 (exp -> exp PORCENTAJE exp .)
    MENORIGUAL      reduce using rule 85 (exp -> exp PORCENTAJE exp .)
    AND             reduce using rule 85 (exp -> exp PORCENTAJE exp .)
    OR              reduce using rule 85 (exp -> exp PORCENTAJE exp .)
    BAND            reduce using rule 85 (exp -> exp PORCENTAJE exp .)
    BOR             reduce using rule 85 (exp -> exp PORCENTAJE exp .)
    BXOR            reduce using rule 85 (exp -> exp PORCENTAJE exp .)
    BLEFT           reduce using rule 85 (exp -> exp PORCENTAJE exp .)
    BRIGHT          reduce using rule 85 (exp -> exp PORCENTAJE exp .)
    ASK             reduce using rule 85 (exp -> exp PORCENTAJE exp .)
    PCOMA           reduce using rule 85 (exp -> exp PORCENTAJE exp .)
    DERPAR          reduce using rule 85 (exp -> exp PORCENTAJE exp .)
    DERLLAVE        reduce using rule 85 (exp -> exp PORCENTAJE exp .)
    DERCOR          reduce using rule 85 (exp -> exp PORCENTAJE exp .)
    COMA            reduce using rule 85 (exp -> exp PORCENTAJE exp .)
    DP              reduce using rule 85 (exp -> exp PORCENTAJE exp .)

  ! SUMA            [ shift and go to state 80 ]
  ! RESTA           [ shift and go to state 81 ]
  ! MULTI           [ shift and go to state 82 ]
  ! DIV             [ shift and go to state 83 ]
  ! PORCENTAJE      [ shift and go to state 84 ]
  ! DIGUAL          [ shift and go to state 85 ]
  ! DESIGUAL        [ shift and go to state 86 ]
  ! MAYOR           [ shift and go to state 87 ]
  ! MENOR           [ shift and go to state 88 ]
  ! MAYORIGUAL      [ shift and go to state 89 ]
  ! MENORIGUAL      [ shift and go to state 90 ]
  ! AND             [ shift and go to state 91 ]
  ! OR              [ shift and go to state 92 ]
  ! BAND            [ shift and go to state 93 ]
  ! BOR             [ shift and go to state 94 ]
  ! BXOR            [ shift and go to state 95 ]
  ! BLEFT           [ shift and go to state 96 ]
  ! BRIGHT          [ shift and go to state 97 ]
  ! ASK             [ shift and go to state 98 ]


state 140

    (86) exp -> exp DIGUAL exp .
    (81) exp -> exp . SUMA exp
    (82) exp -> exp . RESTA exp
    (83) exp -> exp . MULTI exp
    (84) exp -> exp . DIV exp
    (85) exp -> exp . PORCENTAJE exp
    (86) exp -> exp . DIGUAL exp
    (87) exp -> exp . DESIGUAL exp
    (88) exp -> exp . MAYOR exp
    (89) exp -> exp . MENOR exp
    (90) exp -> exp . MAYORIGUAL exp
    (91) exp -> exp . MENORIGUAL exp
    (92) exp -> exp . AND exp
    (93) exp -> exp . OR exp
    (94) exp -> exp . BAND exp
    (95) exp -> exp . BOR exp
    (96) exp -> exp . BXOR exp
    (97) exp -> exp . BLEFT exp
    (98) exp -> exp . BRIGHT exp
    (105) exp -> exp . ASK exp DP exp

    DIGUAL          reduce using rule 86 (exp -> exp DIGUAL exp .)
    DESIGUAL        reduce using rule 86 (exp -> exp DIGUAL exp .)
    MAYOR           reduce using rule 86 (exp -> exp DIGUAL exp .)
    MENOR           reduce using rule 86 (exp -> exp DIGUAL exp .)
    MAYORIGUAL      reduce using rule 86 (exp -> exp DIGUAL exp .)
    MENORIGUAL      reduce using rule 86 (exp -> exp DIGUAL exp .)
    AND             reduce using rule 86 (exp -> exp DIGUAL exp .)
    OR              reduce using rule 86 (exp -> exp DIGUAL exp .)
    BAND            reduce using rule 86 (exp -> exp DIGUAL exp .)
    BOR             reduce using rule 86 (exp -> exp DIGUAL exp .)
    BXOR            reduce using rule 86 (exp -> exp DIGUAL exp .)
    BLEFT           reduce using rule 86 (exp -> exp DIGUAL exp .)
    BRIGHT          reduce using rule 86 (exp -> exp DIGUAL exp .)
    ASK             reduce using rule 86 (exp -> exp DIGUAL exp .)
    PCOMA           reduce using rule 86 (exp -> exp DIGUAL exp .)
    DERPAR          reduce using rule 86 (exp -> exp DIGUAL exp .)
    DERLLAVE        reduce using rule 86 (exp -> exp DIGUAL exp .)
    DERCOR          reduce using rule 86 (exp -> exp DIGUAL exp .)
    COMA            reduce using rule 86 (exp -> exp DIGUAL exp .)
    DP              reduce using rule 86 (exp -> exp DIGUAL exp .)
    SUMA            shift and go to state 80
    RESTA           shift and go to state 81
    MULTI           shift and go to state 82
    DIV             shift and go to state 83
    PORCENTAJE      shift and go to state 84

  ! SUMA            [ reduce using rule 86 (exp -> exp DIGUAL exp .) ]
  ! RESTA           [ reduce using rule 86 (exp -> exp DIGUAL exp .) ]
  ! MULTI           [ reduce using rule 86 (exp -> exp DIGUAL exp .) ]
  ! DIV             [ reduce using rule 86 (exp -> exp DIGUAL exp .) ]
  ! PORCENTAJE      [ reduce using rule 86 (exp -> exp DIGUAL exp .) ]
  ! DIGUAL          [ shift and go to state 85 ]
  ! DESIGUAL        [ shift and go to state 86 ]
  ! MAYOR           [ shift and go to state 87 ]
  ! MENOR           [ shift and go to state 88 ]
  ! MAYORIGUAL      [ shift and go to state 89 ]
  ! MENORIGUAL      [ shift and go to state 90 ]
  ! AND             [ shift and go to state 91 ]
  ! OR              [ shift and go to state 92 ]
  ! BAND            [ shift and go to state 93 ]
  ! BOR             [ shift and go to state 94 ]
  ! BXOR            [ shift and go to state 95 ]
  ! BLEFT           [ shift and go to state 96 ]
  ! BRIGHT          [ shift and go to state 97 ]
  ! ASK             [ shift and go to state 98 ]


state 141

    (87) exp -> exp DESIGUAL exp .
    (81) exp -> exp . SUMA exp
    (82) exp -> exp . RESTA exp
    (83) exp -> exp . MULTI exp
    (84) exp -> exp . DIV exp
    (85) exp -> exp . PORCENTAJE exp
    (86) exp -> exp . DIGUAL exp
    (87) exp -> exp . DESIGUAL exp
    (88) exp -> exp . MAYOR exp
    (89) exp -> exp . MENOR exp
    (90) exp -> exp . MAYORIGUAL exp
    (91) exp -> exp . MENORIGUAL exp
    (92) exp -> exp . AND exp
    (93) exp -> exp . OR exp
    (94) exp -> exp . BAND exp
    (95) exp -> exp . BOR exp
    (96) exp -> exp . BXOR exp
    (97) exp -> exp . BLEFT exp
    (98) exp -> exp . BRIGHT exp
    (105) exp -> exp . ASK exp DP exp

    DIGUAL          reduce using rule 87 (exp -> exp DESIGUAL exp .)
    DESIGUAL        reduce using rule 87 (exp -> exp DESIGUAL exp .)
    MAYOR           reduce using rule 87 (exp -> exp DESIGUAL exp .)
    MENOR           reduce using rule 87 (exp -> exp DESIGUAL exp .)
    MAYORIGUAL      reduce using rule 87 (exp -> exp DESIGUAL exp .)
    MENORIGUAL      reduce using rule 87 (exp -> exp DESIGUAL exp .)
    AND             reduce using rule 87 (exp -> exp DESIGUAL exp .)
    OR              reduce using rule 87 (exp -> exp DESIGUAL exp .)
    BAND            reduce using rule 87 (exp -> exp DESIGUAL exp .)
    BOR             reduce using rule 87 (exp -> exp DESIGUAL exp .)
    BXOR            reduce using rule 87 (exp -> exp DESIGUAL exp .)
    BLEFT           reduce using rule 87 (exp -> exp DESIGUAL exp .)
    BRIGHT          reduce using rule 87 (exp -> exp DESIGUAL exp .)
    ASK             reduce using rule 87 (exp -> exp DESIGUAL exp .)
    PCOMA           reduce using rule 87 (exp -> exp DESIGUAL exp .)
    DERPAR          reduce using rule 87 (exp -> exp DESIGUAL exp .)
    DERLLAVE        reduce using rule 87 (exp -> exp DESIGUAL exp .)
    DERCOR          reduce using rule 87 (exp -> exp DESIGUAL exp .)
    COMA            reduce using rule 87 (exp -> exp DESIGUAL exp .)
    DP              reduce using rule 87 (exp -> exp DESIGUAL exp .)
    SUMA            shift and go to state 80
    RESTA           shift and go to state 81
    MULTI           shift and go to state 82
    DIV             shift and go to state 83
    PORCENTAJE      shift and go to state 84

  ! SUMA            [ reduce using rule 87 (exp -> exp DESIGUAL exp .) ]
  ! RESTA           [ reduce using rule 87 (exp -> exp DESIGUAL exp .) ]
  ! MULTI           [ reduce using rule 87 (exp -> exp DESIGUAL exp .) ]
  ! DIV             [ reduce using rule 87 (exp -> exp DESIGUAL exp .) ]
  ! PORCENTAJE      [ reduce using rule 87 (exp -> exp DESIGUAL exp .) ]
  ! DIGUAL          [ shift and go to state 85 ]
  ! DESIGUAL        [ shift and go to state 86 ]
  ! MAYOR           [ shift and go to state 87 ]
  ! MENOR           [ shift and go to state 88 ]
  ! MAYORIGUAL      [ shift and go to state 89 ]
  ! MENORIGUAL      [ shift and go to state 90 ]
  ! AND             [ shift and go to state 91 ]
  ! OR              [ shift and go to state 92 ]
  ! BAND            [ shift and go to state 93 ]
  ! BOR             [ shift and go to state 94 ]
  ! BXOR            [ shift and go to state 95 ]
  ! BLEFT           [ shift and go to state 96 ]
  ! BRIGHT          [ shift and go to state 97 ]
  ! ASK             [ shift and go to state 98 ]


state 142

    (88) exp -> exp MAYOR exp .
    (81) exp -> exp . SUMA exp
    (82) exp -> exp . RESTA exp
    (83) exp -> exp . MULTI exp
    (84) exp -> exp . DIV exp
    (85) exp -> exp . PORCENTAJE exp
    (86) exp -> exp . DIGUAL exp
    (87) exp -> exp . DESIGUAL exp
    (88) exp -> exp . MAYOR exp
    (89) exp -> exp . MENOR exp
    (90) exp -> exp . MAYORIGUAL exp
    (91) exp -> exp . MENORIGUAL exp
    (92) exp -> exp . AND exp
    (93) exp -> exp . OR exp
    (94) exp -> exp . BAND exp
    (95) exp -> exp . BOR exp
    (96) exp -> exp . BXOR exp
    (97) exp -> exp . BLEFT exp
    (98) exp -> exp . BRIGHT exp
    (105) exp -> exp . ASK exp DP exp

    DIGUAL          reduce using rule 88 (exp -> exp MAYOR exp .)
    DESIGUAL        reduce using rule 88 (exp -> exp MAYOR exp .)
    MAYOR           reduce using rule 88 (exp -> exp MAYOR exp .)
    MENOR           reduce using rule 88 (exp -> exp MAYOR exp .)
    MAYORIGUAL      reduce using rule 88 (exp -> exp MAYOR exp .)
    MENORIGUAL      reduce using rule 88 (exp -> exp MAYOR exp .)
    AND             reduce using rule 88 (exp -> exp MAYOR exp .)
    OR              reduce using rule 88 (exp -> exp MAYOR exp .)
    BAND            reduce using rule 88 (exp -> exp MAYOR exp .)
    BOR             reduce using rule 88 (exp -> exp MAYOR exp .)
    BXOR            reduce using rule 88 (exp -> exp MAYOR exp .)
    BLEFT           reduce using rule 88 (exp -> exp MAYOR exp .)
    BRIGHT          reduce using rule 88 (exp -> exp MAYOR exp .)
    ASK             reduce using rule 88 (exp -> exp MAYOR exp .)
    PCOMA           reduce using rule 88 (exp -> exp MAYOR exp .)
    DERPAR          reduce using rule 88 (exp -> exp MAYOR exp .)
    DERLLAVE        reduce using rule 88 (exp -> exp MAYOR exp .)
    DERCOR          reduce using rule 88 (exp -> exp MAYOR exp .)
    COMA            reduce using rule 88 (exp -> exp MAYOR exp .)
    DP              reduce using rule 88 (exp -> exp MAYOR exp .)
    SUMA            shift and go to state 80
    RESTA           shift and go to state 81
    MULTI           shift and go to state 82
    DIV             shift and go to state 83
    PORCENTAJE      shift and go to state 84

  ! SUMA            [ reduce using rule 88 (exp -> exp MAYOR exp .) ]
  ! RESTA           [ reduce using rule 88 (exp -> exp MAYOR exp .) ]
  ! MULTI           [ reduce using rule 88 (exp -> exp MAYOR exp .) ]
  ! DIV             [ reduce using rule 88 (exp -> exp MAYOR exp .) ]
  ! PORCENTAJE      [ reduce using rule 88 (exp -> exp MAYOR exp .) ]
  ! DIGUAL          [ shift and go to state 85 ]
  ! DESIGUAL        [ shift and go to state 86 ]
  ! MAYOR           [ shift and go to state 87 ]
  ! MENOR           [ shift and go to state 88 ]
  ! MAYORIGUAL      [ shift and go to state 89 ]
  ! MENORIGUAL      [ shift and go to state 90 ]
  ! AND             [ shift and go to state 91 ]
  ! OR              [ shift and go to state 92 ]
  ! BAND            [ shift and go to state 93 ]
  ! BOR             [ shift and go to state 94 ]
  ! BXOR            [ shift and go to state 95 ]
  ! BLEFT           [ shift and go to state 96 ]
  ! BRIGHT          [ shift and go to state 97 ]
  ! ASK             [ shift and go to state 98 ]


state 143

    (89) exp -> exp MENOR exp .
    (81) exp -> exp . SUMA exp
    (82) exp -> exp . RESTA exp
    (83) exp -> exp . MULTI exp
    (84) exp -> exp . DIV exp
    (85) exp -> exp . PORCENTAJE exp
    (86) exp -> exp . DIGUAL exp
    (87) exp -> exp . DESIGUAL exp
    (88) exp -> exp . MAYOR exp
    (89) exp -> exp . MENOR exp
    (90) exp -> exp . MAYORIGUAL exp
    (91) exp -> exp . MENORIGUAL exp
    (92) exp -> exp . AND exp
    (93) exp -> exp . OR exp
    (94) exp -> exp . BAND exp
    (95) exp -> exp . BOR exp
    (96) exp -> exp . BXOR exp
    (97) exp -> exp . BLEFT exp
    (98) exp -> exp . BRIGHT exp
    (105) exp -> exp . ASK exp DP exp

    DIGUAL          reduce using rule 89 (exp -> exp MENOR exp .)
    DESIGUAL        reduce using rule 89 (exp -> exp MENOR exp .)
    MAYOR           reduce using rule 89 (exp -> exp MENOR exp .)
    MENOR           reduce using rule 89 (exp -> exp MENOR exp .)
    MAYORIGUAL      reduce using rule 89 (exp -> exp MENOR exp .)
    MENORIGUAL      reduce using rule 89 (exp -> exp MENOR exp .)
    AND             reduce using rule 89 (exp -> exp MENOR exp .)
    OR              reduce using rule 89 (exp -> exp MENOR exp .)
    BAND            reduce using rule 89 (exp -> exp MENOR exp .)
    BOR             reduce using rule 89 (exp -> exp MENOR exp .)
    BXOR            reduce using rule 89 (exp -> exp MENOR exp .)
    BLEFT           reduce using rule 89 (exp -> exp MENOR exp .)
    BRIGHT          reduce using rule 89 (exp -> exp MENOR exp .)
    ASK             reduce using rule 89 (exp -> exp MENOR exp .)
    PCOMA           reduce using rule 89 (exp -> exp MENOR exp .)
    DERPAR          reduce using rule 89 (exp -> exp MENOR exp .)
    DERLLAVE        reduce using rule 89 (exp -> exp MENOR exp .)
    DERCOR          reduce using rule 89 (exp -> exp MENOR exp .)
    COMA            reduce using rule 89 (exp -> exp MENOR exp .)
    DP              reduce using rule 89 (exp -> exp MENOR exp .)
    SUMA            shift and go to state 80
    RESTA           shift and go to state 81
    MULTI           shift and go to state 82
    DIV             shift and go to state 83
    PORCENTAJE      shift and go to state 84

  ! SUMA            [ reduce using rule 89 (exp -> exp MENOR exp .) ]
  ! RESTA           [ reduce using rule 89 (exp -> exp MENOR exp .) ]
  ! MULTI           [ reduce using rule 89 (exp -> exp MENOR exp .) ]
  ! DIV             [ reduce using rule 89 (exp -> exp MENOR exp .) ]
  ! PORCENTAJE      [ reduce using rule 89 (exp -> exp MENOR exp .) ]
  ! DIGUAL          [ shift and go to state 85 ]
  ! DESIGUAL        [ shift and go to state 86 ]
  ! MAYOR           [ shift and go to state 87 ]
  ! MENOR           [ shift and go to state 88 ]
  ! MAYORIGUAL      [ shift and go to state 89 ]
  ! MENORIGUAL      [ shift and go to state 90 ]
  ! AND             [ shift and go to state 91 ]
  ! OR              [ shift and go to state 92 ]
  ! BAND            [ shift and go to state 93 ]
  ! BOR             [ shift and go to state 94 ]
  ! BXOR            [ shift and go to state 95 ]
  ! BLEFT           [ shift and go to state 96 ]
  ! BRIGHT          [ shift and go to state 97 ]
  ! ASK             [ shift and go to state 98 ]


state 144

    (90) exp -> exp MAYORIGUAL exp .
    (81) exp -> exp . SUMA exp
    (82) exp -> exp . RESTA exp
    (83) exp -> exp . MULTI exp
    (84) exp -> exp . DIV exp
    (85) exp -> exp . PORCENTAJE exp
    (86) exp -> exp . DIGUAL exp
    (87) exp -> exp . DESIGUAL exp
    (88) exp -> exp . MAYOR exp
    (89) exp -> exp . MENOR exp
    (90) exp -> exp . MAYORIGUAL exp
    (91) exp -> exp . MENORIGUAL exp
    (92) exp -> exp . AND exp
    (93) exp -> exp . OR exp
    (94) exp -> exp . BAND exp
    (95) exp -> exp . BOR exp
    (96) exp -> exp . BXOR exp
    (97) exp -> exp . BLEFT exp
    (98) exp -> exp . BRIGHT exp
    (105) exp -> exp . ASK exp DP exp

    DIGUAL          reduce using rule 90 (exp -> exp MAYORIGUAL exp .)
    DESIGUAL        reduce using rule 90 (exp -> exp MAYORIGUAL exp .)
    MAYOR           reduce using rule 90 (exp -> exp MAYORIGUAL exp .)
    MENOR           reduce using rule 90 (exp -> exp MAYORIGUAL exp .)
    MAYORIGUAL      reduce using rule 90 (exp -> exp MAYORIGUAL exp .)
    MENORIGUAL      reduce using rule 90 (exp -> exp MAYORIGUAL exp .)
    AND             reduce using rule 90 (exp -> exp MAYORIGUAL exp .)
    OR              reduce using rule 90 (exp -> exp MAYORIGUAL exp .)
    BAND            reduce using rule 90 (exp -> exp MAYORIGUAL exp .)
    BOR             reduce using rule 90 (exp -> exp MAYORIGUAL exp .)
    BXOR            reduce using rule 90 (exp -> exp MAYORIGUAL exp .)
    BLEFT           reduce using rule 90 (exp -> exp MAYORIGUAL exp .)
    BRIGHT          reduce using rule 90 (exp -> exp MAYORIGUAL exp .)
    ASK             reduce using rule 90 (exp -> exp MAYORIGUAL exp .)
    PCOMA           reduce using rule 90 (exp -> exp MAYORIGUAL exp .)
    DERPAR          reduce using rule 90 (exp -> exp MAYORIGUAL exp .)
    DERLLAVE        reduce using rule 90 (exp -> exp MAYORIGUAL exp .)
    DERCOR          reduce using rule 90 (exp -> exp MAYORIGUAL exp .)
    COMA            reduce using rule 90 (exp -> exp MAYORIGUAL exp .)
    DP              reduce using rule 90 (exp -> exp MAYORIGUAL exp .)
    SUMA            shift and go to state 80
    RESTA           shift and go to state 81
    MULTI           shift and go to state 82
    DIV             shift and go to state 83
    PORCENTAJE      shift and go to state 84

  ! SUMA            [ reduce using rule 90 (exp -> exp MAYORIGUAL exp .) ]
  ! RESTA           [ reduce using rule 90 (exp -> exp MAYORIGUAL exp .) ]
  ! MULTI           [ reduce using rule 90 (exp -> exp MAYORIGUAL exp .) ]
  ! DIV             [ reduce using rule 90 (exp -> exp MAYORIGUAL exp .) ]
  ! PORCENTAJE      [ reduce using rule 90 (exp -> exp MAYORIGUAL exp .) ]
  ! DIGUAL          [ shift and go to state 85 ]
  ! DESIGUAL        [ shift and go to state 86 ]
  ! MAYOR           [ shift and go to state 87 ]
  ! MENOR           [ shift and go to state 88 ]
  ! MAYORIGUAL      [ shift and go to state 89 ]
  ! MENORIGUAL      [ shift and go to state 90 ]
  ! AND             [ shift and go to state 91 ]
  ! OR              [ shift and go to state 92 ]
  ! BAND            [ shift and go to state 93 ]
  ! BOR             [ shift and go to state 94 ]
  ! BXOR            [ shift and go to state 95 ]
  ! BLEFT           [ shift and go to state 96 ]
  ! BRIGHT          [ shift and go to state 97 ]
  ! ASK             [ shift and go to state 98 ]


state 145

    (91) exp -> exp MENORIGUAL exp .
    (81) exp -> exp . SUMA exp
    (82) exp -> exp . RESTA exp
    (83) exp -> exp . MULTI exp
    (84) exp -> exp . DIV exp
    (85) exp -> exp . PORCENTAJE exp
    (86) exp -> exp . DIGUAL exp
    (87) exp -> exp . DESIGUAL exp
    (88) exp -> exp . MAYOR exp
    (89) exp -> exp . MENOR exp
    (90) exp -> exp . MAYORIGUAL exp
    (91) exp -> exp . MENORIGUAL exp
    (92) exp -> exp . AND exp
    (93) exp -> exp . OR exp
    (94) exp -> exp . BAND exp
    (95) exp -> exp . BOR exp
    (96) exp -> exp . BXOR exp
    (97) exp -> exp . BLEFT exp
    (98) exp -> exp . BRIGHT exp
    (105) exp -> exp . ASK exp DP exp

    DIGUAL          reduce using rule 91 (exp -> exp MENORIGUAL exp .)
    DESIGUAL        reduce using rule 91 (exp -> exp MENORIGUAL exp .)
    MAYOR           reduce using rule 91 (exp -> exp MENORIGUAL exp .)
    MENOR           reduce using rule 91 (exp -> exp MENORIGUAL exp .)
    MAYORIGUAL      reduce using rule 91 (exp -> exp MENORIGUAL exp .)
    MENORIGUAL      reduce using rule 91 (exp -> exp MENORIGUAL exp .)
    AND             reduce using rule 91 (exp -> exp MENORIGUAL exp .)
    OR              reduce using rule 91 (exp -> exp MENORIGUAL exp .)
    BAND            reduce using rule 91 (exp -> exp MENORIGUAL exp .)
    BOR             reduce using rule 91 (exp -> exp MENORIGUAL exp .)
    BXOR            reduce using rule 91 (exp -> exp MENORIGUAL exp .)
    BLEFT           reduce using rule 91 (exp -> exp MENORIGUAL exp .)
    BRIGHT          reduce using rule 91 (exp -> exp MENORIGUAL exp .)
    ASK             reduce using rule 91 (exp -> exp MENORIGUAL exp .)
    PCOMA           reduce using rule 91 (exp -> exp MENORIGUAL exp .)
    DERPAR          reduce using rule 91 (exp -> exp MENORIGUAL exp .)
    DERLLAVE        reduce using rule 91 (exp -> exp MENORIGUAL exp .)
    DERCOR          reduce using rule 91 (exp -> exp MENORIGUAL exp .)
    COMA            reduce using rule 91 (exp -> exp MENORIGUAL exp .)
    DP              reduce using rule 91 (exp -> exp MENORIGUAL exp .)
    SUMA            shift and go to state 80
    RESTA           shift and go to state 81
    MULTI           shift and go to state 82
    DIV             shift and go to state 83
    PORCENTAJE      shift and go to state 84

  ! SUMA            [ reduce using rule 91 (exp -> exp MENORIGUAL exp .) ]
  ! RESTA           [ reduce using rule 91 (exp -> exp MENORIGUAL exp .) ]
  ! MULTI           [ reduce using rule 91 (exp -> exp MENORIGUAL exp .) ]
  ! DIV             [ reduce using rule 91 (exp -> exp MENORIGUAL exp .) ]
  ! PORCENTAJE      [ reduce using rule 91 (exp -> exp MENORIGUAL exp .) ]
  ! DIGUAL          [ shift and go to state 85 ]
  ! DESIGUAL        [ shift and go to state 86 ]
  ! MAYOR           [ shift and go to state 87 ]
  ! MENOR           [ shift and go to state 88 ]
  ! MAYORIGUAL      [ shift and go to state 89 ]
  ! MENORIGUAL      [ shift and go to state 90 ]
  ! AND             [ shift and go to state 91 ]
  ! OR              [ shift and go to state 92 ]
  ! BAND            [ shift and go to state 93 ]
  ! BOR             [ shift and go to state 94 ]
  ! BXOR            [ shift and go to state 95 ]
  ! BLEFT           [ shift and go to state 96 ]
  ! BRIGHT          [ shift and go to state 97 ]
  ! ASK             [ shift and go to state 98 ]


state 146

    (92) exp -> exp AND exp .
    (81) exp -> exp . SUMA exp
    (82) exp -> exp . RESTA exp
    (83) exp -> exp . MULTI exp
    (84) exp -> exp . DIV exp
    (85) exp -> exp . PORCENTAJE exp
    (86) exp -> exp . DIGUAL exp
    (87) exp -> exp . DESIGUAL exp
    (88) exp -> exp . MAYOR exp
    (89) exp -> exp . MENOR exp
    (90) exp -> exp . MAYORIGUAL exp
    (91) exp -> exp . MENORIGUAL exp
    (92) exp -> exp . AND exp
    (93) exp -> exp . OR exp
    (94) exp -> exp . BAND exp
    (95) exp -> exp . BOR exp
    (96) exp -> exp . BXOR exp
    (97) exp -> exp . BLEFT exp
    (98) exp -> exp . BRIGHT exp
    (105) exp -> exp . ASK exp DP exp

    AND             reduce using rule 92 (exp -> exp AND exp .)
    OR              reduce using rule 92 (exp -> exp AND exp .)
    BAND            reduce using rule 92 (exp -> exp AND exp .)
    BOR             reduce using rule 92 (exp -> exp AND exp .)
    BXOR            reduce using rule 92 (exp -> exp AND exp .)
    BLEFT           reduce using rule 92 (exp -> exp AND exp .)
    BRIGHT          reduce using rule 92 (exp -> exp AND exp .)
    ASK             reduce using rule 92 (exp -> exp AND exp .)
    PCOMA           reduce using rule 92 (exp -> exp AND exp .)
    DERPAR          reduce using rule 92 (exp -> exp AND exp .)
    DERLLAVE        reduce using rule 92 (exp -> exp AND exp .)
    DERCOR          reduce using rule 92 (exp -> exp AND exp .)
    COMA            reduce using rule 92 (exp -> exp AND exp .)
    DP              reduce using rule 92 (exp -> exp AND exp .)
    SUMA            shift and go to state 80
    RESTA           shift and go to state 81
    MULTI           shift and go to state 82
    DIV             shift and go to state 83
    PORCENTAJE      shift and go to state 84
    DIGUAL          shift and go to state 85
    DESIGUAL        shift and go to state 86
    MAYOR           shift and go to state 87
    MENOR           shift and go to state 88
    MAYORIGUAL      shift and go to state 89
    MENORIGUAL      shift and go to state 90

  ! SUMA            [ reduce using rule 92 (exp -> exp AND exp .) ]
  ! RESTA           [ reduce using rule 92 (exp -> exp AND exp .) ]
  ! MULTI           [ reduce using rule 92 (exp -> exp AND exp .) ]
  ! DIV             [ reduce using rule 92 (exp -> exp AND exp .) ]
  ! PORCENTAJE      [ reduce using rule 92 (exp -> exp AND exp .) ]
  ! DIGUAL          [ reduce using rule 92 (exp -> exp AND exp .) ]
  ! DESIGUAL        [ reduce using rule 92 (exp -> exp AND exp .) ]
  ! MAYOR           [ reduce using rule 92 (exp -> exp AND exp .) ]
  ! MENOR           [ reduce using rule 92 (exp -> exp AND exp .) ]
  ! MAYORIGUAL      [ reduce using rule 92 (exp -> exp AND exp .) ]
  ! MENORIGUAL      [ reduce using rule 92 (exp -> exp AND exp .) ]
  ! AND             [ shift and go to state 91 ]
  ! OR              [ shift and go to state 92 ]
  ! BAND            [ shift and go to state 93 ]
  ! BOR             [ shift and go to state 94 ]
  ! BXOR            [ shift and go to state 95 ]
  ! BLEFT           [ shift and go to state 96 ]
  ! BRIGHT          [ shift and go to state 97 ]
  ! ASK             [ shift and go to state 98 ]


state 147

    (93) exp -> exp OR exp .
    (81) exp -> exp . SUMA exp
    (82) exp -> exp . RESTA exp
    (83) exp -> exp . MULTI exp
    (84) exp -> exp . DIV exp
    (85) exp -> exp . PORCENTAJE exp
    (86) exp -> exp . DIGUAL exp
    (87) exp -> exp . DESIGUAL exp
    (88) exp -> exp . MAYOR exp
    (89) exp -> exp . MENOR exp
    (90) exp -> exp . MAYORIGUAL exp
    (91) exp -> exp . MENORIGUAL exp
    (92) exp -> exp . AND exp
    (93) exp -> exp . OR exp
    (94) exp -> exp . BAND exp
    (95) exp -> exp . BOR exp
    (96) exp -> exp . BXOR exp
    (97) exp -> exp . BLEFT exp
    (98) exp -> exp . BRIGHT exp
    (105) exp -> exp . ASK exp DP exp

    OR              reduce using rule 93 (exp -> exp OR exp .)
    BOR             reduce using rule 93 (exp -> exp OR exp .)
    BXOR            reduce using rule 93 (exp -> exp OR exp .)
    BLEFT           reduce using rule 93 (exp -> exp OR exp .)
    BRIGHT          reduce using rule 93 (exp -> exp OR exp .)
    ASK             reduce using rule 93 (exp -> exp OR exp .)
    PCOMA           reduce using rule 93 (exp -> exp OR exp .)
    DERPAR          reduce using rule 93 (exp -> exp OR exp .)
    DERLLAVE        reduce using rule 93 (exp -> exp OR exp .)
    DERCOR          reduce using rule 93 (exp -> exp OR exp .)
    COMA            reduce using rule 93 (exp -> exp OR exp .)
    DP              reduce using rule 93 (exp -> exp OR exp .)
    SUMA            shift and go to state 80
    RESTA           shift and go to state 81
    MULTI           shift and go to state 82
    DIV             shift and go to state 83
    PORCENTAJE      shift and go to state 84
    DIGUAL          shift and go to state 85
    DESIGUAL        shift and go to state 86
    MAYOR           shift and go to state 87
    MENOR           shift and go to state 88
    MAYORIGUAL      shift and go to state 89
    MENORIGUAL      shift and go to state 90
    AND             shift and go to state 91
    BAND            shift and go to state 93

  ! SUMA            [ reduce using rule 93 (exp -> exp OR exp .) ]
  ! RESTA           [ reduce using rule 93 (exp -> exp OR exp .) ]
  ! MULTI           [ reduce using rule 93 (exp -> exp OR exp .) ]
  ! DIV             [ reduce using rule 93 (exp -> exp OR exp .) ]
  ! PORCENTAJE      [ reduce using rule 93 (exp -> exp OR exp .) ]
  ! DIGUAL          [ reduce using rule 93 (exp -> exp OR exp .) ]
  ! DESIGUAL        [ reduce using rule 93 (exp -> exp OR exp .) ]
  ! MAYOR           [ reduce using rule 93 (exp -> exp OR exp .) ]
  ! MENOR           [ reduce using rule 93 (exp -> exp OR exp .) ]
  ! MAYORIGUAL      [ reduce using rule 93 (exp -> exp OR exp .) ]
  ! MENORIGUAL      [ reduce using rule 93 (exp -> exp OR exp .) ]
  ! AND             [ reduce using rule 93 (exp -> exp OR exp .) ]
  ! BAND            [ reduce using rule 93 (exp -> exp OR exp .) ]
  ! OR              [ shift and go to state 92 ]
  ! BOR             [ shift and go to state 94 ]
  ! BXOR            [ shift and go to state 95 ]
  ! BLEFT           [ shift and go to state 96 ]
  ! BRIGHT          [ shift and go to state 97 ]
  ! ASK             [ shift and go to state 98 ]


state 148

    (94) exp -> exp BAND exp .
    (81) exp -> exp . SUMA exp
    (82) exp -> exp . RESTA exp
    (83) exp -> exp . MULTI exp
    (84) exp -> exp . DIV exp
    (85) exp -> exp . PORCENTAJE exp
    (86) exp -> exp . DIGUAL exp
    (87) exp -> exp . DESIGUAL exp
    (88) exp -> exp . MAYOR exp
    (89) exp -> exp . MENOR exp
    (90) exp -> exp . MAYORIGUAL exp
    (91) exp -> exp . MENORIGUAL exp
    (92) exp -> exp . AND exp
    (93) exp -> exp . OR exp
    (94) exp -> exp . BAND exp
    (95) exp -> exp . BOR exp
    (96) exp -> exp . BXOR exp
    (97) exp -> exp . BLEFT exp
    (98) exp -> exp . BRIGHT exp
    (105) exp -> exp . ASK exp DP exp

    AND             reduce using rule 94 (exp -> exp BAND exp .)
    OR              reduce using rule 94 (exp -> exp BAND exp .)
    BAND            reduce using rule 94 (exp -> exp BAND exp .)
    BOR             reduce using rule 94 (exp -> exp BAND exp .)
    BXOR            reduce using rule 94 (exp -> exp BAND exp .)
    BLEFT           reduce using rule 94 (exp -> exp BAND exp .)
    BRIGHT          reduce using rule 94 (exp -> exp BAND exp .)
    ASK             reduce using rule 94 (exp -> exp BAND exp .)
    PCOMA           reduce using rule 94 (exp -> exp BAND exp .)
    DERPAR          reduce using rule 94 (exp -> exp BAND exp .)
    DERLLAVE        reduce using rule 94 (exp -> exp BAND exp .)
    DERCOR          reduce using rule 94 (exp -> exp BAND exp .)
    COMA            reduce using rule 94 (exp -> exp BAND exp .)
    DP              reduce using rule 94 (exp -> exp BAND exp .)
    SUMA            shift and go to state 80
    RESTA           shift and go to state 81
    MULTI           shift and go to state 82
    DIV             shift and go to state 83
    PORCENTAJE      shift and go to state 84
    DIGUAL          shift and go to state 85
    DESIGUAL        shift and go to state 86
    MAYOR           shift and go to state 87
    MENOR           shift and go to state 88
    MAYORIGUAL      shift and go to state 89
    MENORIGUAL      shift and go to state 90

  ! SUMA            [ reduce using rule 94 (exp -> exp BAND exp .) ]
  ! RESTA           [ reduce using rule 94 (exp -> exp BAND exp .) ]
  ! MULTI           [ reduce using rule 94 (exp -> exp BAND exp .) ]
  ! DIV             [ reduce using rule 94 (exp -> exp BAND exp .) ]
  ! PORCENTAJE      [ reduce using rule 94 (exp -> exp BAND exp .) ]
  ! DIGUAL          [ reduce using rule 94 (exp -> exp BAND exp .) ]
  ! DESIGUAL        [ reduce using rule 94 (exp -> exp BAND exp .) ]
  ! MAYOR           [ reduce using rule 94 (exp -> exp BAND exp .) ]
  ! MENOR           [ reduce using rule 94 (exp -> exp BAND exp .) ]
  ! MAYORIGUAL      [ reduce using rule 94 (exp -> exp BAND exp .) ]
  ! MENORIGUAL      [ reduce using rule 94 (exp -> exp BAND exp .) ]
  ! AND             [ shift and go to state 91 ]
  ! OR              [ shift and go to state 92 ]
  ! BAND            [ shift and go to state 93 ]
  ! BOR             [ shift and go to state 94 ]
  ! BXOR            [ shift and go to state 95 ]
  ! BLEFT           [ shift and go to state 96 ]
  ! BRIGHT          [ shift and go to state 97 ]
  ! ASK             [ shift and go to state 98 ]


state 149

    (95) exp -> exp BOR exp .
    (81) exp -> exp . SUMA exp
    (82) exp -> exp . RESTA exp
    (83) exp -> exp . MULTI exp
    (84) exp -> exp . DIV exp
    (85) exp -> exp . PORCENTAJE exp
    (86) exp -> exp . DIGUAL exp
    (87) exp -> exp . DESIGUAL exp
    (88) exp -> exp . MAYOR exp
    (89) exp -> exp . MENOR exp
    (90) exp -> exp . MAYORIGUAL exp
    (91) exp -> exp . MENORIGUAL exp
    (92) exp -> exp . AND exp
    (93) exp -> exp . OR exp
    (94) exp -> exp . BAND exp
    (95) exp -> exp . BOR exp
    (96) exp -> exp . BXOR exp
    (97) exp -> exp . BLEFT exp
    (98) exp -> exp . BRIGHT exp
    (105) exp -> exp . ASK exp DP exp

    OR              reduce using rule 95 (exp -> exp BOR exp .)
    BOR             reduce using rule 95 (exp -> exp BOR exp .)
    BXOR            reduce using rule 95 (exp -> exp BOR exp .)
    BLEFT           reduce using rule 95 (exp -> exp BOR exp .)
    BRIGHT          reduce using rule 95 (exp -> exp BOR exp .)
    ASK             reduce using rule 95 (exp -> exp BOR exp .)
    PCOMA           reduce using rule 95 (exp -> exp BOR exp .)
    DERPAR          reduce using rule 95 (exp -> exp BOR exp .)
    DERLLAVE        reduce using rule 95 (exp -> exp BOR exp .)
    DERCOR          reduce using rule 95 (exp -> exp BOR exp .)
    COMA            reduce using rule 95 (exp -> exp BOR exp .)
    DP              reduce using rule 95 (exp -> exp BOR exp .)
    SUMA            shift and go to state 80
    RESTA           shift and go to state 81
    MULTI           shift and go to state 82
    DIV             shift and go to state 83
    PORCENTAJE      shift and go to state 84
    DIGUAL          shift and go to state 85
    DESIGUAL        shift and go to state 86
    MAYOR           shift and go to state 87
    MENOR           shift and go to state 88
    MAYORIGUAL      shift and go to state 89
    MENORIGUAL      shift and go to state 90
    AND             shift and go to state 91
    BAND            shift and go to state 93

  ! SUMA            [ reduce using rule 95 (exp -> exp BOR exp .) ]
  ! RESTA           [ reduce using rule 95 (exp -> exp BOR exp .) ]
  ! MULTI           [ reduce using rule 95 (exp -> exp BOR exp .) ]
  ! DIV             [ reduce using rule 95 (exp -> exp BOR exp .) ]
  ! PORCENTAJE      [ reduce using rule 95 (exp -> exp BOR exp .) ]
  ! DIGUAL          [ reduce using rule 95 (exp -> exp BOR exp .) ]
  ! DESIGUAL        [ reduce using rule 95 (exp -> exp BOR exp .) ]
  ! MAYOR           [ reduce using rule 95 (exp -> exp BOR exp .) ]
  ! MENOR           [ reduce using rule 95 (exp -> exp BOR exp .) ]
  ! MAYORIGUAL      [ reduce using rule 95 (exp -> exp BOR exp .) ]
  ! MENORIGUAL      [ reduce using rule 95 (exp -> exp BOR exp .) ]
  ! AND             [ reduce using rule 95 (exp -> exp BOR exp .) ]
  ! BAND            [ reduce using rule 95 (exp -> exp BOR exp .) ]
  ! OR              [ shift and go to state 92 ]
  ! BOR             [ shift and go to state 94 ]
  ! BXOR            [ shift and go to state 95 ]
  ! BLEFT           [ shift and go to state 96 ]
  ! BRIGHT          [ shift and go to state 97 ]
  ! ASK             [ shift and go to state 98 ]


state 150

    (96) exp -> exp BXOR exp .
    (81) exp -> exp . SUMA exp
    (82) exp -> exp . RESTA exp
    (83) exp -> exp . MULTI exp
    (84) exp -> exp . DIV exp
    (85) exp -> exp . PORCENTAJE exp
    (86) exp -> exp . DIGUAL exp
    (87) exp -> exp . DESIGUAL exp
    (88) exp -> exp . MAYOR exp
    (89) exp -> exp . MENOR exp
    (90) exp -> exp . MAYORIGUAL exp
    (91) exp -> exp . MENORIGUAL exp
    (92) exp -> exp . AND exp
    (93) exp -> exp . OR exp
    (94) exp -> exp . BAND exp
    (95) exp -> exp . BOR exp
    (96) exp -> exp . BXOR exp
    (97) exp -> exp . BLEFT exp
    (98) exp -> exp . BRIGHT exp
    (105) exp -> exp . ASK exp DP exp

    BXOR            reduce using rule 96 (exp -> exp BXOR exp .)
    BLEFT           reduce using rule 96 (exp -> exp BXOR exp .)
    BRIGHT          reduce using rule 96 (exp -> exp BXOR exp .)
    ASK             reduce using rule 96 (exp -> exp BXOR exp .)
    PCOMA           reduce using rule 96 (exp -> exp BXOR exp .)
    DERPAR          reduce using rule 96 (exp -> exp BXOR exp .)
    DERLLAVE        reduce using rule 96 (exp -> exp BXOR exp .)
    DERCOR          reduce using rule 96 (exp -> exp BXOR exp .)
    COMA            reduce using rule 96 (exp -> exp BXOR exp .)
    DP              reduce using rule 96 (exp -> exp BXOR exp .)
    SUMA            shift and go to state 80
    RESTA           shift and go to state 81
    MULTI           shift and go to state 82
    DIV             shift and go to state 83
    PORCENTAJE      shift and go to state 84
    DIGUAL          shift and go to state 85
    DESIGUAL        shift and go to state 86
    MAYOR           shift and go to state 87
    MENOR           shift and go to state 88
    MAYORIGUAL      shift and go to state 89
    MENORIGUAL      shift and go to state 90
    AND             shift and go to state 91
    OR              shift and go to state 92
    BAND            shift and go to state 93
    BOR             shift and go to state 94

  ! SUMA            [ reduce using rule 96 (exp -> exp BXOR exp .) ]
  ! RESTA           [ reduce using rule 96 (exp -> exp BXOR exp .) ]
  ! MULTI           [ reduce using rule 96 (exp -> exp BXOR exp .) ]
  ! DIV             [ reduce using rule 96 (exp -> exp BXOR exp .) ]
  ! PORCENTAJE      [ reduce using rule 96 (exp -> exp BXOR exp .) ]
  ! DIGUAL          [ reduce using rule 96 (exp -> exp BXOR exp .) ]
  ! DESIGUAL        [ reduce using rule 96 (exp -> exp BXOR exp .) ]
  ! MAYOR           [ reduce using rule 96 (exp -> exp BXOR exp .) ]
  ! MENOR           [ reduce using rule 96 (exp -> exp BXOR exp .) ]
  ! MAYORIGUAL      [ reduce using rule 96 (exp -> exp BXOR exp .) ]
  ! MENORIGUAL      [ reduce using rule 96 (exp -> exp BXOR exp .) ]
  ! AND             [ reduce using rule 96 (exp -> exp BXOR exp .) ]
  ! OR              [ reduce using rule 96 (exp -> exp BXOR exp .) ]
  ! BAND            [ reduce using rule 96 (exp -> exp BXOR exp .) ]
  ! BOR             [ reduce using rule 96 (exp -> exp BXOR exp .) ]
  ! BXOR            [ shift and go to state 95 ]
  ! BLEFT           [ shift and go to state 96 ]
  ! BRIGHT          [ shift and go to state 97 ]
  ! ASK             [ shift and go to state 98 ]


state 151

    (97) exp -> exp BLEFT exp .
    (81) exp -> exp . SUMA exp
    (82) exp -> exp . RESTA exp
    (83) exp -> exp . MULTI exp
    (84) exp -> exp . DIV exp
    (85) exp -> exp . PORCENTAJE exp
    (86) exp -> exp . DIGUAL exp
    (87) exp -> exp . DESIGUAL exp
    (88) exp -> exp . MAYOR exp
    (89) exp -> exp . MENOR exp
    (90) exp -> exp . MAYORIGUAL exp
    (91) exp -> exp . MENORIGUAL exp
    (92) exp -> exp . AND exp
    (93) exp -> exp . OR exp
    (94) exp -> exp . BAND exp
    (95) exp -> exp . BOR exp
    (96) exp -> exp . BXOR exp
    (97) exp -> exp . BLEFT exp
    (98) exp -> exp . BRIGHT exp
    (105) exp -> exp . ASK exp DP exp

    BLEFT           reduce using rule 97 (exp -> exp BLEFT exp .)
    BRIGHT          reduce using rule 97 (exp -> exp BLEFT exp .)
    ASK             reduce using rule 97 (exp -> exp BLEFT exp .)
    PCOMA           reduce using rule 97 (exp -> exp BLEFT exp .)
    DERPAR          reduce using rule 97 (exp -> exp BLEFT exp .)
    DERLLAVE        reduce using rule 97 (exp -> exp BLEFT exp .)
    DERCOR          reduce using rule 97 (exp -> exp BLEFT exp .)
    COMA            reduce using rule 97 (exp -> exp BLEFT exp .)
    DP              reduce using rule 97 (exp -> exp BLEFT exp .)
    SUMA            shift and go to state 80
    RESTA           shift and go to state 81
    MULTI           shift and go to state 82
    DIV             shift and go to state 83
    PORCENTAJE      shift and go to state 84
    DIGUAL          shift and go to state 85
    DESIGUAL        shift and go to state 86
    MAYOR           shift and go to state 87
    MENOR           shift and go to state 88
    MAYORIGUAL      shift and go to state 89
    MENORIGUAL      shift and go to state 90
    AND             shift and go to state 91
    OR              shift and go to state 92
    BAND            shift and go to state 93
    BOR             shift and go to state 94
    BXOR            shift and go to state 95

  ! SUMA            [ reduce using rule 97 (exp -> exp BLEFT exp .) ]
  ! RESTA           [ reduce using rule 97 (exp -> exp BLEFT exp .) ]
  ! MULTI           [ reduce using rule 97 (exp -> exp BLEFT exp .) ]
  ! DIV             [ reduce using rule 97 (exp -> exp BLEFT exp .) ]
  ! PORCENTAJE      [ reduce using rule 97 (exp -> exp BLEFT exp .) ]
  ! DIGUAL          [ reduce using rule 97 (exp -> exp BLEFT exp .) ]
  ! DESIGUAL        [ reduce using rule 97 (exp -> exp BLEFT exp .) ]
  ! MAYOR           [ reduce using rule 97 (exp -> exp BLEFT exp .) ]
  ! MENOR           [ reduce using rule 97 (exp -> exp BLEFT exp .) ]
  ! MAYORIGUAL      [ reduce using rule 97 (exp -> exp BLEFT exp .) ]
  ! MENORIGUAL      [ reduce using rule 97 (exp -> exp BLEFT exp .) ]
  ! AND             [ reduce using rule 97 (exp -> exp BLEFT exp .) ]
  ! OR              [ reduce using rule 97 (exp -> exp BLEFT exp .) ]
  ! BAND            [ reduce using rule 97 (exp -> exp BLEFT exp .) ]
  ! BOR             [ reduce using rule 97 (exp -> exp BLEFT exp .) ]
  ! BXOR            [ reduce using rule 97 (exp -> exp BLEFT exp .) ]
  ! BLEFT           [ shift and go to state 96 ]
  ! BRIGHT          [ shift and go to state 97 ]
  ! ASK             [ shift and go to state 98 ]


state 152

    (98) exp -> exp BRIGHT exp .
    (81) exp -> exp . SUMA exp
    (82) exp -> exp . RESTA exp
    (83) exp -> exp . MULTI exp
    (84) exp -> exp . DIV exp
    (85) exp -> exp . PORCENTAJE exp
    (86) exp -> exp . DIGUAL exp
    (87) exp -> exp . DESIGUAL exp
    (88) exp -> exp . MAYOR exp
    (89) exp -> exp . MENOR exp
    (90) exp -> exp . MAYORIGUAL exp
    (91) exp -> exp . MENORIGUAL exp
    (92) exp -> exp . AND exp
    (93) exp -> exp . OR exp
    (94) exp -> exp . BAND exp
    (95) exp -> exp . BOR exp
    (96) exp -> exp . BXOR exp
    (97) exp -> exp . BLEFT exp
    (98) exp -> exp . BRIGHT exp
    (105) exp -> exp . ASK exp DP exp

    BLEFT           reduce using rule 98 (exp -> exp BRIGHT exp .)
    BRIGHT          reduce using rule 98 (exp -> exp BRIGHT exp .)
    ASK             reduce using rule 98 (exp -> exp BRIGHT exp .)
    PCOMA           reduce using rule 98 (exp -> exp BRIGHT exp .)
    DERPAR          reduce using rule 98 (exp -> exp BRIGHT exp .)
    DERLLAVE        reduce using rule 98 (exp -> exp BRIGHT exp .)
    DERCOR          reduce using rule 98 (exp -> exp BRIGHT exp .)
    COMA            reduce using rule 98 (exp -> exp BRIGHT exp .)
    DP              reduce using rule 98 (exp -> exp BRIGHT exp .)
    SUMA            shift and go to state 80
    RESTA           shift and go to state 81
    MULTI           shift and go to state 82
    DIV             shift and go to state 83
    PORCENTAJE      shift and go to state 84
    DIGUAL          shift and go to state 85
    DESIGUAL        shift and go to state 86
    MAYOR           shift and go to state 87
    MENOR           shift and go to state 88
    MAYORIGUAL      shift and go to state 89
    MENORIGUAL      shift and go to state 90
    AND             shift and go to state 91
    OR              shift and go to state 92
    BAND            shift and go to state 93
    BOR             shift and go to state 94
    BXOR            shift and go to state 95

  ! SUMA            [ reduce using rule 98 (exp -> exp BRIGHT exp .) ]
  ! RESTA           [ reduce using rule 98 (exp -> exp BRIGHT exp .) ]
  ! MULTI           [ reduce using rule 98 (exp -> exp BRIGHT exp .) ]
  ! DIV             [ reduce using rule 98 (exp -> exp BRIGHT exp .) ]
  ! PORCENTAJE      [ reduce using rule 98 (exp -> exp BRIGHT exp .) ]
  ! DIGUAL          [ reduce using rule 98 (exp -> exp BRIGHT exp .) ]
  ! DESIGUAL        [ reduce using rule 98 (exp -> exp BRIGHT exp .) ]
  ! MAYOR           [ reduce using rule 98 (exp -> exp BRIGHT exp .) ]
  ! MENOR           [ reduce using rule 98 (exp -> exp BRIGHT exp .) ]
  ! MAYORIGUAL      [ reduce using rule 98 (exp -> exp BRIGHT exp .) ]
  ! MENORIGUAL      [ reduce using rule 98 (exp -> exp BRIGHT exp .) ]
  ! AND             [ reduce using rule 98 (exp -> exp BRIGHT exp .) ]
  ! OR              [ reduce using rule 98 (exp -> exp BRIGHT exp .) ]
  ! BAND            [ reduce using rule 98 (exp -> exp BRIGHT exp .) ]
  ! BOR             [ reduce using rule 98 (exp -> exp BRIGHT exp .) ]
  ! BXOR            [ reduce using rule 98 (exp -> exp BRIGHT exp .) ]
  ! BLEFT           [ shift and go to state 96 ]
  ! BRIGHT          [ shift and go to state 97 ]
  ! ASK             [ shift and go to state 98 ]


state 153

    (105) exp -> exp ASK exp . DP exp
    (81) exp -> exp . SUMA exp
    (82) exp -> exp . RESTA exp
    (83) exp -> exp . MULTI exp
    (84) exp -> exp . DIV exp
    (85) exp -> exp . PORCENTAJE exp
    (86) exp -> exp . DIGUAL exp
    (87) exp -> exp . DESIGUAL exp
    (88) exp -> exp . MAYOR exp
    (89) exp -> exp . MENOR exp
    (90) exp -> exp . MAYORIGUAL exp
    (91) exp -> exp . MENORIGUAL exp
    (92) exp -> exp . AND exp
    (93) exp -> exp . OR exp
    (94) exp -> exp . BAND exp
    (95) exp -> exp . BOR exp
    (96) exp -> exp . BXOR exp
    (97) exp -> exp . BLEFT exp
    (98) exp -> exp . BRIGHT exp
    (105) exp -> exp . ASK exp DP exp

    DP              shift and go to state 181
    SUMA            shift and go to state 80
    RESTA           shift and go to state 81
    MULTI           shift and go to state 82
    DIV             shift and go to state 83
    PORCENTAJE      shift and go to state 84
    DIGUAL          shift and go to state 85
    DESIGUAL        shift and go to state 86
    MAYOR           shift and go to state 87
    MENOR           shift and go to state 88
    MAYORIGUAL      shift and go to state 89
    MENORIGUAL      shift and go to state 90
    AND             shift and go to state 91
    OR              shift and go to state 92
    BAND            shift and go to state 93
    BOR             shift and go to state 94
    BXOR            shift and go to state 95
    BLEFT           shift and go to state 96
    BRIGHT          shift and go to state 97
    ASK             shift and go to state 98


state 154

    (73) exp -> scanf IZQPAR DERPAR .

    SUMA            reduce using rule 73 (exp -> scanf IZQPAR DERPAR .)
    RESTA           reduce using rule 73 (exp -> scanf IZQPAR DERPAR .)
    MULTI           reduce using rule 73 (exp -> scanf IZQPAR DERPAR .)
    DIV             reduce using rule 73 (exp -> scanf IZQPAR DERPAR .)
    PORCENTAJE      reduce using rule 73 (exp -> scanf IZQPAR DERPAR .)
    DIGUAL          reduce using rule 73 (exp -> scanf IZQPAR DERPAR .)
    DESIGUAL        reduce using rule 73 (exp -> scanf IZQPAR DERPAR .)
    MAYOR           reduce using rule 73 (exp -> scanf IZQPAR DERPAR .)
    MENOR           reduce using rule 73 (exp -> scanf IZQPAR DERPAR .)
    MAYORIGUAL      reduce using rule 73 (exp -> scanf IZQPAR DERPAR .)
    MENORIGUAL      reduce using rule 73 (exp -> scanf IZQPAR DERPAR .)
    AND             reduce using rule 73 (exp -> scanf IZQPAR DERPAR .)
    OR              reduce using rule 73 (exp -> scanf IZQPAR DERPAR .)
    BAND            reduce using rule 73 (exp -> scanf IZQPAR DERPAR .)
    BOR             reduce using rule 73 (exp -> scanf IZQPAR DERPAR .)
    BXOR            reduce using rule 73 (exp -> scanf IZQPAR DERPAR .)
    BLEFT           reduce using rule 73 (exp -> scanf IZQPAR DERPAR .)
    BRIGHT          reduce using rule 73 (exp -> scanf IZQPAR DERPAR .)
    ASK             reduce using rule 73 (exp -> scanf IZQPAR DERPAR .)
    PCOMA           reduce using rule 73 (exp -> scanf IZQPAR DERPAR .)
    DERPAR          reduce using rule 73 (exp -> scanf IZQPAR DERPAR .)
    DERLLAVE        reduce using rule 73 (exp -> scanf IZQPAR DERPAR .)
    DERCOR          reduce using rule 73 (exp -> scanf IZQPAR DERPAR .)
    COMA            reduce using rule 73 (exp -> scanf IZQPAR DERPAR .)
    DP              reduce using rule 73 (exp -> scanf IZQPAR DERPAR .)


state 155

    (103) exp -> IZQPAR exp DERPAR .

    SUMA            reduce using rule 103 (exp -> IZQPAR exp DERPAR .)
    RESTA           reduce using rule 103 (exp -> IZQPAR exp DERPAR .)
    MULTI           reduce using rule 103 (exp -> IZQPAR exp DERPAR .)
    DIV             reduce using rule 103 (exp -> IZQPAR exp DERPAR .)
    PORCENTAJE      reduce using rule 103 (exp -> IZQPAR exp DERPAR .)
    DIGUAL          reduce using rule 103 (exp -> IZQPAR exp DERPAR .)
    DESIGUAL        reduce using rule 103 (exp -> IZQPAR exp DERPAR .)
    MAYOR           reduce using rule 103 (exp -> IZQPAR exp DERPAR .)
    MENOR           reduce using rule 103 (exp -> IZQPAR exp DERPAR .)
    MAYORIGUAL      reduce using rule 103 (exp -> IZQPAR exp DERPAR .)
    MENORIGUAL      reduce using rule 103 (exp -> IZQPAR exp DERPAR .)
    AND             reduce using rule 103 (exp -> IZQPAR exp DERPAR .)
    OR              reduce using rule 103 (exp -> IZQPAR exp DERPAR .)
    BAND            reduce using rule 103 (exp -> IZQPAR exp DERPAR .)
    BOR             reduce using rule 103 (exp -> IZQPAR exp DERPAR .)
    BXOR            reduce using rule 103 (exp -> IZQPAR exp DERPAR .)
    BLEFT           reduce using rule 103 (exp -> IZQPAR exp DERPAR .)
    BRIGHT          reduce using rule 103 (exp -> IZQPAR exp DERPAR .)
    ASK             reduce using rule 103 (exp -> IZQPAR exp DERPAR .)
    PCOMA           reduce using rule 103 (exp -> IZQPAR exp DERPAR .)
    DERPAR          reduce using rule 103 (exp -> IZQPAR exp DERPAR .)
    DERLLAVE        reduce using rule 103 (exp -> IZQPAR exp DERPAR .)
    DERCOR          reduce using rule 103 (exp -> IZQPAR exp DERPAR .)
    COMA            reduce using rule 103 (exp -> IZQPAR exp DERPAR .)
    DP              reduce using rule 103 (exp -> IZQPAR exp DERPAR .)


state 156

    (104) exp -> IZQPAR TYPE DERPAR . exp
    (73) exp -> . scanf IZQPAR DERPAR
    (81) exp -> . exp SUMA exp
    (82) exp -> . exp RESTA exp
    (83) exp -> . exp MULTI exp
    (84) exp -> . exp DIV exp
    (85) exp -> . exp PORCENTAJE exp
    (86) exp -> . exp DIGUAL exp
    (87) exp -> . exp DESIGUAL exp
    (88) exp -> . exp MAYOR exp
    (89) exp -> . exp MENOR exp
    (90) exp -> . exp MAYORIGUAL exp
    (91) exp -> . exp MENORIGUAL exp
    (92) exp -> . exp AND exp
    (93) exp -> . exp OR exp
    (94) exp -> . exp BAND exp
    (95) exp -> . exp BOR exp
    (96) exp -> . exp BXOR exp
    (97) exp -> . exp BLEFT exp
    (98) exp -> . exp BRIGHT exp
    (99) exp -> . RESTA exp
    (100) exp -> . NOT exp
    (101) exp -> . BNOT exp
    (102) exp -> . sizeof exp
    (103) exp -> . IZQPAR exp DERPAR
    (104) exp -> . IZQPAR TYPE DERPAR exp
    (105) exp -> . exp ASK exp DP exp
    (106) exp -> . DOUBLE
    (107) exp -> . INTEGER
    (108) exp -> . ident
    (109) exp -> . ident lacs
    (110) exp -> . STR
    (111) exp -> . IZQCOR lex DERCOR
    (76) ident -> . ID

    scanf           shift and go to state 35
    RESTA           shift and go to state 37
    NOT             shift and go to state 38
    BNOT            shift and go to state 39
    sizeof          shift and go to state 40
    IZQPAR          shift and go to state 36
    DOUBLE          shift and go to state 41
    INTEGER         shift and go to state 42
    STR             shift and go to state 43
    IZQCOR          shift and go to state 44
    ID              shift and go to state 17

    exp                            shift and go to state 182
    ident                          shift and go to state 33

state 157

    (111) exp -> IZQCOR lex DERCOR .

    SUMA            reduce using rule 111 (exp -> IZQCOR lex DERCOR .)
    RESTA           reduce using rule 111 (exp -> IZQCOR lex DERCOR .)
    MULTI           reduce using rule 111 (exp -> IZQCOR lex DERCOR .)
    DIV             reduce using rule 111 (exp -> IZQCOR lex DERCOR .)
    PORCENTAJE      reduce using rule 111 (exp -> IZQCOR lex DERCOR .)
    DIGUAL          reduce using rule 111 (exp -> IZQCOR lex DERCOR .)
    DESIGUAL        reduce using rule 111 (exp -> IZQCOR lex DERCOR .)
    MAYOR           reduce using rule 111 (exp -> IZQCOR lex DERCOR .)
    MENOR           reduce using rule 111 (exp -> IZQCOR lex DERCOR .)
    MAYORIGUAL      reduce using rule 111 (exp -> IZQCOR lex DERCOR .)
    MENORIGUAL      reduce using rule 111 (exp -> IZQCOR lex DERCOR .)
    AND             reduce using rule 111 (exp -> IZQCOR lex DERCOR .)
    OR              reduce using rule 111 (exp -> IZQCOR lex DERCOR .)
    BAND            reduce using rule 111 (exp -> IZQCOR lex DERCOR .)
    BOR             reduce using rule 111 (exp -> IZQCOR lex DERCOR .)
    BXOR            reduce using rule 111 (exp -> IZQCOR lex DERCOR .)
    BLEFT           reduce using rule 111 (exp -> IZQCOR lex DERCOR .)
    BRIGHT          reduce using rule 111 (exp -> IZQCOR lex DERCOR .)
    ASK             reduce using rule 111 (exp -> IZQCOR lex DERCOR .)
    PCOMA           reduce using rule 111 (exp -> IZQCOR lex DERCOR .)
    DERPAR          reduce using rule 111 (exp -> IZQCOR lex DERCOR .)
    DERLLAVE        reduce using rule 111 (exp -> IZQCOR lex DERCOR .)
    DERCOR          reduce using rule 111 (exp -> IZQCOR lex DERCOR .)
    COMA            reduce using rule 111 (exp -> IZQCOR lex DERCOR .)
    DP              reduce using rule 111 (exp -> IZQCOR lex DERCOR .)


state 158

    (37) lex -> lex COMA . exp
    (73) exp -> . scanf IZQPAR DERPAR
    (81) exp -> . exp SUMA exp
    (82) exp -> . exp RESTA exp
    (83) exp -> . exp MULTI exp
    (84) exp -> . exp DIV exp
    (85) exp -> . exp PORCENTAJE exp
    (86) exp -> . exp DIGUAL exp
    (87) exp -> . exp DESIGUAL exp
    (88) exp -> . exp MAYOR exp
    (89) exp -> . exp MENOR exp
    (90) exp -> . exp MAYORIGUAL exp
    (91) exp -> . exp MENORIGUAL exp
    (92) exp -> . exp AND exp
    (93) exp -> . exp OR exp
    (94) exp -> . exp BAND exp
    (95) exp -> . exp BOR exp
    (96) exp -> . exp BXOR exp
    (97) exp -> . exp BLEFT exp
    (98) exp -> . exp BRIGHT exp
    (99) exp -> . RESTA exp
    (100) exp -> . NOT exp
    (101) exp -> . BNOT exp
    (102) exp -> . sizeof exp
    (103) exp -> . IZQPAR exp DERPAR
    (104) exp -> . IZQPAR TYPE DERPAR exp
    (105) exp -> . exp ASK exp DP exp
    (106) exp -> . DOUBLE
    (107) exp -> . INTEGER
    (108) exp -> . ident
    (109) exp -> . ident lacs
    (110) exp -> . STR
    (111) exp -> . IZQCOR lex DERCOR
    (76) ident -> . ID

    scanf           shift and go to state 35
    RESTA           shift and go to state 37
    NOT             shift and go to state 38
    BNOT            shift and go to state 39
    sizeof          shift and go to state 40
    IZQPAR          shift and go to state 36
    DOUBLE          shift and go to state 41
    INTEGER         shift and go to state 42
    STR             shift and go to state 43
    IZQCOR          shift and go to state 44
    ID              shift and go to state 17

    exp                            shift and go to state 183
    ident                          shift and go to state 33

state 159

    (41) asig -> ident lacs IGUAL . exp
    (73) exp -> . scanf IZQPAR DERPAR
    (81) exp -> . exp SUMA exp
    (82) exp -> . exp RESTA exp
    (83) exp -> . exp MULTI exp
    (84) exp -> . exp DIV exp
    (85) exp -> . exp PORCENTAJE exp
    (86) exp -> . exp DIGUAL exp
    (87) exp -> . exp DESIGUAL exp
    (88) exp -> . exp MAYOR exp
    (89) exp -> . exp MENOR exp
    (90) exp -> . exp MAYORIGUAL exp
    (91) exp -> . exp MENORIGUAL exp
    (92) exp -> . exp AND exp
    (93) exp -> . exp OR exp
    (94) exp -> . exp BAND exp
    (95) exp -> . exp BOR exp
    (96) exp -> . exp BXOR exp
    (97) exp -> . exp BLEFT exp
    (98) exp -> . exp BRIGHT exp
    (99) exp -> . RESTA exp
    (100) exp -> . NOT exp
    (101) exp -> . BNOT exp
    (102) exp -> . sizeof exp
    (103) exp -> . IZQPAR exp DERPAR
    (104) exp -> . IZQPAR TYPE DERPAR exp
    (105) exp -> . exp ASK exp DP exp
    (106) exp -> . DOUBLE
    (107) exp -> . INTEGER
    (108) exp -> . ident
    (109) exp -> . ident lacs
    (110) exp -> . STR
    (111) exp -> . IZQCOR lex DERCOR
    (76) ident -> . ID

    scanf           shift and go to state 35
    RESTA           shift and go to state 37
    NOT             shift and go to state 38
    BNOT            shift and go to state 39
    sizeof          shift and go to state 40
    IZQPAR          shift and go to state 36
    DOUBLE          shift and go to state 41
    INTEGER         shift and go to state 42
    STR             shift and go to state 43
    IZQCOR          shift and go to state 44
    ID              shift and go to state 17

    ident                          shift and go to state 33
    exp                            shift and go to state 184

state 160

    (43) asig -> ident lacs INCE .

    PCOMA           reduce using rule 43 (asig -> ident lacs INCE .)
    DERPAR          reduce using rule 43 (asig -> ident lacs INCE .)


state 161

    (45) asig -> ident lacs DECRE .

    PCOMA           reduce using rule 45 (asig -> ident lacs DECRE .)
    DERPAR          reduce using rule 45 (asig -> ident lacs DECRE .)


state 162

    (42) asig -> ident IGUAL exp .
    (81) exp -> exp . SUMA exp
    (82) exp -> exp . RESTA exp
    (83) exp -> exp . MULTI exp
    (84) exp -> exp . DIV exp
    (85) exp -> exp . PORCENTAJE exp
    (86) exp -> exp . DIGUAL exp
    (87) exp -> exp . DESIGUAL exp
    (88) exp -> exp . MAYOR exp
    (89) exp -> exp . MENOR exp
    (90) exp -> exp . MAYORIGUAL exp
    (91) exp -> exp . MENORIGUAL exp
    (92) exp -> exp . AND exp
    (93) exp -> exp . OR exp
    (94) exp -> exp . BAND exp
    (95) exp -> exp . BOR exp
    (96) exp -> exp . BXOR exp
    (97) exp -> exp . BLEFT exp
    (98) exp -> exp . BRIGHT exp
    (105) exp -> exp . ASK exp DP exp

    PCOMA           reduce using rule 42 (asig -> ident IGUAL exp .)
    DERPAR          reduce using rule 42 (asig -> ident IGUAL exp .)
    SUMA            shift and go to state 80
    RESTA           shift and go to state 81
    MULTI           shift and go to state 82
    DIV             shift and go to state 83
    PORCENTAJE      shift and go to state 84
    DIGUAL          shift and go to state 85
    DESIGUAL        shift and go to state 86
    MAYOR           shift and go to state 87
    MENOR           shift and go to state 88
    MAYORIGUAL      shift and go to state 89
    MENORIGUAL      shift and go to state 90
    AND             shift and go to state 91
    OR              shift and go to state 92
    BAND            shift and go to state 93
    BOR             shift and go to state 94
    BXOR            shift and go to state 95
    BLEFT           shift and go to state 96
    BRIGHT          shift and go to state 97
    ASK             shift and go to state 98


state 163

    (31) call -> ident IZQPAR plex . DERPAR PCOMA

    DERPAR          shift and go to state 185


state 164

    (35) plex -> lex .
    (37) lex -> lex . COMA exp

    DERPAR          reduce using rule 35 (plex -> lex .)
    COMA            shift and go to state 158


state 165

    (6) body -> struct ident IZQCOR linst DERCOR PCOMA .

    struct          reduce using rule 6 (body -> struct ident IZQCOR linst DERCOR PCOMA .)
    int             reduce using rule 6 (body -> struct ident IZQCOR linst DERCOR PCOMA .)
    float           reduce using rule 6 (body -> struct ident IZQCOR linst DERCOR PCOMA .)
    char            reduce using rule 6 (body -> struct ident IZQCOR linst DERCOR PCOMA .)
    double          reduce using rule 6 (body -> struct ident IZQCOR linst DERCOR PCOMA .)
    void            reduce using rule 6 (body -> struct ident IZQCOR linst DERCOR PCOMA .)
    $end            reduce using rule 6 (body -> struct ident IZQCOR linst DERCOR PCOMA .)


state 166

    (58) para -> for IZQPAR para1 . exp PCOMA para2 DERPAR IZQCOR linst DERCOR
    (73) exp -> . scanf IZQPAR DERPAR
    (81) exp -> . exp SUMA exp
    (82) exp -> . exp RESTA exp
    (83) exp -> . exp MULTI exp
    (84) exp -> . exp DIV exp
    (85) exp -> . exp PORCENTAJE exp
    (86) exp -> . exp DIGUAL exp
    (87) exp -> . exp DESIGUAL exp
    (88) exp -> . exp MAYOR exp
    (89) exp -> . exp MENOR exp
    (90) exp -> . exp MAYORIGUAL exp
    (91) exp -> . exp MENORIGUAL exp
    (92) exp -> . exp AND exp
    (93) exp -> . exp OR exp
    (94) exp -> . exp BAND exp
    (95) exp -> . exp BOR exp
    (96) exp -> . exp BXOR exp
    (97) exp -> . exp BLEFT exp
    (98) exp -> . exp BRIGHT exp
    (99) exp -> . RESTA exp
    (100) exp -> . NOT exp
    (101) exp -> . BNOT exp
    (102) exp -> . sizeof exp
    (103) exp -> . IZQPAR exp DERPAR
    (104) exp -> . IZQPAR TYPE DERPAR exp
    (105) exp -> . exp ASK exp DP exp
    (106) exp -> . DOUBLE
    (107) exp -> . INTEGER
    (108) exp -> . ident
    (109) exp -> . ident lacs
    (110) exp -> . STR
    (111) exp -> . IZQCOR lex DERCOR
    (76) ident -> . ID

    scanf           shift and go to state 35
    RESTA           shift and go to state 37
    NOT             shift and go to state 38
    BNOT            shift and go to state 39
    sizeof          shift and go to state 40
    IZQPAR          shift and go to state 36
    DOUBLE          shift and go to state 41
    INTEGER         shift and go to state 42
    STR             shift and go to state 43
    IZQCOR          shift and go to state 44
    ID              shift and go to state 17

    exp                            shift and go to state 186
    ident                          shift and go to state 33

state 167

    (59) para1 -> asig . PCOMA

    PCOMA           shift and go to state 187


state 168

    (60) para1 -> decla . PCOMA

    PCOMA           shift and go to state 188


state 169

    (41) asig -> ident . lacs IGUAL exp
    (42) asig -> ident . IGUAL exp
    (43) asig -> ident . lacs INCE
    (44) asig -> ident . INCE
    (45) asig -> ident . lacs DECRE
    (46) asig -> ident . DECRE
    (77) lacs -> . lacs acs
    (78) lacs -> . acs
    (79) acs -> . IZQLLAVE exp DERLLAVE
    (80) acs -> . PUNTO ID

    IGUAL           shift and go to state 110
    INCE            shift and go to state 111
    DECRE           shift and go to state 112
    IZQLLAVE        shift and go to state 24
    PUNTO           shift and go to state 25

    lacs                           shift and go to state 109
    acs                            shift and go to state 23

state 170

    (47) decla -> TYPE . ident lacs IGUAL exp
    (48) decla -> TYPE . ident IGUAL exp
    (76) ident -> . ID

    ID              shift and go to state 17

    ident                          shift and go to state 15

state 171

    (51) si -> if IZQPAR exp . DERPAR IZQCOR linst DERCOR lelsi els
    (52) si -> if IZQPAR exp . DERPAR IZQCOR linst DERCOR els
    (81) exp -> exp . SUMA exp
    (82) exp -> exp . RESTA exp
    (83) exp -> exp . MULTI exp
    (84) exp -> exp . DIV exp
    (85) exp -> exp . PORCENTAJE exp
    (86) exp -> exp . DIGUAL exp
    (87) exp -> exp . DESIGUAL exp
    (88) exp -> exp . MAYOR exp
    (89) exp -> exp . MENOR exp
    (90) exp -> exp . MAYORIGUAL exp
    (91) exp -> exp . MENORIGUAL exp
    (92) exp -> exp . AND exp
    (93) exp -> exp . OR exp
    (94) exp -> exp . BAND exp
    (95) exp -> exp . BOR exp
    (96) exp -> exp . BXOR exp
    (97) exp -> exp . BLEFT exp
    (98) exp -> exp . BRIGHT exp
    (105) exp -> exp . ASK exp DP exp

    DERPAR          shift and go to state 189
    SUMA            shift and go to state 80
    RESTA           shift and go to state 81
    MULTI           shift and go to state 82
    DIV             shift and go to state 83
    PORCENTAJE      shift and go to state 84
    DIGUAL          shift and go to state 85
    DESIGUAL        shift and go to state 86
    MAYOR           shift and go to state 87
    MENOR           shift and go to state 88
    MAYORIGUAL      shift and go to state 89
    MENORIGUAL      shift and go to state 90
    AND             shift and go to state 91
    OR              shift and go to state 92
    BAND            shift and go to state 93
    BOR             shift and go to state 94
    BXOR            shift and go to state 95
    BLEFT           shift and go to state 96
    BRIGHT          shift and go to state 97
    ASK             shift and go to state 98


state 172

    (49) mientras -> while IZQPAR exp . DERPAR IZQCOR linst DERCOR
    (81) exp -> exp . SUMA exp
    (82) exp -> exp . RESTA exp
    (83) exp -> exp . MULTI exp
    (84) exp -> exp . DIV exp
    (85) exp -> exp . PORCENTAJE exp
    (86) exp -> exp . DIGUAL exp
    (87) exp -> exp . DESIGUAL exp
    (88) exp -> exp . MAYOR exp
    (89) exp -> exp . MENOR exp
    (90) exp -> exp . MAYORIGUAL exp
    (91) exp -> exp . MENORIGUAL exp
    (92) exp -> exp . AND exp
    (93) exp -> exp . OR exp
    (94) exp -> exp . BAND exp
    (95) exp -> exp . BOR exp
    (96) exp -> exp . BXOR exp
    (97) exp -> exp . BLEFT exp
    (98) exp -> exp . BRIGHT exp
    (105) exp -> exp . ASK exp DP exp

    DERPAR          shift and go to state 190
    SUMA            shift and go to state 80
    RESTA           shift and go to state 81
    MULTI           shift and go to state 82
    DIV             shift and go to state 83
    PORCENTAJE      shift and go to state 84
    DIGUAL          shift and go to state 85
    DESIGUAL        shift and go to state 86
    MAYOR           shift and go to state 87
    MENOR           shift and go to state 88
    MAYORIGUAL      shift and go to state 89
    MENORIGUAL      shift and go to state 90
    AND             shift and go to state 91
    OR              shift and go to state 92
    BAND            shift and go to state 93
    BOR             shift and go to state 94
    BXOR            shift and go to state 95
    BLEFT           shift and go to state 96
    BRIGHT          shift and go to state 97
    ASK             shift and go to state 98


state 173

    (64) cual -> switch IZQPAR exp . DERPAR IZQCOR lcase def DERCOR
    (81) exp -> exp . SUMA exp
    (82) exp -> exp . RESTA exp
    (83) exp -> exp . MULTI exp
    (84) exp -> exp . DIV exp
    (85) exp -> exp . PORCENTAJE exp
    (86) exp -> exp . DIGUAL exp
    (87) exp -> exp . DESIGUAL exp
    (88) exp -> exp . MAYOR exp
    (89) exp -> exp . MENOR exp
    (90) exp -> exp . MAYORIGUAL exp
    (91) exp -> exp . MENORIGUAL exp
    (92) exp -> exp . AND exp
    (93) exp -> exp . OR exp
    (94) exp -> exp . BAND exp
    (95) exp -> exp . BOR exp
    (96) exp -> exp . BXOR exp
    (97) exp -> exp . BLEFT exp
    (98) exp -> exp . BRIGHT exp
    (105) exp -> exp . ASK exp DP exp

    DERPAR          shift and go to state 191
    SUMA            shift and go to state 80
    RESTA           shift and go to state 81
    MULTI           shift and go to state 82
    DIV             shift and go to state 83
    PORCENTAJE      shift and go to state 84
    DIGUAL          shift and go to state 85
    DESIGUAL        shift and go to state 86
    MAYOR           shift and go to state 87
    MENOR           shift and go to state 88
    MAYORIGUAL      shift and go to state 89
    MENORIGUAL      shift and go to state 90
    AND             shift and go to state 91
    OR              shift and go to state 92
    BAND            shift and go to state 93
    BOR             shift and go to state 94
    BXOR            shift and go to state 95
    BLEFT           shift and go to state 96
    BRIGHT          shift and go to state 97
    ASK             shift and go to state 98


state 174

    (50) dow -> do IZQCOR linst . DERCOR while IZQPAR exp DERPAR PCOMA
    (8) linst -> linst . inst
    (14) inst -> . asig PCOMA
    (15) inst -> . para
    (16) inst -> . si
    (17) inst -> . mientras
    (18) inst -> . cual
    (19) inst -> . call
    (20) inst -> . dow
    (21) inst -> . asg
    (22) inst -> . prin
    (23) inst -> . decla PCOMA
    (24) inst -> . tag
    (25) inst -> . gotot PCOMA
    (26) inst -> . brk PCOMA
    (27) inst -> . ret PCOMA
    (41) asig -> . ident lacs IGUAL exp
    (42) asig -> . ident IGUAL exp
    (43) asig -> . ident lacs INCE
    (44) asig -> . ident INCE
    (45) asig -> . ident lacs DECRE
    (46) asig -> . ident DECRE
    (58) para -> . for IZQPAR para1 exp PCOMA para2 DERPAR IZQCOR linst DERCOR
    (51) si -> . if IZQPAR exp DERPAR IZQCOR linst DERCOR lelsi els
    (52) si -> . if IZQPAR exp DERPAR IZQCOR linst DERCOR els
    (49) mientras -> . while IZQPAR exp DERPAR IZQCOR linst DERCOR
    (64) cual -> . switch IZQPAR exp DERPAR IZQCOR lcase def DERCOR
    (31) call -> . ident IZQPAR plex DERPAR PCOMA
    (50) dow -> . do IZQCOR linst DERCOR while IZQPAR exp DERPAR PCOMA
    (28) asg -> . TYPE lids PCOMA
    (71) prin -> . printf IZQPAR STR lexpr DERPAR PCOMA
    (72) prin -> . printf IZQPAR STR DERPAR PCOMA
    (47) decla -> . TYPE ident lacs IGUAL exp
    (48) decla -> . TYPE ident IGUAL exp
    (39) tag -> . ident DP
    (40) gotot -> . goto ident
    (32) brk -> . break
    (33) ret -> . return exp
    (34) ret -> . return
    (76) ident -> . ID
    (112) TYPE -> . int
    (113) TYPE -> . float
    (114) TYPE -> . char
    (115) TYPE -> . double
    (116) TYPE -> . void

    DERCOR          shift and go to state 192
    for             shift and go to state 64
    if              shift and go to state 65
    while           shift and go to state 66
    switch          shift and go to state 67
    do              shift and go to state 68
    printf          shift and go to state 70
    goto            shift and go to state 71
    break           shift and go to state 72
    return          shift and go to state 73
    ID              shift and go to state 17
    int             shift and go to state 7
    float           shift and go to state 8
    char            shift and go to state 9
    double          shift and go to state 10
    void            shift and go to state 11

    inst                           shift and go to state 116
    asig                           shift and go to state 50
    para                           shift and go to state 51
    si                             shift and go to state 52
    mientras                       shift and go to state 53
    cual                           shift and go to state 54
    call                           shift and go to state 55
    dow                            shift and go to state 56
    asg                            shift and go to state 57
    prin                           shift and go to state 58
    decla                          shift and go to state 59
    tag                            shift and go to state 60
    gotot                          shift and go to state 61
    brk                            shift and go to state 62
    ret                            shift and go to state 63
    ident                          shift and go to state 47
    TYPE                           shift and go to state 69

state 175

    (28) asg -> TYPE lids PCOMA .

    DERCOR          reduce using rule 28 (asg -> TYPE lids PCOMA .)
    for             reduce using rule 28 (asg -> TYPE lids PCOMA .)
    if              reduce using rule 28 (asg -> TYPE lids PCOMA .)
    while           reduce using rule 28 (asg -> TYPE lids PCOMA .)
    switch          reduce using rule 28 (asg -> TYPE lids PCOMA .)
    do              reduce using rule 28 (asg -> TYPE lids PCOMA .)
    printf          reduce using rule 28 (asg -> TYPE lids PCOMA .)
    goto            reduce using rule 28 (asg -> TYPE lids PCOMA .)
    break           reduce using rule 28 (asg -> TYPE lids PCOMA .)
    return          reduce using rule 28 (asg -> TYPE lids PCOMA .)
    ID              reduce using rule 28 (asg -> TYPE lids PCOMA .)
    int             reduce using rule 28 (asg -> TYPE lids PCOMA .)
    float           reduce using rule 28 (asg -> TYPE lids PCOMA .)
    char            reduce using rule 28 (asg -> TYPE lids PCOMA .)
    double          reduce using rule 28 (asg -> TYPE lids PCOMA .)
    void            reduce using rule 28 (asg -> TYPE lids PCOMA .)
    default         reduce using rule 28 (asg -> TYPE lids PCOMA .)
    case            reduce using rule 28 (asg -> TYPE lids PCOMA .)


state 176

    (29) lids -> lids COMA . ident
    (76) ident -> . ID

    ID              shift and go to state 17

    ident                          shift and go to state 193

state 177

    (71) prin -> printf IZQPAR STR . lexpr DERPAR PCOMA
    (72) prin -> printf IZQPAR STR . DERPAR PCOMA
    (74) lexpr -> . lexpr COMA exp
    (75) lexpr -> . COMA exp

    DERPAR          shift and go to state 195
    COMA            shift and go to state 196

    lexpr                          shift and go to state 194

state 178

    (4) body -> TYPE ID IZQPAR lpam DERPAR IZQCOR linst . DERCOR
    (8) linst -> linst . inst
    (14) inst -> . asig PCOMA
    (15) inst -> . para
    (16) inst -> . si
    (17) inst -> . mientras
    (18) inst -> . cual
    (19) inst -> . call
    (20) inst -> . dow
    (21) inst -> . asg
    (22) inst -> . prin
    (23) inst -> . decla PCOMA
    (24) inst -> . tag
    (25) inst -> . gotot PCOMA
    (26) inst -> . brk PCOMA
    (27) inst -> . ret PCOMA
    (41) asig -> . ident lacs IGUAL exp
    (42) asig -> . ident IGUAL exp
    (43) asig -> . ident lacs INCE
    (44) asig -> . ident INCE
    (45) asig -> . ident lacs DECRE
    (46) asig -> . ident DECRE
    (58) para -> . for IZQPAR para1 exp PCOMA para2 DERPAR IZQCOR linst DERCOR
    (51) si -> . if IZQPAR exp DERPAR IZQCOR linst DERCOR lelsi els
    (52) si -> . if IZQPAR exp DERPAR IZQCOR linst DERCOR els
    (49) mientras -> . while IZQPAR exp DERPAR IZQCOR linst DERCOR
    (64) cual -> . switch IZQPAR exp DERPAR IZQCOR lcase def DERCOR
    (31) call -> . ident IZQPAR plex DERPAR PCOMA
    (50) dow -> . do IZQCOR linst DERCOR while IZQPAR exp DERPAR PCOMA
    (28) asg -> . TYPE lids PCOMA
    (71) prin -> . printf IZQPAR STR lexpr DERPAR PCOMA
    (72) prin -> . printf IZQPAR STR DERPAR PCOMA
    (47) decla -> . TYPE ident lacs IGUAL exp
    (48) decla -> . TYPE ident IGUAL exp
    (39) tag -> . ident DP
    (40) gotot -> . goto ident
    (32) brk -> . break
    (33) ret -> . return exp
    (34) ret -> . return
    (76) ident -> . ID
    (112) TYPE -> . int
    (113) TYPE -> . float
    (114) TYPE -> . char
    (115) TYPE -> . double
    (116) TYPE -> . void

    DERCOR          shift and go to state 197
    for             shift and go to state 64
    if              shift and go to state 65
    while           shift and go to state 66
    switch          shift and go to state 67
    do              shift and go to state 68
    printf          shift and go to state 70
    goto            shift and go to state 71
    break           shift and go to state 72
    return          shift and go to state 73
    ID              shift and go to state 17
    int             shift and go to state 7
    float           shift and go to state 8
    char            shift and go to state 9
    double          shift and go to state 10
    void            shift and go to state 11

    TYPE                           shift and go to state 69
    inst                           shift and go to state 116
    asig                           shift and go to state 50
    para                           shift and go to state 51
    si                             shift and go to state 52
    mientras                       shift and go to state 53
    cual                           shift and go to state 54
    call                           shift and go to state 55
    dow                            shift and go to state 56
    asg                            shift and go to state 57
    prin                           shift and go to state 58
    decla                          shift and go to state 59
    tag                            shift and go to state 60
    gotot                          shift and go to state 61
    brk                            shift and go to state 62
    ret                            shift and go to state 63
    ident                          shift and go to state 47

state 179

    (12) lparam -> lparam COMA TYPE ident .

    COMA            reduce using rule 12 (lparam -> lparam COMA TYPE ident .)
    DERPAR          reduce using rule 12 (lparam -> lparam COMA TYPE ident .)


state 180

    (5) body -> TYPE main IZQPAR lpam DERPAR IZQCOR linst . DERCOR
    (8) linst -> linst . inst
    (14) inst -> . asig PCOMA
    (15) inst -> . para
    (16) inst -> . si
    (17) inst -> . mientras
    (18) inst -> . cual
    (19) inst -> . call
    (20) inst -> . dow
    (21) inst -> . asg
    (22) inst -> . prin
    (23) inst -> . decla PCOMA
    (24) inst -> . tag
    (25) inst -> . gotot PCOMA
    (26) inst -> . brk PCOMA
    (27) inst -> . ret PCOMA
    (41) asig -> . ident lacs IGUAL exp
    (42) asig -> . ident IGUAL exp
    (43) asig -> . ident lacs INCE
    (44) asig -> . ident INCE
    (45) asig -> . ident lacs DECRE
    (46) asig -> . ident DECRE
    (58) para -> . for IZQPAR para1 exp PCOMA para2 DERPAR IZQCOR linst DERCOR
    (51) si -> . if IZQPAR exp DERPAR IZQCOR linst DERCOR lelsi els
    (52) si -> . if IZQPAR exp DERPAR IZQCOR linst DERCOR els
    (49) mientras -> . while IZQPAR exp DERPAR IZQCOR linst DERCOR
    (64) cual -> . switch IZQPAR exp DERPAR IZQCOR lcase def DERCOR
    (31) call -> . ident IZQPAR plex DERPAR PCOMA
    (50) dow -> . do IZQCOR linst DERCOR while IZQPAR exp DERPAR PCOMA
    (28) asg -> . TYPE lids PCOMA
    (71) prin -> . printf IZQPAR STR lexpr DERPAR PCOMA
    (72) prin -> . printf IZQPAR STR DERPAR PCOMA
    (47) decla -> . TYPE ident lacs IGUAL exp
    (48) decla -> . TYPE ident IGUAL exp
    (39) tag -> . ident DP
    (40) gotot -> . goto ident
    (32) brk -> . break
    (33) ret -> . return exp
    (34) ret -> . return
    (76) ident -> . ID
    (112) TYPE -> . int
    (113) TYPE -> . float
    (114) TYPE -> . char
    (115) TYPE -> . double
    (116) TYPE -> . void

    DERCOR          shift and go to state 198
    for             shift and go to state 64
    if              shift and go to state 65
    while           shift and go to state 66
    switch          shift and go to state 67
    do              shift and go to state 68
    printf          shift and go to state 70
    goto            shift and go to state 71
    break           shift and go to state 72
    return          shift and go to state 73
    ID              shift and go to state 17
    int             shift and go to state 7
    float           shift and go to state 8
    char            shift and go to state 9
    double          shift and go to state 10
    void            shift and go to state 11

    TYPE                           shift and go to state 69
    inst                           shift and go to state 116
    asig                           shift and go to state 50
    para                           shift and go to state 51
    si                             shift and go to state 52
    mientras                       shift and go to state 53
    cual                           shift and go to state 54
    call                           shift and go to state 55
    dow                            shift and go to state 56
    asg                            shift and go to state 57
    prin                           shift and go to state 58
    decla                          shift and go to state 59
    tag                            shift and go to state 60
    gotot                          shift and go to state 61
    brk                            shift and go to state 62
    ret                            shift and go to state 63
    ident                          shift and go to state 47

state 181

    (105) exp -> exp ASK exp DP . exp
    (73) exp -> . scanf IZQPAR DERPAR
    (81) exp -> . exp SUMA exp
    (82) exp -> . exp RESTA exp
    (83) exp -> . exp MULTI exp
    (84) exp -> . exp DIV exp
    (85) exp -> . exp PORCENTAJE exp
    (86) exp -> . exp DIGUAL exp
    (87) exp -> . exp DESIGUAL exp
    (88) exp -> . exp MAYOR exp
    (89) exp -> . exp MENOR exp
    (90) exp -> . exp MAYORIGUAL exp
    (91) exp -> . exp MENORIGUAL exp
    (92) exp -> . exp AND exp
    (93) exp -> . exp OR exp
    (94) exp -> . exp BAND exp
    (95) exp -> . exp BOR exp
    (96) exp -> . exp BXOR exp
    (97) exp -> . exp BLEFT exp
    (98) exp -> . exp BRIGHT exp
    (99) exp -> . RESTA exp
    (100) exp -> . NOT exp
    (101) exp -> . BNOT exp
    (102) exp -> . sizeof exp
    (103) exp -> . IZQPAR exp DERPAR
    (104) exp -> . IZQPAR TYPE DERPAR exp
    (105) exp -> . exp ASK exp DP exp
    (106) exp -> . DOUBLE
    (107) exp -> . INTEGER
    (108) exp -> . ident
    (109) exp -> . ident lacs
    (110) exp -> . STR
    (111) exp -> . IZQCOR lex DERCOR
    (76) ident -> . ID

    scanf           shift and go to state 35
    RESTA           shift and go to state 37
    NOT             shift and go to state 38
    BNOT            shift and go to state 39
    sizeof          shift and go to state 40
    IZQPAR          shift and go to state 36
    DOUBLE          shift and go to state 41
    INTEGER         shift and go to state 42
    STR             shift and go to state 43
    IZQCOR          shift and go to state 44
    ID              shift and go to state 17

    exp                            shift and go to state 199
    ident                          shift and go to state 33

state 182

    (104) exp -> IZQPAR TYPE DERPAR exp .
    (81) exp -> exp . SUMA exp
    (82) exp -> exp . RESTA exp
    (83) exp -> exp . MULTI exp
    (84) exp -> exp . DIV exp
    (85) exp -> exp . PORCENTAJE exp
    (86) exp -> exp . DIGUAL exp
    (87) exp -> exp . DESIGUAL exp
    (88) exp -> exp . MAYOR exp
    (89) exp -> exp . MENOR exp
    (90) exp -> exp . MAYORIGUAL exp
    (91) exp -> exp . MENORIGUAL exp
    (92) exp -> exp . AND exp
    (93) exp -> exp . OR exp
    (94) exp -> exp . BAND exp
    (95) exp -> exp . BOR exp
    (96) exp -> exp . BXOR exp
    (97) exp -> exp . BLEFT exp
    (98) exp -> exp . BRIGHT exp
    (105) exp -> exp . ASK exp DP exp

  ! shift/reduce conflict for SUMA resolved as shift
  ! shift/reduce conflict for RESTA resolved as shift
  ! shift/reduce conflict for MULTI resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for PORCENTAJE resolved as shift
  ! shift/reduce conflict for DIGUAL resolved as shift
  ! shift/reduce conflict for DESIGUAL resolved as shift
  ! shift/reduce conflict for MAYOR resolved as shift
  ! shift/reduce conflict for MENOR resolved as shift
  ! shift/reduce conflict for MAYORIGUAL resolved as shift
  ! shift/reduce conflict for MENORIGUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for BAND resolved as shift
  ! shift/reduce conflict for BOR resolved as shift
  ! shift/reduce conflict for BXOR resolved as shift
  ! shift/reduce conflict for BLEFT resolved as shift
  ! shift/reduce conflict for BRIGHT resolved as shift
  ! shift/reduce conflict for ASK resolved as shift
    PCOMA           reduce using rule 104 (exp -> IZQPAR TYPE DERPAR exp .)
    DERPAR          reduce using rule 104 (exp -> IZQPAR TYPE DERPAR exp .)
    DERLLAVE        reduce using rule 104 (exp -> IZQPAR TYPE DERPAR exp .)
    DERCOR          reduce using rule 104 (exp -> IZQPAR TYPE DERPAR exp .)
    COMA            reduce using rule 104 (exp -> IZQPAR TYPE DERPAR exp .)
    DP              reduce using rule 104 (exp -> IZQPAR TYPE DERPAR exp .)
    SUMA            shift and go to state 80
    RESTA           shift and go to state 81
    MULTI           shift and go to state 82
    DIV             shift and go to state 83
    PORCENTAJE      shift and go to state 84
    DIGUAL          shift and go to state 85
    DESIGUAL        shift and go to state 86
    MAYOR           shift and go to state 87
    MENOR           shift and go to state 88
    MAYORIGUAL      shift and go to state 89
    MENORIGUAL      shift and go to state 90
    AND             shift and go to state 91
    OR              shift and go to state 92
    BAND            shift and go to state 93
    BOR             shift and go to state 94
    BXOR            shift and go to state 95
    BLEFT           shift and go to state 96
    BRIGHT          shift and go to state 97
    ASK             shift and go to state 98

  ! SUMA            [ reduce using rule 104 (exp -> IZQPAR TYPE DERPAR exp .) ]
  ! RESTA           [ reduce using rule 104 (exp -> IZQPAR TYPE DERPAR exp .) ]
  ! MULTI           [ reduce using rule 104 (exp -> IZQPAR TYPE DERPAR exp .) ]
  ! DIV             [ reduce using rule 104 (exp -> IZQPAR TYPE DERPAR exp .) ]
  ! PORCENTAJE      [ reduce using rule 104 (exp -> IZQPAR TYPE DERPAR exp .) ]
  ! DIGUAL          [ reduce using rule 104 (exp -> IZQPAR TYPE DERPAR exp .) ]
  ! DESIGUAL        [ reduce using rule 104 (exp -> IZQPAR TYPE DERPAR exp .) ]
  ! MAYOR           [ reduce using rule 104 (exp -> IZQPAR TYPE DERPAR exp .) ]
  ! MENOR           [ reduce using rule 104 (exp -> IZQPAR TYPE DERPAR exp .) ]
  ! MAYORIGUAL      [ reduce using rule 104 (exp -> IZQPAR TYPE DERPAR exp .) ]
  ! MENORIGUAL      [ reduce using rule 104 (exp -> IZQPAR TYPE DERPAR exp .) ]
  ! AND             [ reduce using rule 104 (exp -> IZQPAR TYPE DERPAR exp .) ]
  ! OR              [ reduce using rule 104 (exp -> IZQPAR TYPE DERPAR exp .) ]
  ! BAND            [ reduce using rule 104 (exp -> IZQPAR TYPE DERPAR exp .) ]
  ! BOR             [ reduce using rule 104 (exp -> IZQPAR TYPE DERPAR exp .) ]
  ! BXOR            [ reduce using rule 104 (exp -> IZQPAR TYPE DERPAR exp .) ]
  ! BLEFT           [ reduce using rule 104 (exp -> IZQPAR TYPE DERPAR exp .) ]
  ! BRIGHT          [ reduce using rule 104 (exp -> IZQPAR TYPE DERPAR exp .) ]
  ! ASK             [ reduce using rule 104 (exp -> IZQPAR TYPE DERPAR exp .) ]


state 183

    (37) lex -> lex COMA exp .
    (81) exp -> exp . SUMA exp
    (82) exp -> exp . RESTA exp
    (83) exp -> exp . MULTI exp
    (84) exp -> exp . DIV exp
    (85) exp -> exp . PORCENTAJE exp
    (86) exp -> exp . DIGUAL exp
    (87) exp -> exp . DESIGUAL exp
    (88) exp -> exp . MAYOR exp
    (89) exp -> exp . MENOR exp
    (90) exp -> exp . MAYORIGUAL exp
    (91) exp -> exp . MENORIGUAL exp
    (92) exp -> exp . AND exp
    (93) exp -> exp . OR exp
    (94) exp -> exp . BAND exp
    (95) exp -> exp . BOR exp
    (96) exp -> exp . BXOR exp
    (97) exp -> exp . BLEFT exp
    (98) exp -> exp . BRIGHT exp
    (105) exp -> exp . ASK exp DP exp

    DERCOR          reduce using rule 37 (lex -> lex COMA exp .)
    COMA            reduce using rule 37 (lex -> lex COMA exp .)
    DERPAR          reduce using rule 37 (lex -> lex COMA exp .)
    SUMA            shift and go to state 80
    RESTA           shift and go to state 81
    MULTI           shift and go to state 82
    DIV             shift and go to state 83
    PORCENTAJE      shift and go to state 84
    DIGUAL          shift and go to state 85
    DESIGUAL        shift and go to state 86
    MAYOR           shift and go to state 87
    MENOR           shift and go to state 88
    MAYORIGUAL      shift and go to state 89
    MENORIGUAL      shift and go to state 90
    AND             shift and go to state 91
    OR              shift and go to state 92
    BAND            shift and go to state 93
    BOR             shift and go to state 94
    BXOR            shift and go to state 95
    BLEFT           shift and go to state 96
    BRIGHT          shift and go to state 97
    ASK             shift and go to state 98


state 184

    (41) asig -> ident lacs IGUAL exp .
    (81) exp -> exp . SUMA exp
    (82) exp -> exp . RESTA exp
    (83) exp -> exp . MULTI exp
    (84) exp -> exp . DIV exp
    (85) exp -> exp . PORCENTAJE exp
    (86) exp -> exp . DIGUAL exp
    (87) exp -> exp . DESIGUAL exp
    (88) exp -> exp . MAYOR exp
    (89) exp -> exp . MENOR exp
    (90) exp -> exp . MAYORIGUAL exp
    (91) exp -> exp . MENORIGUAL exp
    (92) exp -> exp . AND exp
    (93) exp -> exp . OR exp
    (94) exp -> exp . BAND exp
    (95) exp -> exp . BOR exp
    (96) exp -> exp . BXOR exp
    (97) exp -> exp . BLEFT exp
    (98) exp -> exp . BRIGHT exp
    (105) exp -> exp . ASK exp DP exp

    PCOMA           reduce using rule 41 (asig -> ident lacs IGUAL exp .)
    DERPAR          reduce using rule 41 (asig -> ident lacs IGUAL exp .)
    SUMA            shift and go to state 80
    RESTA           shift and go to state 81
    MULTI           shift and go to state 82
    DIV             shift and go to state 83
    PORCENTAJE      shift and go to state 84
    DIGUAL          shift and go to state 85
    DESIGUAL        shift and go to state 86
    MAYOR           shift and go to state 87
    MENOR           shift and go to state 88
    MAYORIGUAL      shift and go to state 89
    MENORIGUAL      shift and go to state 90
    AND             shift and go to state 91
    OR              shift and go to state 92
    BAND            shift and go to state 93
    BOR             shift and go to state 94
    BXOR            shift and go to state 95
    BLEFT           shift and go to state 96
    BRIGHT          shift and go to state 97
    ASK             shift and go to state 98


state 185

    (31) call -> ident IZQPAR plex DERPAR . PCOMA

    PCOMA           shift and go to state 200


state 186

    (58) para -> for IZQPAR para1 exp . PCOMA para2 DERPAR IZQCOR linst DERCOR
    (81) exp -> exp . SUMA exp
    (82) exp -> exp . RESTA exp
    (83) exp -> exp . MULTI exp
    (84) exp -> exp . DIV exp
    (85) exp -> exp . PORCENTAJE exp
    (86) exp -> exp . DIGUAL exp
    (87) exp -> exp . DESIGUAL exp
    (88) exp -> exp . MAYOR exp
    (89) exp -> exp . MENOR exp
    (90) exp -> exp . MAYORIGUAL exp
    (91) exp -> exp . MENORIGUAL exp
    (92) exp -> exp . AND exp
    (93) exp -> exp . OR exp
    (94) exp -> exp . BAND exp
    (95) exp -> exp . BOR exp
    (96) exp -> exp . BXOR exp
    (97) exp -> exp . BLEFT exp
    (98) exp -> exp . BRIGHT exp
    (105) exp -> exp . ASK exp DP exp

    PCOMA           shift and go to state 201
    SUMA            shift and go to state 80
    RESTA           shift and go to state 81
    MULTI           shift and go to state 82
    DIV             shift and go to state 83
    PORCENTAJE      shift and go to state 84
    DIGUAL          shift and go to state 85
    DESIGUAL        shift and go to state 86
    MAYOR           shift and go to state 87
    MENOR           shift and go to state 88
    MAYORIGUAL      shift and go to state 89
    MENORIGUAL      shift and go to state 90
    AND             shift and go to state 91
    OR              shift and go to state 92
    BAND            shift and go to state 93
    BOR             shift and go to state 94
    BXOR            shift and go to state 95
    BLEFT           shift and go to state 96
    BRIGHT          shift and go to state 97
    ASK             shift and go to state 98


state 187

    (59) para1 -> asig PCOMA .

    scanf           reduce using rule 59 (para1 -> asig PCOMA .)
    RESTA           reduce using rule 59 (para1 -> asig PCOMA .)
    NOT             reduce using rule 59 (para1 -> asig PCOMA .)
    BNOT            reduce using rule 59 (para1 -> asig PCOMA .)
    sizeof          reduce using rule 59 (para1 -> asig PCOMA .)
    IZQPAR          reduce using rule 59 (para1 -> asig PCOMA .)
    DOUBLE          reduce using rule 59 (para1 -> asig PCOMA .)
    INTEGER         reduce using rule 59 (para1 -> asig PCOMA .)
    STR             reduce using rule 59 (para1 -> asig PCOMA .)
    IZQCOR          reduce using rule 59 (para1 -> asig PCOMA .)
    ID              reduce using rule 59 (para1 -> asig PCOMA .)


state 188

    (60) para1 -> decla PCOMA .

    scanf           reduce using rule 60 (para1 -> decla PCOMA .)
    RESTA           reduce using rule 60 (para1 -> decla PCOMA .)
    NOT             reduce using rule 60 (para1 -> decla PCOMA .)
    BNOT            reduce using rule 60 (para1 -> decla PCOMA .)
    sizeof          reduce using rule 60 (para1 -> decla PCOMA .)
    IZQPAR          reduce using rule 60 (para1 -> decla PCOMA .)
    DOUBLE          reduce using rule 60 (para1 -> decla PCOMA .)
    INTEGER         reduce using rule 60 (para1 -> decla PCOMA .)
    STR             reduce using rule 60 (para1 -> decla PCOMA .)
    IZQCOR          reduce using rule 60 (para1 -> decla PCOMA .)
    ID              reduce using rule 60 (para1 -> decla PCOMA .)


state 189

    (51) si -> if IZQPAR exp DERPAR . IZQCOR linst DERCOR lelsi els
    (52) si -> if IZQPAR exp DERPAR . IZQCOR linst DERCOR els

    IZQCOR          shift and go to state 202


state 190

    (49) mientras -> while IZQPAR exp DERPAR . IZQCOR linst DERCOR

    IZQCOR          shift and go to state 203


state 191

    (64) cual -> switch IZQPAR exp DERPAR . IZQCOR lcase def DERCOR

    IZQCOR          shift and go to state 204


state 192

    (50) dow -> do IZQCOR linst DERCOR . while IZQPAR exp DERPAR PCOMA

    while           shift and go to state 205


state 193

    (29) lids -> lids COMA ident .

    PCOMA           reduce using rule 29 (lids -> lids COMA ident .)
    COMA            reduce using rule 29 (lids -> lids COMA ident .)


state 194

    (71) prin -> printf IZQPAR STR lexpr . DERPAR PCOMA
    (74) lexpr -> lexpr . COMA exp

    DERPAR          shift and go to state 206
    COMA            shift and go to state 207


state 195

    (72) prin -> printf IZQPAR STR DERPAR . PCOMA

    PCOMA           shift and go to state 208


state 196

    (75) lexpr -> COMA . exp
    (73) exp -> . scanf IZQPAR DERPAR
    (81) exp -> . exp SUMA exp
    (82) exp -> . exp RESTA exp
    (83) exp -> . exp MULTI exp
    (84) exp -> . exp DIV exp
    (85) exp -> . exp PORCENTAJE exp
    (86) exp -> . exp DIGUAL exp
    (87) exp -> . exp DESIGUAL exp
    (88) exp -> . exp MAYOR exp
    (89) exp -> . exp MENOR exp
    (90) exp -> . exp MAYORIGUAL exp
    (91) exp -> . exp MENORIGUAL exp
    (92) exp -> . exp AND exp
    (93) exp -> . exp OR exp
    (94) exp -> . exp BAND exp
    (95) exp -> . exp BOR exp
    (96) exp -> . exp BXOR exp
    (97) exp -> . exp BLEFT exp
    (98) exp -> . exp BRIGHT exp
    (99) exp -> . RESTA exp
    (100) exp -> . NOT exp
    (101) exp -> . BNOT exp
    (102) exp -> . sizeof exp
    (103) exp -> . IZQPAR exp DERPAR
    (104) exp -> . IZQPAR TYPE DERPAR exp
    (105) exp -> . exp ASK exp DP exp
    (106) exp -> . DOUBLE
    (107) exp -> . INTEGER
    (108) exp -> . ident
    (109) exp -> . ident lacs
    (110) exp -> . STR
    (111) exp -> . IZQCOR lex DERCOR
    (76) ident -> . ID

    scanf           shift and go to state 35
    RESTA           shift and go to state 37
    NOT             shift and go to state 38
    BNOT            shift and go to state 39
    sizeof          shift and go to state 40
    IZQPAR          shift and go to state 36
    DOUBLE          shift and go to state 41
    INTEGER         shift and go to state 42
    STR             shift and go to state 43
    IZQCOR          shift and go to state 44
    ID              shift and go to state 17

    exp                            shift and go to state 209
    ident                          shift and go to state 33

state 197

    (4) body -> TYPE ID IZQPAR lpam DERPAR IZQCOR linst DERCOR .

    struct          reduce using rule 4 (body -> TYPE ID IZQPAR lpam DERPAR IZQCOR linst DERCOR .)
    int             reduce using rule 4 (body -> TYPE ID IZQPAR lpam DERPAR IZQCOR linst DERCOR .)
    float           reduce using rule 4 (body -> TYPE ID IZQPAR lpam DERPAR IZQCOR linst DERCOR .)
    char            reduce using rule 4 (body -> TYPE ID IZQPAR lpam DERPAR IZQCOR linst DERCOR .)
    double          reduce using rule 4 (body -> TYPE ID IZQPAR lpam DERPAR IZQCOR linst DERCOR .)
    void            reduce using rule 4 (body -> TYPE ID IZQPAR lpam DERPAR IZQCOR linst DERCOR .)
    $end            reduce using rule 4 (body -> TYPE ID IZQPAR lpam DERPAR IZQCOR linst DERCOR .)


state 198

    (5) body -> TYPE main IZQPAR lpam DERPAR IZQCOR linst DERCOR .

    struct          reduce using rule 5 (body -> TYPE main IZQPAR lpam DERPAR IZQCOR linst DERCOR .)
    int             reduce using rule 5 (body -> TYPE main IZQPAR lpam DERPAR IZQCOR linst DERCOR .)
    float           reduce using rule 5 (body -> TYPE main IZQPAR lpam DERPAR IZQCOR linst DERCOR .)
    char            reduce using rule 5 (body -> TYPE main IZQPAR lpam DERPAR IZQCOR linst DERCOR .)
    double          reduce using rule 5 (body -> TYPE main IZQPAR lpam DERPAR IZQCOR linst DERCOR .)
    void            reduce using rule 5 (body -> TYPE main IZQPAR lpam DERPAR IZQCOR linst DERCOR .)
    $end            reduce using rule 5 (body -> TYPE main IZQPAR lpam DERPAR IZQCOR linst DERCOR .)


state 199

    (105) exp -> exp ASK exp DP exp .
    (81) exp -> exp . SUMA exp
    (82) exp -> exp . RESTA exp
    (83) exp -> exp . MULTI exp
    (84) exp -> exp . DIV exp
    (85) exp -> exp . PORCENTAJE exp
    (86) exp -> exp . DIGUAL exp
    (87) exp -> exp . DESIGUAL exp
    (88) exp -> exp . MAYOR exp
    (89) exp -> exp . MENOR exp
    (90) exp -> exp . MAYORIGUAL exp
    (91) exp -> exp . MENORIGUAL exp
    (92) exp -> exp . AND exp
    (93) exp -> exp . OR exp
    (94) exp -> exp . BAND exp
    (95) exp -> exp . BOR exp
    (96) exp -> exp . BXOR exp
    (97) exp -> exp . BLEFT exp
    (98) exp -> exp . BRIGHT exp
    (105) exp -> exp . ASK exp DP exp

  ! shift/reduce conflict for SUMA resolved as shift
  ! shift/reduce conflict for RESTA resolved as shift
  ! shift/reduce conflict for MULTI resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for PORCENTAJE resolved as shift
  ! shift/reduce conflict for DIGUAL resolved as shift
  ! shift/reduce conflict for DESIGUAL resolved as shift
  ! shift/reduce conflict for MAYOR resolved as shift
  ! shift/reduce conflict for MENOR resolved as shift
  ! shift/reduce conflict for MAYORIGUAL resolved as shift
  ! shift/reduce conflict for MENORIGUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for BAND resolved as shift
  ! shift/reduce conflict for BOR resolved as shift
  ! shift/reduce conflict for BXOR resolved as shift
  ! shift/reduce conflict for BLEFT resolved as shift
  ! shift/reduce conflict for BRIGHT resolved as shift
  ! shift/reduce conflict for ASK resolved as shift
    PCOMA           reduce using rule 105 (exp -> exp ASK exp DP exp .)
    DERPAR          reduce using rule 105 (exp -> exp ASK exp DP exp .)
    DERLLAVE        reduce using rule 105 (exp -> exp ASK exp DP exp .)
    DERCOR          reduce using rule 105 (exp -> exp ASK exp DP exp .)
    COMA            reduce using rule 105 (exp -> exp ASK exp DP exp .)
    DP              reduce using rule 105 (exp -> exp ASK exp DP exp .)
    SUMA            shift and go to state 80
    RESTA           shift and go to state 81
    MULTI           shift and go to state 82
    DIV             shift and go to state 83
    PORCENTAJE      shift and go to state 84
    DIGUAL          shift and go to state 85
    DESIGUAL        shift and go to state 86
    MAYOR           shift and go to state 87
    MENOR           shift and go to state 88
    MAYORIGUAL      shift and go to state 89
    MENORIGUAL      shift and go to state 90
    AND             shift and go to state 91
    OR              shift and go to state 92
    BAND            shift and go to state 93
    BOR             shift and go to state 94
    BXOR            shift and go to state 95
    BLEFT           shift and go to state 96
    BRIGHT          shift and go to state 97
    ASK             shift and go to state 98

  ! SUMA            [ reduce using rule 105 (exp -> exp ASK exp DP exp .) ]
  ! RESTA           [ reduce using rule 105 (exp -> exp ASK exp DP exp .) ]
  ! MULTI           [ reduce using rule 105 (exp -> exp ASK exp DP exp .) ]
  ! DIV             [ reduce using rule 105 (exp -> exp ASK exp DP exp .) ]
  ! PORCENTAJE      [ reduce using rule 105 (exp -> exp ASK exp DP exp .) ]
  ! DIGUAL          [ reduce using rule 105 (exp -> exp ASK exp DP exp .) ]
  ! DESIGUAL        [ reduce using rule 105 (exp -> exp ASK exp DP exp .) ]
  ! MAYOR           [ reduce using rule 105 (exp -> exp ASK exp DP exp .) ]
  ! MENOR           [ reduce using rule 105 (exp -> exp ASK exp DP exp .) ]
  ! MAYORIGUAL      [ reduce using rule 105 (exp -> exp ASK exp DP exp .) ]
  ! MENORIGUAL      [ reduce using rule 105 (exp -> exp ASK exp DP exp .) ]
  ! AND             [ reduce using rule 105 (exp -> exp ASK exp DP exp .) ]
  ! OR              [ reduce using rule 105 (exp -> exp ASK exp DP exp .) ]
  ! BAND            [ reduce using rule 105 (exp -> exp ASK exp DP exp .) ]
  ! BOR             [ reduce using rule 105 (exp -> exp ASK exp DP exp .) ]
  ! BXOR            [ reduce using rule 105 (exp -> exp ASK exp DP exp .) ]
  ! BLEFT           [ reduce using rule 105 (exp -> exp ASK exp DP exp .) ]
  ! BRIGHT          [ reduce using rule 105 (exp -> exp ASK exp DP exp .) ]
  ! ASK             [ reduce using rule 105 (exp -> exp ASK exp DP exp .) ]


state 200

    (31) call -> ident IZQPAR plex DERPAR PCOMA .

    DERCOR          reduce using rule 31 (call -> ident IZQPAR plex DERPAR PCOMA .)
    for             reduce using rule 31 (call -> ident IZQPAR plex DERPAR PCOMA .)
    if              reduce using rule 31 (call -> ident IZQPAR plex DERPAR PCOMA .)
    while           reduce using rule 31 (call -> ident IZQPAR plex DERPAR PCOMA .)
    switch          reduce using rule 31 (call -> ident IZQPAR plex DERPAR PCOMA .)
    do              reduce using rule 31 (call -> ident IZQPAR plex DERPAR PCOMA .)
    printf          reduce using rule 31 (call -> ident IZQPAR plex DERPAR PCOMA .)
    goto            reduce using rule 31 (call -> ident IZQPAR plex DERPAR PCOMA .)
    break           reduce using rule 31 (call -> ident IZQPAR plex DERPAR PCOMA .)
    return          reduce using rule 31 (call -> ident IZQPAR plex DERPAR PCOMA .)
    ID              reduce using rule 31 (call -> ident IZQPAR plex DERPAR PCOMA .)
    int             reduce using rule 31 (call -> ident IZQPAR plex DERPAR PCOMA .)
    float           reduce using rule 31 (call -> ident IZQPAR plex DERPAR PCOMA .)
    char            reduce using rule 31 (call -> ident IZQPAR plex DERPAR PCOMA .)
    double          reduce using rule 31 (call -> ident IZQPAR plex DERPAR PCOMA .)
    void            reduce using rule 31 (call -> ident IZQPAR plex DERPAR PCOMA .)
    default         reduce using rule 31 (call -> ident IZQPAR plex DERPAR PCOMA .)
    case            reduce using rule 31 (call -> ident IZQPAR plex DERPAR PCOMA .)


state 201

    (58) para -> for IZQPAR para1 exp PCOMA . para2 DERPAR IZQCOR linst DERCOR
    (61) para2 -> . asig
    (62) para2 -> . decla
    (63) para2 -> . exp
    (41) asig -> . ident lacs IGUAL exp
    (42) asig -> . ident IGUAL exp
    (43) asig -> . ident lacs INCE
    (44) asig -> . ident INCE
    (45) asig -> . ident lacs DECRE
    (46) asig -> . ident DECRE
    (47) decla -> . TYPE ident lacs IGUAL exp
    (48) decla -> . TYPE ident IGUAL exp
    (73) exp -> . scanf IZQPAR DERPAR
    (81) exp -> . exp SUMA exp
    (82) exp -> . exp RESTA exp
    (83) exp -> . exp MULTI exp
    (84) exp -> . exp DIV exp
    (85) exp -> . exp PORCENTAJE exp
    (86) exp -> . exp DIGUAL exp
    (87) exp -> . exp DESIGUAL exp
    (88) exp -> . exp MAYOR exp
    (89) exp -> . exp MENOR exp
    (90) exp -> . exp MAYORIGUAL exp
    (91) exp -> . exp MENORIGUAL exp
    (92) exp -> . exp AND exp
    (93) exp -> . exp OR exp
    (94) exp -> . exp BAND exp
    (95) exp -> . exp BOR exp
    (96) exp -> . exp BXOR exp
    (97) exp -> . exp BLEFT exp
    (98) exp -> . exp BRIGHT exp
    (99) exp -> . RESTA exp
    (100) exp -> . NOT exp
    (101) exp -> . BNOT exp
    (102) exp -> . sizeof exp
    (103) exp -> . IZQPAR exp DERPAR
    (104) exp -> . IZQPAR TYPE DERPAR exp
    (105) exp -> . exp ASK exp DP exp
    (106) exp -> . DOUBLE
    (107) exp -> . INTEGER
    (108) exp -> . ident
    (109) exp -> . ident lacs
    (110) exp -> . STR
    (111) exp -> . IZQCOR lex DERCOR
    (76) ident -> . ID
    (112) TYPE -> . int
    (113) TYPE -> . float
    (114) TYPE -> . char
    (115) TYPE -> . double
    (116) TYPE -> . void

    scanf           shift and go to state 35
    RESTA           shift and go to state 37
    NOT             shift and go to state 38
    BNOT            shift and go to state 39
    sizeof          shift and go to state 40
    IZQPAR          shift and go to state 36
    DOUBLE          shift and go to state 41
    INTEGER         shift and go to state 42
    STR             shift and go to state 43
    IZQCOR          shift and go to state 44
    ID              shift and go to state 17
    int             shift and go to state 7
    float           shift and go to state 8
    char            shift and go to state 9
    double          shift and go to state 10
    void            shift and go to state 11

    exp                            shift and go to state 210
    para2                          shift and go to state 211
    asig                           shift and go to state 212
    decla                          shift and go to state 213
    ident                          shift and go to state 214
    TYPE                           shift and go to state 170

state 202

    (51) si -> if IZQPAR exp DERPAR IZQCOR . linst DERCOR lelsi els
    (52) si -> if IZQPAR exp DERPAR IZQCOR . linst DERCOR els
    (8) linst -> . linst inst
    (9) linst -> . inst
    (14) inst -> . asig PCOMA
    (15) inst -> . para
    (16) inst -> . si
    (17) inst -> . mientras
    (18) inst -> . cual
    (19) inst -> . call
    (20) inst -> . dow
    (21) inst -> . asg
    (22) inst -> . prin
    (23) inst -> . decla PCOMA
    (24) inst -> . tag
    (25) inst -> . gotot PCOMA
    (26) inst -> . brk PCOMA
    (27) inst -> . ret PCOMA
    (41) asig -> . ident lacs IGUAL exp
    (42) asig -> . ident IGUAL exp
    (43) asig -> . ident lacs INCE
    (44) asig -> . ident INCE
    (45) asig -> . ident lacs DECRE
    (46) asig -> . ident DECRE
    (58) para -> . for IZQPAR para1 exp PCOMA para2 DERPAR IZQCOR linst DERCOR
    (51) si -> . if IZQPAR exp DERPAR IZQCOR linst DERCOR lelsi els
    (52) si -> . if IZQPAR exp DERPAR IZQCOR linst DERCOR els
    (49) mientras -> . while IZQPAR exp DERPAR IZQCOR linst DERCOR
    (64) cual -> . switch IZQPAR exp DERPAR IZQCOR lcase def DERCOR
    (31) call -> . ident IZQPAR plex DERPAR PCOMA
    (50) dow -> . do IZQCOR linst DERCOR while IZQPAR exp DERPAR PCOMA
    (28) asg -> . TYPE lids PCOMA
    (71) prin -> . printf IZQPAR STR lexpr DERPAR PCOMA
    (72) prin -> . printf IZQPAR STR DERPAR PCOMA
    (47) decla -> . TYPE ident lacs IGUAL exp
    (48) decla -> . TYPE ident IGUAL exp
    (39) tag -> . ident DP
    (40) gotot -> . goto ident
    (32) brk -> . break
    (33) ret -> . return exp
    (34) ret -> . return
    (76) ident -> . ID
    (112) TYPE -> . int
    (113) TYPE -> . float
    (114) TYPE -> . char
    (115) TYPE -> . double
    (116) TYPE -> . void

    for             shift and go to state 64
    if              shift and go to state 65
    while           shift and go to state 66
    switch          shift and go to state 67
    do              shift and go to state 68
    printf          shift and go to state 70
    goto            shift and go to state 71
    break           shift and go to state 72
    return          shift and go to state 73
    ID              shift and go to state 17
    int             shift and go to state 7
    float           shift and go to state 8
    char            shift and go to state 9
    double          shift and go to state 10
    void            shift and go to state 11

    linst                          shift and go to state 215
    inst                           shift and go to state 49
    asig                           shift and go to state 50
    para                           shift and go to state 51
    si                             shift and go to state 52
    mientras                       shift and go to state 53
    cual                           shift and go to state 54
    call                           shift and go to state 55
    dow                            shift and go to state 56
    asg                            shift and go to state 57
    prin                           shift and go to state 58
    decla                          shift and go to state 59
    tag                            shift and go to state 60
    gotot                          shift and go to state 61
    brk                            shift and go to state 62
    ret                            shift and go to state 63
    ident                          shift and go to state 47
    TYPE                           shift and go to state 69

state 203

    (49) mientras -> while IZQPAR exp DERPAR IZQCOR . linst DERCOR
    (8) linst -> . linst inst
    (9) linst -> . inst
    (14) inst -> . asig PCOMA
    (15) inst -> . para
    (16) inst -> . si
    (17) inst -> . mientras
    (18) inst -> . cual
    (19) inst -> . call
    (20) inst -> . dow
    (21) inst -> . asg
    (22) inst -> . prin
    (23) inst -> . decla PCOMA
    (24) inst -> . tag
    (25) inst -> . gotot PCOMA
    (26) inst -> . brk PCOMA
    (27) inst -> . ret PCOMA
    (41) asig -> . ident lacs IGUAL exp
    (42) asig -> . ident IGUAL exp
    (43) asig -> . ident lacs INCE
    (44) asig -> . ident INCE
    (45) asig -> . ident lacs DECRE
    (46) asig -> . ident DECRE
    (58) para -> . for IZQPAR para1 exp PCOMA para2 DERPAR IZQCOR linst DERCOR
    (51) si -> . if IZQPAR exp DERPAR IZQCOR linst DERCOR lelsi els
    (52) si -> . if IZQPAR exp DERPAR IZQCOR linst DERCOR els
    (49) mientras -> . while IZQPAR exp DERPAR IZQCOR linst DERCOR
    (64) cual -> . switch IZQPAR exp DERPAR IZQCOR lcase def DERCOR
    (31) call -> . ident IZQPAR plex DERPAR PCOMA
    (50) dow -> . do IZQCOR linst DERCOR while IZQPAR exp DERPAR PCOMA
    (28) asg -> . TYPE lids PCOMA
    (71) prin -> . printf IZQPAR STR lexpr DERPAR PCOMA
    (72) prin -> . printf IZQPAR STR DERPAR PCOMA
    (47) decla -> . TYPE ident lacs IGUAL exp
    (48) decla -> . TYPE ident IGUAL exp
    (39) tag -> . ident DP
    (40) gotot -> . goto ident
    (32) brk -> . break
    (33) ret -> . return exp
    (34) ret -> . return
    (76) ident -> . ID
    (112) TYPE -> . int
    (113) TYPE -> . float
    (114) TYPE -> . char
    (115) TYPE -> . double
    (116) TYPE -> . void

    for             shift and go to state 64
    if              shift and go to state 65
    while           shift and go to state 66
    switch          shift and go to state 67
    do              shift and go to state 68
    printf          shift and go to state 70
    goto            shift and go to state 71
    break           shift and go to state 72
    return          shift and go to state 73
    ID              shift and go to state 17
    int             shift and go to state 7
    float           shift and go to state 8
    char            shift and go to state 9
    double          shift and go to state 10
    void            shift and go to state 11

    linst                          shift and go to state 216
    inst                           shift and go to state 49
    asig                           shift and go to state 50
    para                           shift and go to state 51
    si                             shift and go to state 52
    mientras                       shift and go to state 53
    cual                           shift and go to state 54
    call                           shift and go to state 55
    dow                            shift and go to state 56
    asg                            shift and go to state 57
    prin                           shift and go to state 58
    decla                          shift and go to state 59
    tag                            shift and go to state 60
    gotot                          shift and go to state 61
    brk                            shift and go to state 62
    ret                            shift and go to state 63
    ident                          shift and go to state 47
    TYPE                           shift and go to state 69

state 204

    (64) cual -> switch IZQPAR exp DERPAR IZQCOR . lcase def DERCOR
    (65) lcase -> . lcase caso
    (66) lcase -> . caso
    (67) caso -> . case ID DP linst break PCOMA
    (68) caso -> . case ID DP linst

    case            shift and go to state 219

    lcase                          shift and go to state 217
    caso                           shift and go to state 218

state 205

    (50) dow -> do IZQCOR linst DERCOR while . IZQPAR exp DERPAR PCOMA

    IZQPAR          shift and go to state 220


state 206

    (71) prin -> printf IZQPAR STR lexpr DERPAR . PCOMA

    PCOMA           shift and go to state 221


state 207

    (74) lexpr -> lexpr COMA . exp
    (73) exp -> . scanf IZQPAR DERPAR
    (81) exp -> . exp SUMA exp
    (82) exp -> . exp RESTA exp
    (83) exp -> . exp MULTI exp
    (84) exp -> . exp DIV exp
    (85) exp -> . exp PORCENTAJE exp
    (86) exp -> . exp DIGUAL exp
    (87) exp -> . exp DESIGUAL exp
    (88) exp -> . exp MAYOR exp
    (89) exp -> . exp MENOR exp
    (90) exp -> . exp MAYORIGUAL exp
    (91) exp -> . exp MENORIGUAL exp
    (92) exp -> . exp AND exp
    (93) exp -> . exp OR exp
    (94) exp -> . exp BAND exp
    (95) exp -> . exp BOR exp
    (96) exp -> . exp BXOR exp
    (97) exp -> . exp BLEFT exp
    (98) exp -> . exp BRIGHT exp
    (99) exp -> . RESTA exp
    (100) exp -> . NOT exp
    (101) exp -> . BNOT exp
    (102) exp -> . sizeof exp
    (103) exp -> . IZQPAR exp DERPAR
    (104) exp -> . IZQPAR TYPE DERPAR exp
    (105) exp -> . exp ASK exp DP exp
    (106) exp -> . DOUBLE
    (107) exp -> . INTEGER
    (108) exp -> . ident
    (109) exp -> . ident lacs
    (110) exp -> . STR
    (111) exp -> . IZQCOR lex DERCOR
    (76) ident -> . ID

    scanf           shift and go to state 35
    RESTA           shift and go to state 37
    NOT             shift and go to state 38
    BNOT            shift and go to state 39
    sizeof          shift and go to state 40
    IZQPAR          shift and go to state 36
    DOUBLE          shift and go to state 41
    INTEGER         shift and go to state 42
    STR             shift and go to state 43
    IZQCOR          shift and go to state 44
    ID              shift and go to state 17

    exp                            shift and go to state 222
    ident                          shift and go to state 33

state 208

    (72) prin -> printf IZQPAR STR DERPAR PCOMA .

    DERCOR          reduce using rule 72 (prin -> printf IZQPAR STR DERPAR PCOMA .)
    for             reduce using rule 72 (prin -> printf IZQPAR STR DERPAR PCOMA .)
    if              reduce using rule 72 (prin -> printf IZQPAR STR DERPAR PCOMA .)
    while           reduce using rule 72 (prin -> printf IZQPAR STR DERPAR PCOMA .)
    switch          reduce using rule 72 (prin -> printf IZQPAR STR DERPAR PCOMA .)
    do              reduce using rule 72 (prin -> printf IZQPAR STR DERPAR PCOMA .)
    printf          reduce using rule 72 (prin -> printf IZQPAR STR DERPAR PCOMA .)
    goto            reduce using rule 72 (prin -> printf IZQPAR STR DERPAR PCOMA .)
    break           reduce using rule 72 (prin -> printf IZQPAR STR DERPAR PCOMA .)
    return          reduce using rule 72 (prin -> printf IZQPAR STR DERPAR PCOMA .)
    ID              reduce using rule 72 (prin -> printf IZQPAR STR DERPAR PCOMA .)
    int             reduce using rule 72 (prin -> printf IZQPAR STR DERPAR PCOMA .)
    float           reduce using rule 72 (prin -> printf IZQPAR STR DERPAR PCOMA .)
    char            reduce using rule 72 (prin -> printf IZQPAR STR DERPAR PCOMA .)
    double          reduce using rule 72 (prin -> printf IZQPAR STR DERPAR PCOMA .)
    void            reduce using rule 72 (prin -> printf IZQPAR STR DERPAR PCOMA .)
    default         reduce using rule 72 (prin -> printf IZQPAR STR DERPAR PCOMA .)
    case            reduce using rule 72 (prin -> printf IZQPAR STR DERPAR PCOMA .)


state 209

    (75) lexpr -> COMA exp .
    (81) exp -> exp . SUMA exp
    (82) exp -> exp . RESTA exp
    (83) exp -> exp . MULTI exp
    (84) exp -> exp . DIV exp
    (85) exp -> exp . PORCENTAJE exp
    (86) exp -> exp . DIGUAL exp
    (87) exp -> exp . DESIGUAL exp
    (88) exp -> exp . MAYOR exp
    (89) exp -> exp . MENOR exp
    (90) exp -> exp . MAYORIGUAL exp
    (91) exp -> exp . MENORIGUAL exp
    (92) exp -> exp . AND exp
    (93) exp -> exp . OR exp
    (94) exp -> exp . BAND exp
    (95) exp -> exp . BOR exp
    (96) exp -> exp . BXOR exp
    (97) exp -> exp . BLEFT exp
    (98) exp -> exp . BRIGHT exp
    (105) exp -> exp . ASK exp DP exp

    DERPAR          reduce using rule 75 (lexpr -> COMA exp .)
    COMA            reduce using rule 75 (lexpr -> COMA exp .)
    SUMA            shift and go to state 80
    RESTA           shift and go to state 81
    MULTI           shift and go to state 82
    DIV             shift and go to state 83
    PORCENTAJE      shift and go to state 84
    DIGUAL          shift and go to state 85
    DESIGUAL        shift and go to state 86
    MAYOR           shift and go to state 87
    MENOR           shift and go to state 88
    MAYORIGUAL      shift and go to state 89
    MENORIGUAL      shift and go to state 90
    AND             shift and go to state 91
    OR              shift and go to state 92
    BAND            shift and go to state 93
    BOR             shift and go to state 94
    BXOR            shift and go to state 95
    BLEFT           shift and go to state 96
    BRIGHT          shift and go to state 97
    ASK             shift and go to state 98


state 210

    (63) para2 -> exp .
    (81) exp -> exp . SUMA exp
    (82) exp -> exp . RESTA exp
    (83) exp -> exp . MULTI exp
    (84) exp -> exp . DIV exp
    (85) exp -> exp . PORCENTAJE exp
    (86) exp -> exp . DIGUAL exp
    (87) exp -> exp . DESIGUAL exp
    (88) exp -> exp . MAYOR exp
    (89) exp -> exp . MENOR exp
    (90) exp -> exp . MAYORIGUAL exp
    (91) exp -> exp . MENORIGUAL exp
    (92) exp -> exp . AND exp
    (93) exp -> exp . OR exp
    (94) exp -> exp . BAND exp
    (95) exp -> exp . BOR exp
    (96) exp -> exp . BXOR exp
    (97) exp -> exp . BLEFT exp
    (98) exp -> exp . BRIGHT exp
    (105) exp -> exp . ASK exp DP exp

    DERPAR          reduce using rule 63 (para2 -> exp .)
    SUMA            shift and go to state 80
    RESTA           shift and go to state 81
    MULTI           shift and go to state 82
    DIV             shift and go to state 83
    PORCENTAJE      shift and go to state 84
    DIGUAL          shift and go to state 85
    DESIGUAL        shift and go to state 86
    MAYOR           shift and go to state 87
    MENOR           shift and go to state 88
    MAYORIGUAL      shift and go to state 89
    MENORIGUAL      shift and go to state 90
    AND             shift and go to state 91
    OR              shift and go to state 92
    BAND            shift and go to state 93
    BOR             shift and go to state 94
    BXOR            shift and go to state 95
    BLEFT           shift and go to state 96
    BRIGHT          shift and go to state 97
    ASK             shift and go to state 98


state 211

    (58) para -> for IZQPAR para1 exp PCOMA para2 . DERPAR IZQCOR linst DERCOR

    DERPAR          shift and go to state 223


state 212

    (61) para2 -> asig .

    DERPAR          reduce using rule 61 (para2 -> asig .)


state 213

    (62) para2 -> decla .

    DERPAR          reduce using rule 62 (para2 -> decla .)


state 214

    (41) asig -> ident . lacs IGUAL exp
    (42) asig -> ident . IGUAL exp
    (43) asig -> ident . lacs INCE
    (44) asig -> ident . INCE
    (45) asig -> ident . lacs DECRE
    (46) asig -> ident . DECRE
    (108) exp -> ident .
    (109) exp -> ident . lacs
    (77) lacs -> . lacs acs
    (78) lacs -> . acs
    (79) acs -> . IZQLLAVE exp DERLLAVE
    (80) acs -> . PUNTO ID

    IGUAL           shift and go to state 110
    INCE            shift and go to state 111
    DECRE           shift and go to state 112
    SUMA            reduce using rule 108 (exp -> ident .)
    RESTA           reduce using rule 108 (exp -> ident .)
    MULTI           reduce using rule 108 (exp -> ident .)
    DIV             reduce using rule 108 (exp -> ident .)
    PORCENTAJE      reduce using rule 108 (exp -> ident .)
    DIGUAL          reduce using rule 108 (exp -> ident .)
    DESIGUAL        reduce using rule 108 (exp -> ident .)
    MAYOR           reduce using rule 108 (exp -> ident .)
    MENOR           reduce using rule 108 (exp -> ident .)
    MAYORIGUAL      reduce using rule 108 (exp -> ident .)
    MENORIGUAL      reduce using rule 108 (exp -> ident .)
    AND             reduce using rule 108 (exp -> ident .)
    OR              reduce using rule 108 (exp -> ident .)
    BAND            reduce using rule 108 (exp -> ident .)
    BOR             reduce using rule 108 (exp -> ident .)
    BXOR            reduce using rule 108 (exp -> ident .)
    BLEFT           reduce using rule 108 (exp -> ident .)
    BRIGHT          reduce using rule 108 (exp -> ident .)
    ASK             reduce using rule 108 (exp -> ident .)
    DERPAR          reduce using rule 108 (exp -> ident .)
    IZQLLAVE        shift and go to state 24
    PUNTO           shift and go to state 25

    lacs                           shift and go to state 224
    acs                            shift and go to state 23

state 215

    (51) si -> if IZQPAR exp DERPAR IZQCOR linst . DERCOR lelsi els
    (52) si -> if IZQPAR exp DERPAR IZQCOR linst . DERCOR els
    (8) linst -> linst . inst
    (14) inst -> . asig PCOMA
    (15) inst -> . para
    (16) inst -> . si
    (17) inst -> . mientras
    (18) inst -> . cual
    (19) inst -> . call
    (20) inst -> . dow
    (21) inst -> . asg
    (22) inst -> . prin
    (23) inst -> . decla PCOMA
    (24) inst -> . tag
    (25) inst -> . gotot PCOMA
    (26) inst -> . brk PCOMA
    (27) inst -> . ret PCOMA
    (41) asig -> . ident lacs IGUAL exp
    (42) asig -> . ident IGUAL exp
    (43) asig -> . ident lacs INCE
    (44) asig -> . ident INCE
    (45) asig -> . ident lacs DECRE
    (46) asig -> . ident DECRE
    (58) para -> . for IZQPAR para1 exp PCOMA para2 DERPAR IZQCOR linst DERCOR
    (51) si -> . if IZQPAR exp DERPAR IZQCOR linst DERCOR lelsi els
    (52) si -> . if IZQPAR exp DERPAR IZQCOR linst DERCOR els
    (49) mientras -> . while IZQPAR exp DERPAR IZQCOR linst DERCOR
    (64) cual -> . switch IZQPAR exp DERPAR IZQCOR lcase def DERCOR
    (31) call -> . ident IZQPAR plex DERPAR PCOMA
    (50) dow -> . do IZQCOR linst DERCOR while IZQPAR exp DERPAR PCOMA
    (28) asg -> . TYPE lids PCOMA
    (71) prin -> . printf IZQPAR STR lexpr DERPAR PCOMA
    (72) prin -> . printf IZQPAR STR DERPAR PCOMA
    (47) decla -> . TYPE ident lacs IGUAL exp
    (48) decla -> . TYPE ident IGUAL exp
    (39) tag -> . ident DP
    (40) gotot -> . goto ident
    (32) brk -> . break
    (33) ret -> . return exp
    (34) ret -> . return
    (76) ident -> . ID
    (112) TYPE -> . int
    (113) TYPE -> . float
    (114) TYPE -> . char
    (115) TYPE -> . double
    (116) TYPE -> . void

    DERCOR          shift and go to state 225
    for             shift and go to state 64
    if              shift and go to state 65
    while           shift and go to state 66
    switch          shift and go to state 67
    do              shift and go to state 68
    printf          shift and go to state 70
    goto            shift and go to state 71
    break           shift and go to state 72
    return          shift and go to state 73
    ID              shift and go to state 17
    int             shift and go to state 7
    float           shift and go to state 8
    char            shift and go to state 9
    double          shift and go to state 10
    void            shift and go to state 11

    inst                           shift and go to state 116
    asig                           shift and go to state 50
    para                           shift and go to state 51
    si                             shift and go to state 52
    mientras                       shift and go to state 53
    cual                           shift and go to state 54
    call                           shift and go to state 55
    dow                            shift and go to state 56
    asg                            shift and go to state 57
    prin                           shift and go to state 58
    decla                          shift and go to state 59
    tag                            shift and go to state 60
    gotot                          shift and go to state 61
    brk                            shift and go to state 62
    ret                            shift and go to state 63
    ident                          shift and go to state 47
    TYPE                           shift and go to state 69

state 216

    (49) mientras -> while IZQPAR exp DERPAR IZQCOR linst . DERCOR
    (8) linst -> linst . inst
    (14) inst -> . asig PCOMA
    (15) inst -> . para
    (16) inst -> . si
    (17) inst -> . mientras
    (18) inst -> . cual
    (19) inst -> . call
    (20) inst -> . dow
    (21) inst -> . asg
    (22) inst -> . prin
    (23) inst -> . decla PCOMA
    (24) inst -> . tag
    (25) inst -> . gotot PCOMA
    (26) inst -> . brk PCOMA
    (27) inst -> . ret PCOMA
    (41) asig -> . ident lacs IGUAL exp
    (42) asig -> . ident IGUAL exp
    (43) asig -> . ident lacs INCE
    (44) asig -> . ident INCE
    (45) asig -> . ident lacs DECRE
    (46) asig -> . ident DECRE
    (58) para -> . for IZQPAR para1 exp PCOMA para2 DERPAR IZQCOR linst DERCOR
    (51) si -> . if IZQPAR exp DERPAR IZQCOR linst DERCOR lelsi els
    (52) si -> . if IZQPAR exp DERPAR IZQCOR linst DERCOR els
    (49) mientras -> . while IZQPAR exp DERPAR IZQCOR linst DERCOR
    (64) cual -> . switch IZQPAR exp DERPAR IZQCOR lcase def DERCOR
    (31) call -> . ident IZQPAR plex DERPAR PCOMA
    (50) dow -> . do IZQCOR linst DERCOR while IZQPAR exp DERPAR PCOMA
    (28) asg -> . TYPE lids PCOMA
    (71) prin -> . printf IZQPAR STR lexpr DERPAR PCOMA
    (72) prin -> . printf IZQPAR STR DERPAR PCOMA
    (47) decla -> . TYPE ident lacs IGUAL exp
    (48) decla -> . TYPE ident IGUAL exp
    (39) tag -> . ident DP
    (40) gotot -> . goto ident
    (32) brk -> . break
    (33) ret -> . return exp
    (34) ret -> . return
    (76) ident -> . ID
    (112) TYPE -> . int
    (113) TYPE -> . float
    (114) TYPE -> . char
    (115) TYPE -> . double
    (116) TYPE -> . void

    DERCOR          shift and go to state 226
    for             shift and go to state 64
    if              shift and go to state 65
    while           shift and go to state 66
    switch          shift and go to state 67
    do              shift and go to state 68
    printf          shift and go to state 70
    goto            shift and go to state 71
    break           shift and go to state 72
    return          shift and go to state 73
    ID              shift and go to state 17
    int             shift and go to state 7
    float           shift and go to state 8
    char            shift and go to state 9
    double          shift and go to state 10
    void            shift and go to state 11

    inst                           shift and go to state 116
    asig                           shift and go to state 50
    para                           shift and go to state 51
    si                             shift and go to state 52
    mientras                       shift and go to state 53
    cual                           shift and go to state 54
    call                           shift and go to state 55
    dow                            shift and go to state 56
    asg                            shift and go to state 57
    prin                           shift and go to state 58
    decla                          shift and go to state 59
    tag                            shift and go to state 60
    gotot                          shift and go to state 61
    brk                            shift and go to state 62
    ret                            shift and go to state 63
    ident                          shift and go to state 47
    TYPE                           shift and go to state 69

state 217

    (64) cual -> switch IZQPAR exp DERPAR IZQCOR lcase . def DERCOR
    (65) lcase -> lcase . caso
    (69) def -> . default DP linst break PCOMA
    (70) def -> .
    (67) caso -> . case ID DP linst break PCOMA
    (68) caso -> . case ID DP linst

    default         shift and go to state 229
    DERCOR          reduce using rule 70 (def -> .)
    case            shift and go to state 219

    def                            shift and go to state 227
    caso                           shift and go to state 228

state 218

    (66) lcase -> caso .

    default         reduce using rule 66 (lcase -> caso .)
    case            reduce using rule 66 (lcase -> caso .)
    DERCOR          reduce using rule 66 (lcase -> caso .)


state 219

    (67) caso -> case . ID DP linst break PCOMA
    (68) caso -> case . ID DP linst

    ID              shift and go to state 230


state 220

    (50) dow -> do IZQCOR linst DERCOR while IZQPAR . exp DERPAR PCOMA
    (73) exp -> . scanf IZQPAR DERPAR
    (81) exp -> . exp SUMA exp
    (82) exp -> . exp RESTA exp
    (83) exp -> . exp MULTI exp
    (84) exp -> . exp DIV exp
    (85) exp -> . exp PORCENTAJE exp
    (86) exp -> . exp DIGUAL exp
    (87) exp -> . exp DESIGUAL exp
    (88) exp -> . exp MAYOR exp
    (89) exp -> . exp MENOR exp
    (90) exp -> . exp MAYORIGUAL exp
    (91) exp -> . exp MENORIGUAL exp
    (92) exp -> . exp AND exp
    (93) exp -> . exp OR exp
    (94) exp -> . exp BAND exp
    (95) exp -> . exp BOR exp
    (96) exp -> . exp BXOR exp
    (97) exp -> . exp BLEFT exp
    (98) exp -> . exp BRIGHT exp
    (99) exp -> . RESTA exp
    (100) exp -> . NOT exp
    (101) exp -> . BNOT exp
    (102) exp -> . sizeof exp
    (103) exp -> . IZQPAR exp DERPAR
    (104) exp -> . IZQPAR TYPE DERPAR exp
    (105) exp -> . exp ASK exp DP exp
    (106) exp -> . DOUBLE
    (107) exp -> . INTEGER
    (108) exp -> . ident
    (109) exp -> . ident lacs
    (110) exp -> . STR
    (111) exp -> . IZQCOR lex DERCOR
    (76) ident -> . ID

    scanf           shift and go to state 35
    RESTA           shift and go to state 37
    NOT             shift and go to state 38
    BNOT            shift and go to state 39
    sizeof          shift and go to state 40
    IZQPAR          shift and go to state 36
    DOUBLE          shift and go to state 41
    INTEGER         shift and go to state 42
    STR             shift and go to state 43
    IZQCOR          shift and go to state 44
    ID              shift and go to state 17

    exp                            shift and go to state 231
    ident                          shift and go to state 33

state 221

    (71) prin -> printf IZQPAR STR lexpr DERPAR PCOMA .

    DERCOR          reduce using rule 71 (prin -> printf IZQPAR STR lexpr DERPAR PCOMA .)
    for             reduce using rule 71 (prin -> printf IZQPAR STR lexpr DERPAR PCOMA .)
    if              reduce using rule 71 (prin -> printf IZQPAR STR lexpr DERPAR PCOMA .)
    while           reduce using rule 71 (prin -> printf IZQPAR STR lexpr DERPAR PCOMA .)
    switch          reduce using rule 71 (prin -> printf IZQPAR STR lexpr DERPAR PCOMA .)
    do              reduce using rule 71 (prin -> printf IZQPAR STR lexpr DERPAR PCOMA .)
    printf          reduce using rule 71 (prin -> printf IZQPAR STR lexpr DERPAR PCOMA .)
    goto            reduce using rule 71 (prin -> printf IZQPAR STR lexpr DERPAR PCOMA .)
    break           reduce using rule 71 (prin -> printf IZQPAR STR lexpr DERPAR PCOMA .)
    return          reduce using rule 71 (prin -> printf IZQPAR STR lexpr DERPAR PCOMA .)
    ID              reduce using rule 71 (prin -> printf IZQPAR STR lexpr DERPAR PCOMA .)
    int             reduce using rule 71 (prin -> printf IZQPAR STR lexpr DERPAR PCOMA .)
    float           reduce using rule 71 (prin -> printf IZQPAR STR lexpr DERPAR PCOMA .)
    char            reduce using rule 71 (prin -> printf IZQPAR STR lexpr DERPAR PCOMA .)
    double          reduce using rule 71 (prin -> printf IZQPAR STR lexpr DERPAR PCOMA .)
    void            reduce using rule 71 (prin -> printf IZQPAR STR lexpr DERPAR PCOMA .)
    default         reduce using rule 71 (prin -> printf IZQPAR STR lexpr DERPAR PCOMA .)
    case            reduce using rule 71 (prin -> printf IZQPAR STR lexpr DERPAR PCOMA .)


state 222

    (74) lexpr -> lexpr COMA exp .
    (81) exp -> exp . SUMA exp
    (82) exp -> exp . RESTA exp
    (83) exp -> exp . MULTI exp
    (84) exp -> exp . DIV exp
    (85) exp -> exp . PORCENTAJE exp
    (86) exp -> exp . DIGUAL exp
    (87) exp -> exp . DESIGUAL exp
    (88) exp -> exp . MAYOR exp
    (89) exp -> exp . MENOR exp
    (90) exp -> exp . MAYORIGUAL exp
    (91) exp -> exp . MENORIGUAL exp
    (92) exp -> exp . AND exp
    (93) exp -> exp . OR exp
    (94) exp -> exp . BAND exp
    (95) exp -> exp . BOR exp
    (96) exp -> exp . BXOR exp
    (97) exp -> exp . BLEFT exp
    (98) exp -> exp . BRIGHT exp
    (105) exp -> exp . ASK exp DP exp

    DERPAR          reduce using rule 74 (lexpr -> lexpr COMA exp .)
    COMA            reduce using rule 74 (lexpr -> lexpr COMA exp .)
    SUMA            shift and go to state 80
    RESTA           shift and go to state 81
    MULTI           shift and go to state 82
    DIV             shift and go to state 83
    PORCENTAJE      shift and go to state 84
    DIGUAL          shift and go to state 85
    DESIGUAL        shift and go to state 86
    MAYOR           shift and go to state 87
    MENOR           shift and go to state 88
    MAYORIGUAL      shift and go to state 89
    MENORIGUAL      shift and go to state 90
    AND             shift and go to state 91
    OR              shift and go to state 92
    BAND            shift and go to state 93
    BOR             shift and go to state 94
    BXOR            shift and go to state 95
    BLEFT           shift and go to state 96
    BRIGHT          shift and go to state 97
    ASK             shift and go to state 98


state 223

    (58) para -> for IZQPAR para1 exp PCOMA para2 DERPAR . IZQCOR linst DERCOR

    IZQCOR          shift and go to state 232


state 224

    (41) asig -> ident lacs . IGUAL exp
    (43) asig -> ident lacs . INCE
    (45) asig -> ident lacs . DECRE
    (109) exp -> ident lacs .
    (77) lacs -> lacs . acs
    (79) acs -> . IZQLLAVE exp DERLLAVE
    (80) acs -> . PUNTO ID

    IGUAL           shift and go to state 159
    INCE            shift and go to state 160
    DECRE           shift and go to state 161
    SUMA            reduce using rule 109 (exp -> ident lacs .)
    RESTA           reduce using rule 109 (exp -> ident lacs .)
    MULTI           reduce using rule 109 (exp -> ident lacs .)
    DIV             reduce using rule 109 (exp -> ident lacs .)
    PORCENTAJE      reduce using rule 109 (exp -> ident lacs .)
    DIGUAL          reduce using rule 109 (exp -> ident lacs .)
    DESIGUAL        reduce using rule 109 (exp -> ident lacs .)
    MAYOR           reduce using rule 109 (exp -> ident lacs .)
    MENOR           reduce using rule 109 (exp -> ident lacs .)
    MAYORIGUAL      reduce using rule 109 (exp -> ident lacs .)
    MENORIGUAL      reduce using rule 109 (exp -> ident lacs .)
    AND             reduce using rule 109 (exp -> ident lacs .)
    OR              reduce using rule 109 (exp -> ident lacs .)
    BAND            reduce using rule 109 (exp -> ident lacs .)
    BOR             reduce using rule 109 (exp -> ident lacs .)
    BXOR            reduce using rule 109 (exp -> ident lacs .)
    BLEFT           reduce using rule 109 (exp -> ident lacs .)
    BRIGHT          reduce using rule 109 (exp -> ident lacs .)
    ASK             reduce using rule 109 (exp -> ident lacs .)
    DERPAR          reduce using rule 109 (exp -> ident lacs .)
    IZQLLAVE        shift and go to state 24
    PUNTO           shift and go to state 25

    acs                            shift and go to state 32

state 225

    (51) si -> if IZQPAR exp DERPAR IZQCOR linst DERCOR . lelsi els
    (52) si -> if IZQPAR exp DERPAR IZQCOR linst DERCOR . els
    (53) lelsi -> . lelsi elsi
    (54) lelsi -> . elsi
    (56) els -> . else IZQCOR linst DERCOR
    (57) els -> .
    (55) elsi -> . else if IZQPAR exp DERPAR IZQCOR linst DERCOR

    else            shift and go to state 236
    DERCOR          reduce using rule 57 (els -> .)
    for             reduce using rule 57 (els -> .)
    if              reduce using rule 57 (els -> .)
    while           reduce using rule 57 (els -> .)
    switch          reduce using rule 57 (els -> .)
    do              reduce using rule 57 (els -> .)
    printf          reduce using rule 57 (els -> .)
    goto            reduce using rule 57 (els -> .)
    break           reduce using rule 57 (els -> .)
    return          reduce using rule 57 (els -> .)
    ID              reduce using rule 57 (els -> .)
    int             reduce using rule 57 (els -> .)
    float           reduce using rule 57 (els -> .)
    char            reduce using rule 57 (els -> .)
    double          reduce using rule 57 (els -> .)
    void            reduce using rule 57 (els -> .)
    default         reduce using rule 57 (els -> .)
    case            reduce using rule 57 (els -> .)

    lelsi                          shift and go to state 233
    els                            shift and go to state 234
    elsi                           shift and go to state 235

state 226

    (49) mientras -> while IZQPAR exp DERPAR IZQCOR linst DERCOR .

    DERCOR          reduce using rule 49 (mientras -> while IZQPAR exp DERPAR IZQCOR linst DERCOR .)
    for             reduce using rule 49 (mientras -> while IZQPAR exp DERPAR IZQCOR linst DERCOR .)
    if              reduce using rule 49 (mientras -> while IZQPAR exp DERPAR IZQCOR linst DERCOR .)
    while           reduce using rule 49 (mientras -> while IZQPAR exp DERPAR IZQCOR linst DERCOR .)
    switch          reduce using rule 49 (mientras -> while IZQPAR exp DERPAR IZQCOR linst DERCOR .)
    do              reduce using rule 49 (mientras -> while IZQPAR exp DERPAR IZQCOR linst DERCOR .)
    printf          reduce using rule 49 (mientras -> while IZQPAR exp DERPAR IZQCOR linst DERCOR .)
    goto            reduce using rule 49 (mientras -> while IZQPAR exp DERPAR IZQCOR linst DERCOR .)
    break           reduce using rule 49 (mientras -> while IZQPAR exp DERPAR IZQCOR linst DERCOR .)
    return          reduce using rule 49 (mientras -> while IZQPAR exp DERPAR IZQCOR linst DERCOR .)
    ID              reduce using rule 49 (mientras -> while IZQPAR exp DERPAR IZQCOR linst DERCOR .)
    int             reduce using rule 49 (mientras -> while IZQPAR exp DERPAR IZQCOR linst DERCOR .)
    float           reduce using rule 49 (mientras -> while IZQPAR exp DERPAR IZQCOR linst DERCOR .)
    char            reduce using rule 49 (mientras -> while IZQPAR exp DERPAR IZQCOR linst DERCOR .)
    double          reduce using rule 49 (mientras -> while IZQPAR exp DERPAR IZQCOR linst DERCOR .)
    void            reduce using rule 49 (mientras -> while IZQPAR exp DERPAR IZQCOR linst DERCOR .)
    default         reduce using rule 49 (mientras -> while IZQPAR exp DERPAR IZQCOR linst DERCOR .)
    case            reduce using rule 49 (mientras -> while IZQPAR exp DERPAR IZQCOR linst DERCOR .)


state 227

    (64) cual -> switch IZQPAR exp DERPAR IZQCOR lcase def . DERCOR

    DERCOR          shift and go to state 237


state 228

    (65) lcase -> lcase caso .

    default         reduce using rule 65 (lcase -> lcase caso .)
    case            reduce using rule 65 (lcase -> lcase caso .)
    DERCOR          reduce using rule 65 (lcase -> lcase caso .)


state 229

    (69) def -> default . DP linst break PCOMA

    DP              shift and go to state 238


state 230

    (67) caso -> case ID . DP linst break PCOMA
    (68) caso -> case ID . DP linst

    DP              shift and go to state 239


state 231

    (50) dow -> do IZQCOR linst DERCOR while IZQPAR exp . DERPAR PCOMA
    (81) exp -> exp . SUMA exp
    (82) exp -> exp . RESTA exp
    (83) exp -> exp . MULTI exp
    (84) exp -> exp . DIV exp
    (85) exp -> exp . PORCENTAJE exp
    (86) exp -> exp . DIGUAL exp
    (87) exp -> exp . DESIGUAL exp
    (88) exp -> exp . MAYOR exp
    (89) exp -> exp . MENOR exp
    (90) exp -> exp . MAYORIGUAL exp
    (91) exp -> exp . MENORIGUAL exp
    (92) exp -> exp . AND exp
    (93) exp -> exp . OR exp
    (94) exp -> exp . BAND exp
    (95) exp -> exp . BOR exp
    (96) exp -> exp . BXOR exp
    (97) exp -> exp . BLEFT exp
    (98) exp -> exp . BRIGHT exp
    (105) exp -> exp . ASK exp DP exp

    DERPAR          shift and go to state 240
    SUMA            shift and go to state 80
    RESTA           shift and go to state 81
    MULTI           shift and go to state 82
    DIV             shift and go to state 83
    PORCENTAJE      shift and go to state 84
    DIGUAL          shift and go to state 85
    DESIGUAL        shift and go to state 86
    MAYOR           shift and go to state 87
    MENOR           shift and go to state 88
    MAYORIGUAL      shift and go to state 89
    MENORIGUAL      shift and go to state 90
    AND             shift and go to state 91
    OR              shift and go to state 92
    BAND            shift and go to state 93
    BOR             shift and go to state 94
    BXOR            shift and go to state 95
    BLEFT           shift and go to state 96
    BRIGHT          shift and go to state 97
    ASK             shift and go to state 98


state 232

    (58) para -> for IZQPAR para1 exp PCOMA para2 DERPAR IZQCOR . linst DERCOR
    (8) linst -> . linst inst
    (9) linst -> . inst
    (14) inst -> . asig PCOMA
    (15) inst -> . para
    (16) inst -> . si
    (17) inst -> . mientras
    (18) inst -> . cual
    (19) inst -> . call
    (20) inst -> . dow
    (21) inst -> . asg
    (22) inst -> . prin
    (23) inst -> . decla PCOMA
    (24) inst -> . tag
    (25) inst -> . gotot PCOMA
    (26) inst -> . brk PCOMA
    (27) inst -> . ret PCOMA
    (41) asig -> . ident lacs IGUAL exp
    (42) asig -> . ident IGUAL exp
    (43) asig -> . ident lacs INCE
    (44) asig -> . ident INCE
    (45) asig -> . ident lacs DECRE
    (46) asig -> . ident DECRE
    (58) para -> . for IZQPAR para1 exp PCOMA para2 DERPAR IZQCOR linst DERCOR
    (51) si -> . if IZQPAR exp DERPAR IZQCOR linst DERCOR lelsi els
    (52) si -> . if IZQPAR exp DERPAR IZQCOR linst DERCOR els
    (49) mientras -> . while IZQPAR exp DERPAR IZQCOR linst DERCOR
    (64) cual -> . switch IZQPAR exp DERPAR IZQCOR lcase def DERCOR
    (31) call -> . ident IZQPAR plex DERPAR PCOMA
    (50) dow -> . do IZQCOR linst DERCOR while IZQPAR exp DERPAR PCOMA
    (28) asg -> . TYPE lids PCOMA
    (71) prin -> . printf IZQPAR STR lexpr DERPAR PCOMA
    (72) prin -> . printf IZQPAR STR DERPAR PCOMA
    (47) decla -> . TYPE ident lacs IGUAL exp
    (48) decla -> . TYPE ident IGUAL exp
    (39) tag -> . ident DP
    (40) gotot -> . goto ident
    (32) brk -> . break
    (33) ret -> . return exp
    (34) ret -> . return
    (76) ident -> . ID
    (112) TYPE -> . int
    (113) TYPE -> . float
    (114) TYPE -> . char
    (115) TYPE -> . double
    (116) TYPE -> . void

    for             shift and go to state 64
    if              shift and go to state 65
    while           shift and go to state 66
    switch          shift and go to state 67
    do              shift and go to state 68
    printf          shift and go to state 70
    goto            shift and go to state 71
    break           shift and go to state 72
    return          shift and go to state 73
    ID              shift and go to state 17
    int             shift and go to state 7
    float           shift and go to state 8
    char            shift and go to state 9
    double          shift and go to state 10
    void            shift and go to state 11

    linst                          shift and go to state 241
    inst                           shift and go to state 49
    asig                           shift and go to state 50
    para                           shift and go to state 51
    si                             shift and go to state 52
    mientras                       shift and go to state 53
    cual                           shift and go to state 54
    call                           shift and go to state 55
    dow                            shift and go to state 56
    asg                            shift and go to state 57
    prin                           shift and go to state 58
    decla                          shift and go to state 59
    tag                            shift and go to state 60
    gotot                          shift and go to state 61
    brk                            shift and go to state 62
    ret                            shift and go to state 63
    ident                          shift and go to state 47
    TYPE                           shift and go to state 69

state 233

    (51) si -> if IZQPAR exp DERPAR IZQCOR linst DERCOR lelsi . els
    (53) lelsi -> lelsi . elsi
    (56) els -> . else IZQCOR linst DERCOR
    (57) els -> .
    (55) elsi -> . else if IZQPAR exp DERPAR IZQCOR linst DERCOR

    else            shift and go to state 236
    DERCOR          reduce using rule 57 (els -> .)
    for             reduce using rule 57 (els -> .)
    if              reduce using rule 57 (els -> .)
    while           reduce using rule 57 (els -> .)
    switch          reduce using rule 57 (els -> .)
    do              reduce using rule 57 (els -> .)
    printf          reduce using rule 57 (els -> .)
    goto            reduce using rule 57 (els -> .)
    break           reduce using rule 57 (els -> .)
    return          reduce using rule 57 (els -> .)
    ID              reduce using rule 57 (els -> .)
    int             reduce using rule 57 (els -> .)
    float           reduce using rule 57 (els -> .)
    char            reduce using rule 57 (els -> .)
    double          reduce using rule 57 (els -> .)
    void            reduce using rule 57 (els -> .)
    default         reduce using rule 57 (els -> .)
    case            reduce using rule 57 (els -> .)

    els                            shift and go to state 242
    elsi                           shift and go to state 243

state 234

    (52) si -> if IZQPAR exp DERPAR IZQCOR linst DERCOR els .

    DERCOR          reduce using rule 52 (si -> if IZQPAR exp DERPAR IZQCOR linst DERCOR els .)
    for             reduce using rule 52 (si -> if IZQPAR exp DERPAR IZQCOR linst DERCOR els .)
    if              reduce using rule 52 (si -> if IZQPAR exp DERPAR IZQCOR linst DERCOR els .)
    while           reduce using rule 52 (si -> if IZQPAR exp DERPAR IZQCOR linst DERCOR els .)
    switch          reduce using rule 52 (si -> if IZQPAR exp DERPAR IZQCOR linst DERCOR els .)
    do              reduce using rule 52 (si -> if IZQPAR exp DERPAR IZQCOR linst DERCOR els .)
    printf          reduce using rule 52 (si -> if IZQPAR exp DERPAR IZQCOR linst DERCOR els .)
    goto            reduce using rule 52 (si -> if IZQPAR exp DERPAR IZQCOR linst DERCOR els .)
    break           reduce using rule 52 (si -> if IZQPAR exp DERPAR IZQCOR linst DERCOR els .)
    return          reduce using rule 52 (si -> if IZQPAR exp DERPAR IZQCOR linst DERCOR els .)
    ID              reduce using rule 52 (si -> if IZQPAR exp DERPAR IZQCOR linst DERCOR els .)
    int             reduce using rule 52 (si -> if IZQPAR exp DERPAR IZQCOR linst DERCOR els .)
    float           reduce using rule 52 (si -> if IZQPAR exp DERPAR IZQCOR linst DERCOR els .)
    char            reduce using rule 52 (si -> if IZQPAR exp DERPAR IZQCOR linst DERCOR els .)
    double          reduce using rule 52 (si -> if IZQPAR exp DERPAR IZQCOR linst DERCOR els .)
    void            reduce using rule 52 (si -> if IZQPAR exp DERPAR IZQCOR linst DERCOR els .)
    default         reduce using rule 52 (si -> if IZQPAR exp DERPAR IZQCOR linst DERCOR els .)
    case            reduce using rule 52 (si -> if IZQPAR exp DERPAR IZQCOR linst DERCOR els .)


state 235

    (54) lelsi -> elsi .

    else            reduce using rule 54 (lelsi -> elsi .)
    DERCOR          reduce using rule 54 (lelsi -> elsi .)
    for             reduce using rule 54 (lelsi -> elsi .)
    if              reduce using rule 54 (lelsi -> elsi .)
    while           reduce using rule 54 (lelsi -> elsi .)
    switch          reduce using rule 54 (lelsi -> elsi .)
    do              reduce using rule 54 (lelsi -> elsi .)
    printf          reduce using rule 54 (lelsi -> elsi .)
    goto            reduce using rule 54 (lelsi -> elsi .)
    break           reduce using rule 54 (lelsi -> elsi .)
    return          reduce using rule 54 (lelsi -> elsi .)
    ID              reduce using rule 54 (lelsi -> elsi .)
    int             reduce using rule 54 (lelsi -> elsi .)
    float           reduce using rule 54 (lelsi -> elsi .)
    char            reduce using rule 54 (lelsi -> elsi .)
    double          reduce using rule 54 (lelsi -> elsi .)
    void            reduce using rule 54 (lelsi -> elsi .)
    default         reduce using rule 54 (lelsi -> elsi .)
    case            reduce using rule 54 (lelsi -> elsi .)


state 236

    (56) els -> else . IZQCOR linst DERCOR
    (55) elsi -> else . if IZQPAR exp DERPAR IZQCOR linst DERCOR

    IZQCOR          shift and go to state 244
    if              shift and go to state 245


state 237

    (64) cual -> switch IZQPAR exp DERPAR IZQCOR lcase def DERCOR .

    DERCOR          reduce using rule 64 (cual -> switch IZQPAR exp DERPAR IZQCOR lcase def DERCOR .)
    for             reduce using rule 64 (cual -> switch IZQPAR exp DERPAR IZQCOR lcase def DERCOR .)
    if              reduce using rule 64 (cual -> switch IZQPAR exp DERPAR IZQCOR lcase def DERCOR .)
    while           reduce using rule 64 (cual -> switch IZQPAR exp DERPAR IZQCOR lcase def DERCOR .)
    switch          reduce using rule 64 (cual -> switch IZQPAR exp DERPAR IZQCOR lcase def DERCOR .)
    do              reduce using rule 64 (cual -> switch IZQPAR exp DERPAR IZQCOR lcase def DERCOR .)
    printf          reduce using rule 64 (cual -> switch IZQPAR exp DERPAR IZQCOR lcase def DERCOR .)
    goto            reduce using rule 64 (cual -> switch IZQPAR exp DERPAR IZQCOR lcase def DERCOR .)
    break           reduce using rule 64 (cual -> switch IZQPAR exp DERPAR IZQCOR lcase def DERCOR .)
    return          reduce using rule 64 (cual -> switch IZQPAR exp DERPAR IZQCOR lcase def DERCOR .)
    ID              reduce using rule 64 (cual -> switch IZQPAR exp DERPAR IZQCOR lcase def DERCOR .)
    int             reduce using rule 64 (cual -> switch IZQPAR exp DERPAR IZQCOR lcase def DERCOR .)
    float           reduce using rule 64 (cual -> switch IZQPAR exp DERPAR IZQCOR lcase def DERCOR .)
    char            reduce using rule 64 (cual -> switch IZQPAR exp DERPAR IZQCOR lcase def DERCOR .)
    double          reduce using rule 64 (cual -> switch IZQPAR exp DERPAR IZQCOR lcase def DERCOR .)
    void            reduce using rule 64 (cual -> switch IZQPAR exp DERPAR IZQCOR lcase def DERCOR .)
    default         reduce using rule 64 (cual -> switch IZQPAR exp DERPAR IZQCOR lcase def DERCOR .)
    case            reduce using rule 64 (cual -> switch IZQPAR exp DERPAR IZQCOR lcase def DERCOR .)


state 238

    (69) def -> default DP . linst break PCOMA
    (8) linst -> . linst inst
    (9) linst -> . inst
    (14) inst -> . asig PCOMA
    (15) inst -> . para
    (16) inst -> . si
    (17) inst -> . mientras
    (18) inst -> . cual
    (19) inst -> . call
    (20) inst -> . dow
    (21) inst -> . asg
    (22) inst -> . prin
    (23) inst -> . decla PCOMA
    (24) inst -> . tag
    (25) inst -> . gotot PCOMA
    (26) inst -> . brk PCOMA
    (27) inst -> . ret PCOMA
    (41) asig -> . ident lacs IGUAL exp
    (42) asig -> . ident IGUAL exp
    (43) asig -> . ident lacs INCE
    (44) asig -> . ident INCE
    (45) asig -> . ident lacs DECRE
    (46) asig -> . ident DECRE
    (58) para -> . for IZQPAR para1 exp PCOMA para2 DERPAR IZQCOR linst DERCOR
    (51) si -> . if IZQPAR exp DERPAR IZQCOR linst DERCOR lelsi els
    (52) si -> . if IZQPAR exp DERPAR IZQCOR linst DERCOR els
    (49) mientras -> . while IZQPAR exp DERPAR IZQCOR linst DERCOR
    (64) cual -> . switch IZQPAR exp DERPAR IZQCOR lcase def DERCOR
    (31) call -> . ident IZQPAR plex DERPAR PCOMA
    (50) dow -> . do IZQCOR linst DERCOR while IZQPAR exp DERPAR PCOMA
    (28) asg -> . TYPE lids PCOMA
    (71) prin -> . printf IZQPAR STR lexpr DERPAR PCOMA
    (72) prin -> . printf IZQPAR STR DERPAR PCOMA
    (47) decla -> . TYPE ident lacs IGUAL exp
    (48) decla -> . TYPE ident IGUAL exp
    (39) tag -> . ident DP
    (40) gotot -> . goto ident
    (32) brk -> . break
    (33) ret -> . return exp
    (34) ret -> . return
    (76) ident -> . ID
    (112) TYPE -> . int
    (113) TYPE -> . float
    (114) TYPE -> . char
    (115) TYPE -> . double
    (116) TYPE -> . void

    for             shift and go to state 64
    if              shift and go to state 65
    while           shift and go to state 66
    switch          shift and go to state 67
    do              shift and go to state 68
    printf          shift and go to state 70
    goto            shift and go to state 71
    break           shift and go to state 72
    return          shift and go to state 73
    ID              shift and go to state 17
    int             shift and go to state 7
    float           shift and go to state 8
    char            shift and go to state 9
    double          shift and go to state 10
    void            shift and go to state 11

    linst                          shift and go to state 246
    inst                           shift and go to state 49
    asig                           shift and go to state 50
    para                           shift and go to state 51
    si                             shift and go to state 52
    mientras                       shift and go to state 53
    cual                           shift and go to state 54
    call                           shift and go to state 55
    dow                            shift and go to state 56
    asg                            shift and go to state 57
    prin                           shift and go to state 58
    decla                          shift and go to state 59
    tag                            shift and go to state 60
    gotot                          shift and go to state 61
    brk                            shift and go to state 62
    ret                            shift and go to state 63
    ident                          shift and go to state 47
    TYPE                           shift and go to state 69

state 239

    (67) caso -> case ID DP . linst break PCOMA
    (68) caso -> case ID DP . linst
    (8) linst -> . linst inst
    (9) linst -> . inst
    (14) inst -> . asig PCOMA
    (15) inst -> . para
    (16) inst -> . si
    (17) inst -> . mientras
    (18) inst -> . cual
    (19) inst -> . call
    (20) inst -> . dow
    (21) inst -> . asg
    (22) inst -> . prin
    (23) inst -> . decla PCOMA
    (24) inst -> . tag
    (25) inst -> . gotot PCOMA
    (26) inst -> . brk PCOMA
    (27) inst -> . ret PCOMA
    (41) asig -> . ident lacs IGUAL exp
    (42) asig -> . ident IGUAL exp
    (43) asig -> . ident lacs INCE
    (44) asig -> . ident INCE
    (45) asig -> . ident lacs DECRE
    (46) asig -> . ident DECRE
    (58) para -> . for IZQPAR para1 exp PCOMA para2 DERPAR IZQCOR linst DERCOR
    (51) si -> . if IZQPAR exp DERPAR IZQCOR linst DERCOR lelsi els
    (52) si -> . if IZQPAR exp DERPAR IZQCOR linst DERCOR els
    (49) mientras -> . while IZQPAR exp DERPAR IZQCOR linst DERCOR
    (64) cual -> . switch IZQPAR exp DERPAR IZQCOR lcase def DERCOR
    (31) call -> . ident IZQPAR plex DERPAR PCOMA
    (50) dow -> . do IZQCOR linst DERCOR while IZQPAR exp DERPAR PCOMA
    (28) asg -> . TYPE lids PCOMA
    (71) prin -> . printf IZQPAR STR lexpr DERPAR PCOMA
    (72) prin -> . printf IZQPAR STR DERPAR PCOMA
    (47) decla -> . TYPE ident lacs IGUAL exp
    (48) decla -> . TYPE ident IGUAL exp
    (39) tag -> . ident DP
    (40) gotot -> . goto ident
    (32) brk -> . break
    (33) ret -> . return exp
    (34) ret -> . return
    (76) ident -> . ID
    (112) TYPE -> . int
    (113) TYPE -> . float
    (114) TYPE -> . char
    (115) TYPE -> . double
    (116) TYPE -> . void

    for             shift and go to state 64
    if              shift and go to state 65
    while           shift and go to state 66
    switch          shift and go to state 67
    do              shift and go to state 68
    printf          shift and go to state 70
    goto            shift and go to state 71
    break           shift and go to state 72
    return          shift and go to state 73
    ID              shift and go to state 17
    int             shift and go to state 7
    float           shift and go to state 8
    char            shift and go to state 9
    double          shift and go to state 10
    void            shift and go to state 11

    linst                          shift and go to state 247
    inst                           shift and go to state 49
    asig                           shift and go to state 50
    para                           shift and go to state 51
    si                             shift and go to state 52
    mientras                       shift and go to state 53
    cual                           shift and go to state 54
    call                           shift and go to state 55
    dow                            shift and go to state 56
    asg                            shift and go to state 57
    prin                           shift and go to state 58
    decla                          shift and go to state 59
    tag                            shift and go to state 60
    gotot                          shift and go to state 61
    brk                            shift and go to state 62
    ret                            shift and go to state 63
    ident                          shift and go to state 47
    TYPE                           shift and go to state 69

state 240

    (50) dow -> do IZQCOR linst DERCOR while IZQPAR exp DERPAR . PCOMA

    PCOMA           shift and go to state 248


state 241

    (58) para -> for IZQPAR para1 exp PCOMA para2 DERPAR IZQCOR linst . DERCOR
    (8) linst -> linst . inst
    (14) inst -> . asig PCOMA
    (15) inst -> . para
    (16) inst -> . si
    (17) inst -> . mientras
    (18) inst -> . cual
    (19) inst -> . call
    (20) inst -> . dow
    (21) inst -> . asg
    (22) inst -> . prin
    (23) inst -> . decla PCOMA
    (24) inst -> . tag
    (25) inst -> . gotot PCOMA
    (26) inst -> . brk PCOMA
    (27) inst -> . ret PCOMA
    (41) asig -> . ident lacs IGUAL exp
    (42) asig -> . ident IGUAL exp
    (43) asig -> . ident lacs INCE
    (44) asig -> . ident INCE
    (45) asig -> . ident lacs DECRE
    (46) asig -> . ident DECRE
    (58) para -> . for IZQPAR para1 exp PCOMA para2 DERPAR IZQCOR linst DERCOR
    (51) si -> . if IZQPAR exp DERPAR IZQCOR linst DERCOR lelsi els
    (52) si -> . if IZQPAR exp DERPAR IZQCOR linst DERCOR els
    (49) mientras -> . while IZQPAR exp DERPAR IZQCOR linst DERCOR
    (64) cual -> . switch IZQPAR exp DERPAR IZQCOR lcase def DERCOR
    (31) call -> . ident IZQPAR plex DERPAR PCOMA
    (50) dow -> . do IZQCOR linst DERCOR while IZQPAR exp DERPAR PCOMA
    (28) asg -> . TYPE lids PCOMA
    (71) prin -> . printf IZQPAR STR lexpr DERPAR PCOMA
    (72) prin -> . printf IZQPAR STR DERPAR PCOMA
    (47) decla -> . TYPE ident lacs IGUAL exp
    (48) decla -> . TYPE ident IGUAL exp
    (39) tag -> . ident DP
    (40) gotot -> . goto ident
    (32) brk -> . break
    (33) ret -> . return exp
    (34) ret -> . return
    (76) ident -> . ID
    (112) TYPE -> . int
    (113) TYPE -> . float
    (114) TYPE -> . char
    (115) TYPE -> . double
    (116) TYPE -> . void

    DERCOR          shift and go to state 249
    for             shift and go to state 64
    if              shift and go to state 65
    while           shift and go to state 66
    switch          shift and go to state 67
    do              shift and go to state 68
    printf          shift and go to state 70
    goto            shift and go to state 71
    break           shift and go to state 72
    return          shift and go to state 73
    ID              shift and go to state 17
    int             shift and go to state 7
    float           shift and go to state 8
    char            shift and go to state 9
    double          shift and go to state 10
    void            shift and go to state 11

    inst                           shift and go to state 116
    asig                           shift and go to state 50
    para                           shift and go to state 51
    si                             shift and go to state 52
    mientras                       shift and go to state 53
    cual                           shift and go to state 54
    call                           shift and go to state 55
    dow                            shift and go to state 56
    asg                            shift and go to state 57
    prin                           shift and go to state 58
    decla                          shift and go to state 59
    tag                            shift and go to state 60
    gotot                          shift and go to state 61
    brk                            shift and go to state 62
    ret                            shift and go to state 63
    ident                          shift and go to state 47
    TYPE                           shift and go to state 69

state 242

    (51) si -> if IZQPAR exp DERPAR IZQCOR linst DERCOR lelsi els .

    DERCOR          reduce using rule 51 (si -> if IZQPAR exp DERPAR IZQCOR linst DERCOR lelsi els .)
    for             reduce using rule 51 (si -> if IZQPAR exp DERPAR IZQCOR linst DERCOR lelsi els .)
    if              reduce using rule 51 (si -> if IZQPAR exp DERPAR IZQCOR linst DERCOR lelsi els .)
    while           reduce using rule 51 (si -> if IZQPAR exp DERPAR IZQCOR linst DERCOR lelsi els .)
    switch          reduce using rule 51 (si -> if IZQPAR exp DERPAR IZQCOR linst DERCOR lelsi els .)
    do              reduce using rule 51 (si -> if IZQPAR exp DERPAR IZQCOR linst DERCOR lelsi els .)
    printf          reduce using rule 51 (si -> if IZQPAR exp DERPAR IZQCOR linst DERCOR lelsi els .)
    goto            reduce using rule 51 (si -> if IZQPAR exp DERPAR IZQCOR linst DERCOR lelsi els .)
    break           reduce using rule 51 (si -> if IZQPAR exp DERPAR IZQCOR linst DERCOR lelsi els .)
    return          reduce using rule 51 (si -> if IZQPAR exp DERPAR IZQCOR linst DERCOR lelsi els .)
    ID              reduce using rule 51 (si -> if IZQPAR exp DERPAR IZQCOR linst DERCOR lelsi els .)
    int             reduce using rule 51 (si -> if IZQPAR exp DERPAR IZQCOR linst DERCOR lelsi els .)
    float           reduce using rule 51 (si -> if IZQPAR exp DERPAR IZQCOR linst DERCOR lelsi els .)
    char            reduce using rule 51 (si -> if IZQPAR exp DERPAR IZQCOR linst DERCOR lelsi els .)
    double          reduce using rule 51 (si -> if IZQPAR exp DERPAR IZQCOR linst DERCOR lelsi els .)
    void            reduce using rule 51 (si -> if IZQPAR exp DERPAR IZQCOR linst DERCOR lelsi els .)
    default         reduce using rule 51 (si -> if IZQPAR exp DERPAR IZQCOR linst DERCOR lelsi els .)
    case            reduce using rule 51 (si -> if IZQPAR exp DERPAR IZQCOR linst DERCOR lelsi els .)


state 243

    (53) lelsi -> lelsi elsi .

    else            reduce using rule 53 (lelsi -> lelsi elsi .)
    DERCOR          reduce using rule 53 (lelsi -> lelsi elsi .)
    for             reduce using rule 53 (lelsi -> lelsi elsi .)
    if              reduce using rule 53 (lelsi -> lelsi elsi .)
    while           reduce using rule 53 (lelsi -> lelsi elsi .)
    switch          reduce using rule 53 (lelsi -> lelsi elsi .)
    do              reduce using rule 53 (lelsi -> lelsi elsi .)
    printf          reduce using rule 53 (lelsi -> lelsi elsi .)
    goto            reduce using rule 53 (lelsi -> lelsi elsi .)
    break           reduce using rule 53 (lelsi -> lelsi elsi .)
    return          reduce using rule 53 (lelsi -> lelsi elsi .)
    ID              reduce using rule 53 (lelsi -> lelsi elsi .)
    int             reduce using rule 53 (lelsi -> lelsi elsi .)
    float           reduce using rule 53 (lelsi -> lelsi elsi .)
    char            reduce using rule 53 (lelsi -> lelsi elsi .)
    double          reduce using rule 53 (lelsi -> lelsi elsi .)
    void            reduce using rule 53 (lelsi -> lelsi elsi .)
    default         reduce using rule 53 (lelsi -> lelsi elsi .)
    case            reduce using rule 53 (lelsi -> lelsi elsi .)


state 244

    (56) els -> else IZQCOR . linst DERCOR
    (8) linst -> . linst inst
    (9) linst -> . inst
    (14) inst -> . asig PCOMA
    (15) inst -> . para
    (16) inst -> . si
    (17) inst -> . mientras
    (18) inst -> . cual
    (19) inst -> . call
    (20) inst -> . dow
    (21) inst -> . asg
    (22) inst -> . prin
    (23) inst -> . decla PCOMA
    (24) inst -> . tag
    (25) inst -> . gotot PCOMA
    (26) inst -> . brk PCOMA
    (27) inst -> . ret PCOMA
    (41) asig -> . ident lacs IGUAL exp
    (42) asig -> . ident IGUAL exp
    (43) asig -> . ident lacs INCE
    (44) asig -> . ident INCE
    (45) asig -> . ident lacs DECRE
    (46) asig -> . ident DECRE
    (58) para -> . for IZQPAR para1 exp PCOMA para2 DERPAR IZQCOR linst DERCOR
    (51) si -> . if IZQPAR exp DERPAR IZQCOR linst DERCOR lelsi els
    (52) si -> . if IZQPAR exp DERPAR IZQCOR linst DERCOR els
    (49) mientras -> . while IZQPAR exp DERPAR IZQCOR linst DERCOR
    (64) cual -> . switch IZQPAR exp DERPAR IZQCOR lcase def DERCOR
    (31) call -> . ident IZQPAR plex DERPAR PCOMA
    (50) dow -> . do IZQCOR linst DERCOR while IZQPAR exp DERPAR PCOMA
    (28) asg -> . TYPE lids PCOMA
    (71) prin -> . printf IZQPAR STR lexpr DERPAR PCOMA
    (72) prin -> . printf IZQPAR STR DERPAR PCOMA
    (47) decla -> . TYPE ident lacs IGUAL exp
    (48) decla -> . TYPE ident IGUAL exp
    (39) tag -> . ident DP
    (40) gotot -> . goto ident
    (32) brk -> . break
    (33) ret -> . return exp
    (34) ret -> . return
    (76) ident -> . ID
    (112) TYPE -> . int
    (113) TYPE -> . float
    (114) TYPE -> . char
    (115) TYPE -> . double
    (116) TYPE -> . void

    for             shift and go to state 64
    if              shift and go to state 65
    while           shift and go to state 66
    switch          shift and go to state 67
    do              shift and go to state 68
    printf          shift and go to state 70
    goto            shift and go to state 71
    break           shift and go to state 72
    return          shift and go to state 73
    ID              shift and go to state 17
    int             shift and go to state 7
    float           shift and go to state 8
    char            shift and go to state 9
    double          shift and go to state 10
    void            shift and go to state 11

    linst                          shift and go to state 250
    inst                           shift and go to state 49
    asig                           shift and go to state 50
    para                           shift and go to state 51
    si                             shift and go to state 52
    mientras                       shift and go to state 53
    cual                           shift and go to state 54
    call                           shift and go to state 55
    dow                            shift and go to state 56
    asg                            shift and go to state 57
    prin                           shift and go to state 58
    decla                          shift and go to state 59
    tag                            shift and go to state 60
    gotot                          shift and go to state 61
    brk                            shift and go to state 62
    ret                            shift and go to state 63
    ident                          shift and go to state 47
    TYPE                           shift and go to state 69

state 245

    (55) elsi -> else if . IZQPAR exp DERPAR IZQCOR linst DERCOR

    IZQPAR          shift and go to state 251


state 246

    (69) def -> default DP linst . break PCOMA
    (8) linst -> linst . inst
    (14) inst -> . asig PCOMA
    (15) inst -> . para
    (16) inst -> . si
    (17) inst -> . mientras
    (18) inst -> . cual
    (19) inst -> . call
    (20) inst -> . dow
    (21) inst -> . asg
    (22) inst -> . prin
    (23) inst -> . decla PCOMA
    (24) inst -> . tag
    (25) inst -> . gotot PCOMA
    (26) inst -> . brk PCOMA
    (27) inst -> . ret PCOMA
    (41) asig -> . ident lacs IGUAL exp
    (42) asig -> . ident IGUAL exp
    (43) asig -> . ident lacs INCE
    (44) asig -> . ident INCE
    (45) asig -> . ident lacs DECRE
    (46) asig -> . ident DECRE
    (58) para -> . for IZQPAR para1 exp PCOMA para2 DERPAR IZQCOR linst DERCOR
    (51) si -> . if IZQPAR exp DERPAR IZQCOR linst DERCOR lelsi els
    (52) si -> . if IZQPAR exp DERPAR IZQCOR linst DERCOR els
    (49) mientras -> . while IZQPAR exp DERPAR IZQCOR linst DERCOR
    (64) cual -> . switch IZQPAR exp DERPAR IZQCOR lcase def DERCOR
    (31) call -> . ident IZQPAR plex DERPAR PCOMA
    (50) dow -> . do IZQCOR linst DERCOR while IZQPAR exp DERPAR PCOMA
    (28) asg -> . TYPE lids PCOMA
    (71) prin -> . printf IZQPAR STR lexpr DERPAR PCOMA
    (72) prin -> . printf IZQPAR STR DERPAR PCOMA
    (47) decla -> . TYPE ident lacs IGUAL exp
    (48) decla -> . TYPE ident IGUAL exp
    (39) tag -> . ident DP
    (40) gotot -> . goto ident
    (32) brk -> . break
    (33) ret -> . return exp
    (34) ret -> . return
    (76) ident -> . ID
    (112) TYPE -> . int
    (113) TYPE -> . float
    (114) TYPE -> . char
    (115) TYPE -> . double
    (116) TYPE -> . void

    break           shift and go to state 252
    for             shift and go to state 64
    if              shift and go to state 65
    while           shift and go to state 66
    switch          shift and go to state 67
    do              shift and go to state 68
    printf          shift and go to state 70
    goto            shift and go to state 71
    return          shift and go to state 73
    ID              shift and go to state 17
    int             shift and go to state 7
    float           shift and go to state 8
    char            shift and go to state 9
    double          shift and go to state 10
    void            shift and go to state 11

    inst                           shift and go to state 116
    asig                           shift and go to state 50
    para                           shift and go to state 51
    si                             shift and go to state 52
    mientras                       shift and go to state 53
    cual                           shift and go to state 54
    call                           shift and go to state 55
    dow                            shift and go to state 56
    asg                            shift and go to state 57
    prin                           shift and go to state 58
    decla                          shift and go to state 59
    tag                            shift and go to state 60
    gotot                          shift and go to state 61
    brk                            shift and go to state 62
    ret                            shift and go to state 63
    ident                          shift and go to state 47
    TYPE                           shift and go to state 69

state 247

    (67) caso -> case ID DP linst . break PCOMA
    (68) caso -> case ID DP linst .
    (8) linst -> linst . inst
    (14) inst -> . asig PCOMA
    (15) inst -> . para
    (16) inst -> . si
    (17) inst -> . mientras
    (18) inst -> . cual
    (19) inst -> . call
    (20) inst -> . dow
    (21) inst -> . asg
    (22) inst -> . prin
    (23) inst -> . decla PCOMA
    (24) inst -> . tag
    (25) inst -> . gotot PCOMA
    (26) inst -> . brk PCOMA
    (27) inst -> . ret PCOMA
    (41) asig -> . ident lacs IGUAL exp
    (42) asig -> . ident IGUAL exp
    (43) asig -> . ident lacs INCE
    (44) asig -> . ident INCE
    (45) asig -> . ident lacs DECRE
    (46) asig -> . ident DECRE
    (58) para -> . for IZQPAR para1 exp PCOMA para2 DERPAR IZQCOR linst DERCOR
    (51) si -> . if IZQPAR exp DERPAR IZQCOR linst DERCOR lelsi els
    (52) si -> . if IZQPAR exp DERPAR IZQCOR linst DERCOR els
    (49) mientras -> . while IZQPAR exp DERPAR IZQCOR linst DERCOR
    (64) cual -> . switch IZQPAR exp DERPAR IZQCOR lcase def DERCOR
    (31) call -> . ident IZQPAR plex DERPAR PCOMA
    (50) dow -> . do IZQCOR linst DERCOR while IZQPAR exp DERPAR PCOMA
    (28) asg -> . TYPE lids PCOMA
    (71) prin -> . printf IZQPAR STR lexpr DERPAR PCOMA
    (72) prin -> . printf IZQPAR STR DERPAR PCOMA
    (47) decla -> . TYPE ident lacs IGUAL exp
    (48) decla -> . TYPE ident IGUAL exp
    (39) tag -> . ident DP
    (40) gotot -> . goto ident
    (32) brk -> . break
    (33) ret -> . return exp
    (34) ret -> . return
    (76) ident -> . ID
    (112) TYPE -> . int
    (113) TYPE -> . float
    (114) TYPE -> . char
    (115) TYPE -> . double
    (116) TYPE -> . void

    break           shift and go to state 253
    default         reduce using rule 68 (caso -> case ID DP linst .)
    case            reduce using rule 68 (caso -> case ID DP linst .)
    DERCOR          reduce using rule 68 (caso -> case ID DP linst .)
    for             shift and go to state 64
    if              shift and go to state 65
    while           shift and go to state 66
    switch          shift and go to state 67
    do              shift and go to state 68
    printf          shift and go to state 70
    goto            shift and go to state 71
    return          shift and go to state 73
    ID              shift and go to state 17
    int             shift and go to state 7
    float           shift and go to state 8
    char            shift and go to state 9
    double          shift and go to state 10
    void            shift and go to state 11

    inst                           shift and go to state 116
    asig                           shift and go to state 50
    para                           shift and go to state 51
    si                             shift and go to state 52
    mientras                       shift and go to state 53
    cual                           shift and go to state 54
    call                           shift and go to state 55
    dow                            shift and go to state 56
    asg                            shift and go to state 57
    prin                           shift and go to state 58
    decla                          shift and go to state 59
    tag                            shift and go to state 60
    gotot                          shift and go to state 61
    brk                            shift and go to state 62
    ret                            shift and go to state 63
    ident                          shift and go to state 47
    TYPE                           shift and go to state 69

state 248

    (50) dow -> do IZQCOR linst DERCOR while IZQPAR exp DERPAR PCOMA .

    DERCOR          reduce using rule 50 (dow -> do IZQCOR linst DERCOR while IZQPAR exp DERPAR PCOMA .)
    for             reduce using rule 50 (dow -> do IZQCOR linst DERCOR while IZQPAR exp DERPAR PCOMA .)
    if              reduce using rule 50 (dow -> do IZQCOR linst DERCOR while IZQPAR exp DERPAR PCOMA .)
    while           reduce using rule 50 (dow -> do IZQCOR linst DERCOR while IZQPAR exp DERPAR PCOMA .)
    switch          reduce using rule 50 (dow -> do IZQCOR linst DERCOR while IZQPAR exp DERPAR PCOMA .)
    do              reduce using rule 50 (dow -> do IZQCOR linst DERCOR while IZQPAR exp DERPAR PCOMA .)
    printf          reduce using rule 50 (dow -> do IZQCOR linst DERCOR while IZQPAR exp DERPAR PCOMA .)
    goto            reduce using rule 50 (dow -> do IZQCOR linst DERCOR while IZQPAR exp DERPAR PCOMA .)
    break           reduce using rule 50 (dow -> do IZQCOR linst DERCOR while IZQPAR exp DERPAR PCOMA .)
    return          reduce using rule 50 (dow -> do IZQCOR linst DERCOR while IZQPAR exp DERPAR PCOMA .)
    ID              reduce using rule 50 (dow -> do IZQCOR linst DERCOR while IZQPAR exp DERPAR PCOMA .)
    int             reduce using rule 50 (dow -> do IZQCOR linst DERCOR while IZQPAR exp DERPAR PCOMA .)
    float           reduce using rule 50 (dow -> do IZQCOR linst DERCOR while IZQPAR exp DERPAR PCOMA .)
    char            reduce using rule 50 (dow -> do IZQCOR linst DERCOR while IZQPAR exp DERPAR PCOMA .)
    double          reduce using rule 50 (dow -> do IZQCOR linst DERCOR while IZQPAR exp DERPAR PCOMA .)
    void            reduce using rule 50 (dow -> do IZQCOR linst DERCOR while IZQPAR exp DERPAR PCOMA .)
    default         reduce using rule 50 (dow -> do IZQCOR linst DERCOR while IZQPAR exp DERPAR PCOMA .)
    case            reduce using rule 50 (dow -> do IZQCOR linst DERCOR while IZQPAR exp DERPAR PCOMA .)


state 249

    (58) para -> for IZQPAR para1 exp PCOMA para2 DERPAR IZQCOR linst DERCOR .

    DERCOR          reduce using rule 58 (para -> for IZQPAR para1 exp PCOMA para2 DERPAR IZQCOR linst DERCOR .)
    for             reduce using rule 58 (para -> for IZQPAR para1 exp PCOMA para2 DERPAR IZQCOR linst DERCOR .)
    if              reduce using rule 58 (para -> for IZQPAR para1 exp PCOMA para2 DERPAR IZQCOR linst DERCOR .)
    while           reduce using rule 58 (para -> for IZQPAR para1 exp PCOMA para2 DERPAR IZQCOR linst DERCOR .)
    switch          reduce using rule 58 (para -> for IZQPAR para1 exp PCOMA para2 DERPAR IZQCOR linst DERCOR .)
    do              reduce using rule 58 (para -> for IZQPAR para1 exp PCOMA para2 DERPAR IZQCOR linst DERCOR .)
    printf          reduce using rule 58 (para -> for IZQPAR para1 exp PCOMA para2 DERPAR IZQCOR linst DERCOR .)
    goto            reduce using rule 58 (para -> for IZQPAR para1 exp PCOMA para2 DERPAR IZQCOR linst DERCOR .)
    break           reduce using rule 58 (para -> for IZQPAR para1 exp PCOMA para2 DERPAR IZQCOR linst DERCOR .)
    return          reduce using rule 58 (para -> for IZQPAR para1 exp PCOMA para2 DERPAR IZQCOR linst DERCOR .)
    ID              reduce using rule 58 (para -> for IZQPAR para1 exp PCOMA para2 DERPAR IZQCOR linst DERCOR .)
    int             reduce using rule 58 (para -> for IZQPAR para1 exp PCOMA para2 DERPAR IZQCOR linst DERCOR .)
    float           reduce using rule 58 (para -> for IZQPAR para1 exp PCOMA para2 DERPAR IZQCOR linst DERCOR .)
    char            reduce using rule 58 (para -> for IZQPAR para1 exp PCOMA para2 DERPAR IZQCOR linst DERCOR .)
    double          reduce using rule 58 (para -> for IZQPAR para1 exp PCOMA para2 DERPAR IZQCOR linst DERCOR .)
    void            reduce using rule 58 (para -> for IZQPAR para1 exp PCOMA para2 DERPAR IZQCOR linst DERCOR .)
    default         reduce using rule 58 (para -> for IZQPAR para1 exp PCOMA para2 DERPAR IZQCOR linst DERCOR .)
    case            reduce using rule 58 (para -> for IZQPAR para1 exp PCOMA para2 DERPAR IZQCOR linst DERCOR .)


state 250

    (56) els -> else IZQCOR linst . DERCOR
    (8) linst -> linst . inst
    (14) inst -> . asig PCOMA
    (15) inst -> . para
    (16) inst -> . si
    (17) inst -> . mientras
    (18) inst -> . cual
    (19) inst -> . call
    (20) inst -> . dow
    (21) inst -> . asg
    (22) inst -> . prin
    (23) inst -> . decla PCOMA
    (24) inst -> . tag
    (25) inst -> . gotot PCOMA
    (26) inst -> . brk PCOMA
    (27) inst -> . ret PCOMA
    (41) asig -> . ident lacs IGUAL exp
    (42) asig -> . ident IGUAL exp
    (43) asig -> . ident lacs INCE
    (44) asig -> . ident INCE
    (45) asig -> . ident lacs DECRE
    (46) asig -> . ident DECRE
    (58) para -> . for IZQPAR para1 exp PCOMA para2 DERPAR IZQCOR linst DERCOR
    (51) si -> . if IZQPAR exp DERPAR IZQCOR linst DERCOR lelsi els
    (52) si -> . if IZQPAR exp DERPAR IZQCOR linst DERCOR els
    (49) mientras -> . while IZQPAR exp DERPAR IZQCOR linst DERCOR
    (64) cual -> . switch IZQPAR exp DERPAR IZQCOR lcase def DERCOR
    (31) call -> . ident IZQPAR plex DERPAR PCOMA
    (50) dow -> . do IZQCOR linst DERCOR while IZQPAR exp DERPAR PCOMA
    (28) asg -> . TYPE lids PCOMA
    (71) prin -> . printf IZQPAR STR lexpr DERPAR PCOMA
    (72) prin -> . printf IZQPAR STR DERPAR PCOMA
    (47) decla -> . TYPE ident lacs IGUAL exp
    (48) decla -> . TYPE ident IGUAL exp
    (39) tag -> . ident DP
    (40) gotot -> . goto ident
    (32) brk -> . break
    (33) ret -> . return exp
    (34) ret -> . return
    (76) ident -> . ID
    (112) TYPE -> . int
    (113) TYPE -> . float
    (114) TYPE -> . char
    (115) TYPE -> . double
    (116) TYPE -> . void

    DERCOR          shift and go to state 254
    for             shift and go to state 64
    if              shift and go to state 65
    while           shift and go to state 66
    switch          shift and go to state 67
    do              shift and go to state 68
    printf          shift and go to state 70
    goto            shift and go to state 71
    break           shift and go to state 72
    return          shift and go to state 73
    ID              shift and go to state 17
    int             shift and go to state 7
    float           shift and go to state 8
    char            shift and go to state 9
    double          shift and go to state 10
    void            shift and go to state 11

    inst                           shift and go to state 116
    asig                           shift and go to state 50
    para                           shift and go to state 51
    si                             shift and go to state 52
    mientras                       shift and go to state 53
    cual                           shift and go to state 54
    call                           shift and go to state 55
    dow                            shift and go to state 56
    asg                            shift and go to state 57
    prin                           shift and go to state 58
    decla                          shift and go to state 59
    tag                            shift and go to state 60
    gotot                          shift and go to state 61
    brk                            shift and go to state 62
    ret                            shift and go to state 63
    ident                          shift and go to state 47
    TYPE                           shift and go to state 69

state 251

    (55) elsi -> else if IZQPAR . exp DERPAR IZQCOR linst DERCOR
    (73) exp -> . scanf IZQPAR DERPAR
    (81) exp -> . exp SUMA exp
    (82) exp -> . exp RESTA exp
    (83) exp -> . exp MULTI exp
    (84) exp -> . exp DIV exp
    (85) exp -> . exp PORCENTAJE exp
    (86) exp -> . exp DIGUAL exp
    (87) exp -> . exp DESIGUAL exp
    (88) exp -> . exp MAYOR exp
    (89) exp -> . exp MENOR exp
    (90) exp -> . exp MAYORIGUAL exp
    (91) exp -> . exp MENORIGUAL exp
    (92) exp -> . exp AND exp
    (93) exp -> . exp OR exp
    (94) exp -> . exp BAND exp
    (95) exp -> . exp BOR exp
    (96) exp -> . exp BXOR exp
    (97) exp -> . exp BLEFT exp
    (98) exp -> . exp BRIGHT exp
    (99) exp -> . RESTA exp
    (100) exp -> . NOT exp
    (101) exp -> . BNOT exp
    (102) exp -> . sizeof exp
    (103) exp -> . IZQPAR exp DERPAR
    (104) exp -> . IZQPAR TYPE DERPAR exp
    (105) exp -> . exp ASK exp DP exp
    (106) exp -> . DOUBLE
    (107) exp -> . INTEGER
    (108) exp -> . ident
    (109) exp -> . ident lacs
    (110) exp -> . STR
    (111) exp -> . IZQCOR lex DERCOR
    (76) ident -> . ID

    scanf           shift and go to state 35
    RESTA           shift and go to state 37
    NOT             shift and go to state 38
    BNOT            shift and go to state 39
    sizeof          shift and go to state 40
    IZQPAR          shift and go to state 36
    DOUBLE          shift and go to state 41
    INTEGER         shift and go to state 42
    STR             shift and go to state 43
    IZQCOR          shift and go to state 44
    ID              shift and go to state 17

    exp                            shift and go to state 255
    ident                          shift and go to state 33

state 252

    (69) def -> default DP linst break . PCOMA
    (32) brk -> break .

  ! shift/reduce conflict for PCOMA resolved as shift
    PCOMA           shift and go to state 256

  ! PCOMA           [ reduce using rule 32 (brk -> break .) ]


state 253

    (67) caso -> case ID DP linst break . PCOMA
    (32) brk -> break .

  ! shift/reduce conflict for PCOMA resolved as shift
    PCOMA           shift and go to state 257

  ! PCOMA           [ reduce using rule 32 (brk -> break .) ]


state 254

    (56) els -> else IZQCOR linst DERCOR .

    DERCOR          reduce using rule 56 (els -> else IZQCOR linst DERCOR .)
    for             reduce using rule 56 (els -> else IZQCOR linst DERCOR .)
    if              reduce using rule 56 (els -> else IZQCOR linst DERCOR .)
    while           reduce using rule 56 (els -> else IZQCOR linst DERCOR .)
    switch          reduce using rule 56 (els -> else IZQCOR linst DERCOR .)
    do              reduce using rule 56 (els -> else IZQCOR linst DERCOR .)
    printf          reduce using rule 56 (els -> else IZQCOR linst DERCOR .)
    goto            reduce using rule 56 (els -> else IZQCOR linst DERCOR .)
    break           reduce using rule 56 (els -> else IZQCOR linst DERCOR .)
    return          reduce using rule 56 (els -> else IZQCOR linst DERCOR .)
    ID              reduce using rule 56 (els -> else IZQCOR linst DERCOR .)
    int             reduce using rule 56 (els -> else IZQCOR linst DERCOR .)
    float           reduce using rule 56 (els -> else IZQCOR linst DERCOR .)
    char            reduce using rule 56 (els -> else IZQCOR linst DERCOR .)
    double          reduce using rule 56 (els -> else IZQCOR linst DERCOR .)
    void            reduce using rule 56 (els -> else IZQCOR linst DERCOR .)
    default         reduce using rule 56 (els -> else IZQCOR linst DERCOR .)
    case            reduce using rule 56 (els -> else IZQCOR linst DERCOR .)


state 255

    (55) elsi -> else if IZQPAR exp . DERPAR IZQCOR linst DERCOR
    (81) exp -> exp . SUMA exp
    (82) exp -> exp . RESTA exp
    (83) exp -> exp . MULTI exp
    (84) exp -> exp . DIV exp
    (85) exp -> exp . PORCENTAJE exp
    (86) exp -> exp . DIGUAL exp
    (87) exp -> exp . DESIGUAL exp
    (88) exp -> exp . MAYOR exp
    (89) exp -> exp . MENOR exp
    (90) exp -> exp . MAYORIGUAL exp
    (91) exp -> exp . MENORIGUAL exp
    (92) exp -> exp . AND exp
    (93) exp -> exp . OR exp
    (94) exp -> exp . BAND exp
    (95) exp -> exp . BOR exp
    (96) exp -> exp . BXOR exp
    (97) exp -> exp . BLEFT exp
    (98) exp -> exp . BRIGHT exp
    (105) exp -> exp . ASK exp DP exp

    DERPAR          shift and go to state 258
    SUMA            shift and go to state 80
    RESTA           shift and go to state 81
    MULTI           shift and go to state 82
    DIV             shift and go to state 83
    PORCENTAJE      shift and go to state 84
    DIGUAL          shift and go to state 85
    DESIGUAL        shift and go to state 86
    MAYOR           shift and go to state 87
    MENOR           shift and go to state 88
    MAYORIGUAL      shift and go to state 89
    MENORIGUAL      shift and go to state 90
    AND             shift and go to state 91
    OR              shift and go to state 92
    BAND            shift and go to state 93
    BOR             shift and go to state 94
    BXOR            shift and go to state 95
    BLEFT           shift and go to state 96
    BRIGHT          shift and go to state 97
    ASK             shift and go to state 98


state 256

    (69) def -> default DP linst break PCOMA .

    DERCOR          reduce using rule 69 (def -> default DP linst break PCOMA .)


state 257

    (67) caso -> case ID DP linst break PCOMA .

    default         reduce using rule 67 (caso -> case ID DP linst break PCOMA .)
    case            reduce using rule 67 (caso -> case ID DP linst break PCOMA .)
    DERCOR          reduce using rule 67 (caso -> case ID DP linst break PCOMA .)


state 258

    (55) elsi -> else if IZQPAR exp DERPAR . IZQCOR linst DERCOR

    IZQCOR          shift and go to state 259


state 259

    (55) elsi -> else if IZQPAR exp DERPAR IZQCOR . linst DERCOR
    (8) linst -> . linst inst
    (9) linst -> . inst
    (14) inst -> . asig PCOMA
    (15) inst -> . para
    (16) inst -> . si
    (17) inst -> . mientras
    (18) inst -> . cual
    (19) inst -> . call
    (20) inst -> . dow
    (21) inst -> . asg
    (22) inst -> . prin
    (23) inst -> . decla PCOMA
    (24) inst -> . tag
    (25) inst -> . gotot PCOMA
    (26) inst -> . brk PCOMA
    (27) inst -> . ret PCOMA
    (41) asig -> . ident lacs IGUAL exp
    (42) asig -> . ident IGUAL exp
    (43) asig -> . ident lacs INCE
    (44) asig -> . ident INCE
    (45) asig -> . ident lacs DECRE
    (46) asig -> . ident DECRE
    (58) para -> . for IZQPAR para1 exp PCOMA para2 DERPAR IZQCOR linst DERCOR
    (51) si -> . if IZQPAR exp DERPAR IZQCOR linst DERCOR lelsi els
    (52) si -> . if IZQPAR exp DERPAR IZQCOR linst DERCOR els
    (49) mientras -> . while IZQPAR exp DERPAR IZQCOR linst DERCOR
    (64) cual -> . switch IZQPAR exp DERPAR IZQCOR lcase def DERCOR
    (31) call -> . ident IZQPAR plex DERPAR PCOMA
    (50) dow -> . do IZQCOR linst DERCOR while IZQPAR exp DERPAR PCOMA
    (28) asg -> . TYPE lids PCOMA
    (71) prin -> . printf IZQPAR STR lexpr DERPAR PCOMA
    (72) prin -> . printf IZQPAR STR DERPAR PCOMA
    (47) decla -> . TYPE ident lacs IGUAL exp
    (48) decla -> . TYPE ident IGUAL exp
    (39) tag -> . ident DP
    (40) gotot -> . goto ident
    (32) brk -> . break
    (33) ret -> . return exp
    (34) ret -> . return
    (76) ident -> . ID
    (112) TYPE -> . int
    (113) TYPE -> . float
    (114) TYPE -> . char
    (115) TYPE -> . double
    (116) TYPE -> . void

    for             shift and go to state 64
    if              shift and go to state 65
    while           shift and go to state 66
    switch          shift and go to state 67
    do              shift and go to state 68
    printf          shift and go to state 70
    goto            shift and go to state 71
    break           shift and go to state 72
    return          shift and go to state 73
    ID              shift and go to state 17
    int             shift and go to state 7
    float           shift and go to state 8
    char            shift and go to state 9
    double          shift and go to state 10
    void            shift and go to state 11

    linst                          shift and go to state 260
    inst                           shift and go to state 49
    asig                           shift and go to state 50
    para                           shift and go to state 51
    si                             shift and go to state 52
    mientras                       shift and go to state 53
    cual                           shift and go to state 54
    call                           shift and go to state 55
    dow                            shift and go to state 56
    asg                            shift and go to state 57
    prin                           shift and go to state 58
    decla                          shift and go to state 59
    tag                            shift and go to state 60
    gotot                          shift and go to state 61
    brk                            shift and go to state 62
    ret                            shift and go to state 63
    ident                          shift and go to state 47
    TYPE                           shift and go to state 69

state 260

    (55) elsi -> else if IZQPAR exp DERPAR IZQCOR linst . DERCOR
    (8) linst -> linst . inst
    (14) inst -> . asig PCOMA
    (15) inst -> . para
    (16) inst -> . si
    (17) inst -> . mientras
    (18) inst -> . cual
    (19) inst -> . call
    (20) inst -> . dow
    (21) inst -> . asg
    (22) inst -> . prin
    (23) inst -> . decla PCOMA
    (24) inst -> . tag
    (25) inst -> . gotot PCOMA
    (26) inst -> . brk PCOMA
    (27) inst -> . ret PCOMA
    (41) asig -> . ident lacs IGUAL exp
    (42) asig -> . ident IGUAL exp
    (43) asig -> . ident lacs INCE
    (44) asig -> . ident INCE
    (45) asig -> . ident lacs DECRE
    (46) asig -> . ident DECRE
    (58) para -> . for IZQPAR para1 exp PCOMA para2 DERPAR IZQCOR linst DERCOR
    (51) si -> . if IZQPAR exp DERPAR IZQCOR linst DERCOR lelsi els
    (52) si -> . if IZQPAR exp DERPAR IZQCOR linst DERCOR els
    (49) mientras -> . while IZQPAR exp DERPAR IZQCOR linst DERCOR
    (64) cual -> . switch IZQPAR exp DERPAR IZQCOR lcase def DERCOR
    (31) call -> . ident IZQPAR plex DERPAR PCOMA
    (50) dow -> . do IZQCOR linst DERCOR while IZQPAR exp DERPAR PCOMA
    (28) asg -> . TYPE lids PCOMA
    (71) prin -> . printf IZQPAR STR lexpr DERPAR PCOMA
    (72) prin -> . printf IZQPAR STR DERPAR PCOMA
    (47) decla -> . TYPE ident lacs IGUAL exp
    (48) decla -> . TYPE ident IGUAL exp
    (39) tag -> . ident DP
    (40) gotot -> . goto ident
    (32) brk -> . break
    (33) ret -> . return exp
    (34) ret -> . return
    (76) ident -> . ID
    (112) TYPE -> . int
    (113) TYPE -> . float
    (114) TYPE -> . char
    (115) TYPE -> . double
    (116) TYPE -> . void

    DERCOR          shift and go to state 261
    for             shift and go to state 64
    if              shift and go to state 65
    while           shift and go to state 66
    switch          shift and go to state 67
    do              shift and go to state 68
    printf          shift and go to state 70
    goto            shift and go to state 71
    break           shift and go to state 72
    return          shift and go to state 73
    ID              shift and go to state 17
    int             shift and go to state 7
    float           shift and go to state 8
    char            shift and go to state 9
    double          shift and go to state 10
    void            shift and go to state 11

    inst                           shift and go to state 116
    asig                           shift and go to state 50
    para                           shift and go to state 51
    si                             shift and go to state 52
    mientras                       shift and go to state 53
    cual                           shift and go to state 54
    call                           shift and go to state 55
    dow                            shift and go to state 56
    asg                            shift and go to state 57
    prin                           shift and go to state 58
    decla                          shift and go to state 59
    tag                            shift and go to state 60
    gotot                          shift and go to state 61
    brk                            shift and go to state 62
    ret                            shift and go to state 63
    ident                          shift and go to state 47
    TYPE                           shift and go to state 69

state 261

    (55) elsi -> else if IZQPAR exp DERPAR IZQCOR linst DERCOR .

    else            reduce using rule 55 (elsi -> else if IZQPAR exp DERPAR IZQCOR linst DERCOR .)
    DERCOR          reduce using rule 55 (elsi -> else if IZQPAR exp DERPAR IZQCOR linst DERCOR .)
    for             reduce using rule 55 (elsi -> else if IZQPAR exp DERPAR IZQCOR linst DERCOR .)
    if              reduce using rule 55 (elsi -> else if IZQPAR exp DERPAR IZQCOR linst DERCOR .)
    while           reduce using rule 55 (elsi -> else if IZQPAR exp DERPAR IZQCOR linst DERCOR .)
    switch          reduce using rule 55 (elsi -> else if IZQPAR exp DERPAR IZQCOR linst DERCOR .)
    do              reduce using rule 55 (elsi -> else if IZQPAR exp DERPAR IZQCOR linst DERCOR .)
    printf          reduce using rule 55 (elsi -> else if IZQPAR exp DERPAR IZQCOR linst DERCOR .)
    goto            reduce using rule 55 (elsi -> else if IZQPAR exp DERPAR IZQCOR linst DERCOR .)
    break           reduce using rule 55 (elsi -> else if IZQPAR exp DERPAR IZQCOR linst DERCOR .)
    return          reduce using rule 55 (elsi -> else if IZQPAR exp DERPAR IZQCOR linst DERCOR .)
    ID              reduce using rule 55 (elsi -> else if IZQPAR exp DERPAR IZQCOR linst DERCOR .)
    int             reduce using rule 55 (elsi -> else if IZQPAR exp DERPAR IZQCOR linst DERCOR .)
    float           reduce using rule 55 (elsi -> else if IZQPAR exp DERPAR IZQCOR linst DERCOR .)
    char            reduce using rule 55 (elsi -> else if IZQPAR exp DERPAR IZQCOR linst DERCOR .)
    double          reduce using rule 55 (elsi -> else if IZQPAR exp DERPAR IZQCOR linst DERCOR .)
    void            reduce using rule 55 (elsi -> else if IZQPAR exp DERPAR IZQCOR linst DERCOR .)
    default         reduce using rule 55 (elsi -> else if IZQPAR exp DERPAR IZQCOR linst DERCOR .)
    case            reduce using rule 55 (elsi -> else if IZQPAR exp DERPAR IZQCOR linst DERCOR .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for SUMA in state 182 resolved as shift
WARNING: shift/reduce conflict for RESTA in state 182 resolved as shift
WARNING: shift/reduce conflict for MULTI in state 182 resolved as shift
WARNING: shift/reduce conflict for DIV in state 182 resolved as shift
WARNING: shift/reduce conflict for PORCENTAJE in state 182 resolved as shift
WARNING: shift/reduce conflict for DIGUAL in state 182 resolved as shift
WARNING: shift/reduce conflict for DESIGUAL in state 182 resolved as shift
WARNING: shift/reduce conflict for MAYOR in state 182 resolved as shift
WARNING: shift/reduce conflict for MENOR in state 182 resolved as shift
WARNING: shift/reduce conflict for MAYORIGUAL in state 182 resolved as shift
WARNING: shift/reduce conflict for MENORIGUAL in state 182 resolved as shift
WARNING: shift/reduce conflict for AND in state 182 resolved as shift
WARNING: shift/reduce conflict for OR in state 182 resolved as shift
WARNING: shift/reduce conflict for BAND in state 182 resolved as shift
WARNING: shift/reduce conflict for BOR in state 182 resolved as shift
WARNING: shift/reduce conflict for BXOR in state 182 resolved as shift
WARNING: shift/reduce conflict for BLEFT in state 182 resolved as shift
WARNING: shift/reduce conflict for BRIGHT in state 182 resolved as shift
WARNING: shift/reduce conflict for ASK in state 182 resolved as shift
WARNING: shift/reduce conflict for SUMA in state 199 resolved as shift
WARNING: shift/reduce conflict for RESTA in state 199 resolved as shift
WARNING: shift/reduce conflict for MULTI in state 199 resolved as shift
WARNING: shift/reduce conflict for DIV in state 199 resolved as shift
WARNING: shift/reduce conflict for PORCENTAJE in state 199 resolved as shift
WARNING: shift/reduce conflict for DIGUAL in state 199 resolved as shift
WARNING: shift/reduce conflict for DESIGUAL in state 199 resolved as shift
WARNING: shift/reduce conflict for MAYOR in state 199 resolved as shift
WARNING: shift/reduce conflict for MENOR in state 199 resolved as shift
WARNING: shift/reduce conflict for MAYORIGUAL in state 199 resolved as shift
WARNING: shift/reduce conflict for MENORIGUAL in state 199 resolved as shift
WARNING: shift/reduce conflict for AND in state 199 resolved as shift
WARNING: shift/reduce conflict for OR in state 199 resolved as shift
WARNING: shift/reduce conflict for BAND in state 199 resolved as shift
WARNING: shift/reduce conflict for BOR in state 199 resolved as shift
WARNING: shift/reduce conflict for BXOR in state 199 resolved as shift
WARNING: shift/reduce conflict for BLEFT in state 199 resolved as shift
WARNING: shift/reduce conflict for BRIGHT in state 199 resolved as shift
WARNING: shift/reduce conflict for ASK in state 199 resolved as shift
WARNING: shift/reduce conflict for PCOMA in state 252 resolved as shift
WARNING: shift/reduce conflict for PCOMA in state 253 resolved as shift
