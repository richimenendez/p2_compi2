Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    FLECHA
    SXOR
    VAR
    abs
    array
    exit
    return
    unset
    xor

Grammar

Rule 0     S' -> s
Rule 1     s -> lbody
Rule 2     lbody -> lbody body
Rule 3     lbody -> body
Rule 4     body -> TYPE ID IZQPAR lpam DERPAR IZQCOR linst DERCOR
Rule 5     body -> TYPE main IZQPAR lpam DERPAR IZQCOR linst DERCOR
Rule 6     body -> struct ID IZQCOR linst DERCOR
Rule 7     body -> decla PCOMA
Rule 8     linst -> linst inst
Rule 9     linst -> inst
Rule 10    lpam -> lparam
Rule 11    lpam -> <empty>
Rule 12    lparam -> lparam COMA TYPE ident
Rule 13    lparam -> TYPE ident
Rule 14    inst -> asig PCOMA
Rule 15    inst -> para
Rule 16    inst -> si
Rule 17    inst -> mientras
Rule 18    inst -> cual
Rule 19    inst -> call
Rule 20    inst -> dow
Rule 21    inst -> prin
Rule 22    inst -> decla PCOMA
Rule 23    inst -> tag
Rule 24    inst -> gotot PCOMA
Rule 25    call -> ident IZQPAR plex DERPAR PCOMA
Rule 26    plex -> lex
Rule 27    plex -> <empty>
Rule 28    lex -> lex COMA exp
Rule 29    lex -> exp
Rule 30    tag -> ident DP
Rule 31    gotot -> goto ident
Rule 32    asig -> ident lacs IGUAL exp
Rule 33    asig -> ident IGUAL exp
Rule 34    asig -> ident lacs INCE
Rule 35    asig -> ident INCE
Rule 36    asig -> ident lacs DECRE
Rule 37    asig -> ident DECRE
Rule 38    decla -> TYPE ident lacs IGUAL exp
Rule 39    decla -> TYPE ident IGUAL exp
Rule 40    mientras -> while IZQPAR exp DERPAR IZQCOR linst DERCOR
Rule 41    dow -> do IZQCOR linst DERCOR while IZQPAR exp DERPAR PCOMA
Rule 42    si -> if IZQPAR exp DERPAR IZQCOR linst DERCOR lelsi els
Rule 43    si -> if IZQPAR exp DERPAR IZQCOR linst DERCOR els
Rule 44    lelsi -> lelsi elsi
Rule 45    lelsi -> elsi
Rule 46    elsi -> else if IZQPAR exp DERPAR IZQCOR linst DERCOR
Rule 47    els -> else IZQCOR linst DERCOR
Rule 48    els -> <empty>
Rule 49    para -> for IZQPAR para1 exp PCOMA para2 DERPAR IZQCOR linst DERCOR
Rule 50    para1 -> asig PCOMA
Rule 51    para1 -> decla PCOMA
Rule 52    para2 -> asig
Rule 53    para2 -> decla
Rule 54    para2 -> exp
Rule 55    cual -> switch IZQPAR exp DERPAR IZQCOR lcase def DERCOR
Rule 56    lcase -> lcase caso
Rule 57    lcase -> caso
Rule 58    caso -> case ID DP linst break PCOMA
Rule 59    caso -> case ID DP linst
Rule 60    def -> default DP linst break PCOMA
Rule 61    def -> <empty>
Rule 62    prin -> printf IZQPAR STR lexpr DERPAR PCOMA
Rule 63    prin -> printf IZQPAR STR DERPAR PCOMA
Rule 64    exp -> scanf IZQPAR DERPAR
Rule 65    lexpr -> lexpr COMA exp
Rule 66    lexpr -> COMA exp
Rule 67    ident -> ID
Rule 68    lacs -> lacs acs
Rule 69    lacs -> acs
Rule 70    acs -> IZQLLAVE exp DERLLAVE
Rule 71    acs -> PUNTO ID
Rule 72    exp -> exp SUMA exp
Rule 73    exp -> exp RESTA exp
Rule 74    exp -> exp MULTI exp
Rule 75    exp -> exp DIV exp
Rule 76    exp -> exp PORCENTAJE exp
Rule 77    exp -> exp DIGUAL exp
Rule 78    exp -> exp DESIGUAL exp
Rule 79    exp -> exp MAYOR exp
Rule 80    exp -> exp MENOR exp
Rule 81    exp -> exp MAYORIGUAL exp
Rule 82    exp -> exp MENORIGUAL exp
Rule 83    exp -> exp AND exp
Rule 84    exp -> exp OR exp
Rule 85    exp -> exp BAND exp
Rule 86    exp -> exp BOR exp
Rule 87    exp -> exp BXOR exp
Rule 88    exp -> exp BLEFT exp
Rule 89    exp -> exp BRIGHT exp
Rule 90    exp -> RESTA exp
Rule 91    exp -> NOT exp
Rule 92    exp -> BNOT exp
Rule 93    exp -> sizeof exp
Rule 94    exp -> IZQPAR exp DERPAR
Rule 95    exp -> IZQPAR TYPE DERPAR exp
Rule 96    exp -> exp ASK exp DP exp
Rule 97    exp -> DOUBLE
Rule 98    exp -> INTEGER
Rule 99    exp -> ident
Rule 100   exp -> ident lacs
Rule 101   exp -> STR
Rule 102   exp -> IZQCOR lex DERCOR
Rule 103   TYPE -> int
Rule 104   TYPE -> float
Rule 105   TYPE -> char
Rule 106   TYPE -> double
Rule 107   TYPE -> void

Terminals, with rules where they appear

AND                  : 83
ASK                  : 96
BAND                 : 85
BLEFT                : 88
BNOT                 : 92
BOR                  : 86
BRIGHT               : 89
BXOR                 : 87
COMA                 : 12 28 65 66
DECRE                : 36 37
DERCOR               : 4 5 6 40 41 42 43 46 47 49 55 102
DERLLAVE             : 70
DERPAR               : 4 5 25 40 41 42 43 46 49 55 62 63 64 94 95
DESIGUAL             : 78
DIGUAL               : 77
DIV                  : 75
DOUBLE               : 97
DP                   : 30 58 59 60 96
FLECHA               : 
ID                   : 4 6 58 59 67 71
IGUAL                : 32 33 38 39
INCE                 : 34 35
INTEGER              : 98
IZQCOR               : 4 5 6 40 41 42 43 46 47 49 55 102
IZQLLAVE             : 70
IZQPAR               : 4 5 25 40 41 42 43 46 49 55 62 63 64 94 95
MAYOR                : 79
MAYORIGUAL           : 81
MENOR                : 80
MENORIGUAL           : 82
MULTI                : 74
NOT                  : 91
OR                   : 84
PCOMA                : 7 14 22 24 25 41 49 50 51 58 60 62 63
PORCENTAJE           : 76
PUNTO                : 71
RESTA                : 73 90
STR                  : 62 63 101
SUMA                 : 72
SXOR                 : 
VAR                  : 
abs                  : 
array                : 
break                : 58 60
case                 : 58 59
char                 : 105
default              : 60
do                   : 41
double               : 106
else                 : 46 47
error                : 
exit                 : 
float                : 104
for                  : 49
goto                 : 31
if                   : 42 43 46
int                  : 103
main                 : 5
printf               : 62 63
return               : 
scanf                : 64
sizeof               : 93
struct               : 6
switch               : 55
unset                : 
void                 : 107
while                : 40 41
xor                  : 

Nonterminals, with rules where they appear

TYPE                 : 4 5 12 13 38 39 95
acs                  : 68 69
asig                 : 14 50 52
body                 : 2 3
call                 : 19
caso                 : 56 57
cual                 : 18
decla                : 7 22 51 53
def                  : 55
dow                  : 20
els                  : 42 43
elsi                 : 44 45
exp                  : 28 29 32 33 38 39 40 41 42 43 46 49 54 55 65 66 70 72 72 73 73 74 74 75 75 76 76 77 77 78 78 79 79 80 80 81 81 82 82 83 83 84 84 85 85 86 86 87 87 88 88 89 89 90 91 92 93 94 95 96 96 96
gotot                : 24
ident                : 12 13 25 30 31 32 33 34 35 36 37 38 39 99 100
inst                 : 8 9
lacs                 : 32 34 36 38 68 100
lbody                : 1 2
lcase                : 55 56
lelsi                : 42 44
lex                  : 26 28 102
lexpr                : 62 65
linst                : 4 5 6 8 40 41 42 43 46 47 49 58 59 60
lpam                 : 4 5
lparam               : 10 12
mientras             : 17
para                 : 15
para1                : 49
para2                : 49
plex                 : 25
prin                 : 21
s                    : 0
si                   : 16
tag                  : 23

Parsing method: LALR

state 0

    (0) S' -> . s
    (1) s -> . lbody
    (2) lbody -> . lbody body
    (3) lbody -> . body
    (4) body -> . TYPE ID IZQPAR lpam DERPAR IZQCOR linst DERCOR
    (5) body -> . TYPE main IZQPAR lpam DERPAR IZQCOR linst DERCOR
    (6) body -> . struct ID IZQCOR linst DERCOR
    (7) body -> . decla PCOMA
    (103) TYPE -> . int
    (104) TYPE -> . float
    (105) TYPE -> . char
    (106) TYPE -> . double
    (107) TYPE -> . void
    (38) decla -> . TYPE ident lacs IGUAL exp
    (39) decla -> . TYPE ident IGUAL exp

    struct          shift and go to state 5
    int             shift and go to state 7
    float           shift and go to state 8
    char            shift and go to state 9
    double          shift and go to state 10
    void            shift and go to state 11

    s                              shift and go to state 1
    lbody                          shift and go to state 2
    body                           shift and go to state 3
    TYPE                           shift and go to state 4
    decla                          shift and go to state 6

state 1

    (0) S' -> s .



state 2

    (1) s -> lbody .
    (2) lbody -> lbody . body
    (4) body -> . TYPE ID IZQPAR lpam DERPAR IZQCOR linst DERCOR
    (5) body -> . TYPE main IZQPAR lpam DERPAR IZQCOR linst DERCOR
    (6) body -> . struct ID IZQCOR linst DERCOR
    (7) body -> . decla PCOMA
    (103) TYPE -> . int
    (104) TYPE -> . float
    (105) TYPE -> . char
    (106) TYPE -> . double
    (107) TYPE -> . void
    (38) decla -> . TYPE ident lacs IGUAL exp
    (39) decla -> . TYPE ident IGUAL exp

    $end            reduce using rule 1 (s -> lbody .)
    struct          shift and go to state 5
    int             shift and go to state 7
    float           shift and go to state 8
    char            shift and go to state 9
    double          shift and go to state 10
    void            shift and go to state 11

    body                           shift and go to state 12
    TYPE                           shift and go to state 4
    decla                          shift and go to state 6

state 3

    (3) lbody -> body .

    struct          reduce using rule 3 (lbody -> body .)
    int             reduce using rule 3 (lbody -> body .)
    float           reduce using rule 3 (lbody -> body .)
    char            reduce using rule 3 (lbody -> body .)
    double          reduce using rule 3 (lbody -> body .)
    void            reduce using rule 3 (lbody -> body .)
    $end            reduce using rule 3 (lbody -> body .)


state 4

    (4) body -> TYPE . ID IZQPAR lpam DERPAR IZQCOR linst DERCOR
    (5) body -> TYPE . main IZQPAR lpam DERPAR IZQCOR linst DERCOR
    (38) decla -> TYPE . ident lacs IGUAL exp
    (39) decla -> TYPE . ident IGUAL exp
    (67) ident -> . ID

    ID              shift and go to state 13
    main            shift and go to state 14

    ident                          shift and go to state 15

state 5

    (6) body -> struct . ID IZQCOR linst DERCOR

    ID              shift and go to state 16


state 6

    (7) body -> decla . PCOMA

    PCOMA           shift and go to state 17


state 7

    (103) TYPE -> int .

    ID              reduce using rule 103 (TYPE -> int .)
    main            reduce using rule 103 (TYPE -> int .)
    DERPAR          reduce using rule 103 (TYPE -> int .)


state 8

    (104) TYPE -> float .

    ID              reduce using rule 104 (TYPE -> float .)
    main            reduce using rule 104 (TYPE -> float .)
    DERPAR          reduce using rule 104 (TYPE -> float .)


state 9

    (105) TYPE -> char .

    ID              reduce using rule 105 (TYPE -> char .)
    main            reduce using rule 105 (TYPE -> char .)
    DERPAR          reduce using rule 105 (TYPE -> char .)


state 10

    (106) TYPE -> double .

    ID              reduce using rule 106 (TYPE -> double .)
    main            reduce using rule 106 (TYPE -> double .)
    DERPAR          reduce using rule 106 (TYPE -> double .)


state 11

    (107) TYPE -> void .

    ID              reduce using rule 107 (TYPE -> void .)
    main            reduce using rule 107 (TYPE -> void .)
    DERPAR          reduce using rule 107 (TYPE -> void .)


state 12

    (2) lbody -> lbody body .

    struct          reduce using rule 2 (lbody -> lbody body .)
    int             reduce using rule 2 (lbody -> lbody body .)
    float           reduce using rule 2 (lbody -> lbody body .)
    char            reduce using rule 2 (lbody -> lbody body .)
    double          reduce using rule 2 (lbody -> lbody body .)
    void            reduce using rule 2 (lbody -> lbody body .)
    $end            reduce using rule 2 (lbody -> lbody body .)


state 13

    (4) body -> TYPE ID . IZQPAR lpam DERPAR IZQCOR linst DERCOR
    (67) ident -> ID .

    IZQPAR          shift and go to state 18
    IGUAL           reduce using rule 67 (ident -> ID .)
    IZQLLAVE        reduce using rule 67 (ident -> ID .)
    PUNTO           reduce using rule 67 (ident -> ID .)


state 14

    (5) body -> TYPE main . IZQPAR lpam DERPAR IZQCOR linst DERCOR

    IZQPAR          shift and go to state 19


state 15

    (38) decla -> TYPE ident . lacs IGUAL exp
    (39) decla -> TYPE ident . IGUAL exp
    (68) lacs -> . lacs acs
    (69) lacs -> . acs
    (70) acs -> . IZQLLAVE exp DERLLAVE
    (71) acs -> . PUNTO ID

    IGUAL           shift and go to state 21
    IZQLLAVE        shift and go to state 23
    PUNTO           shift and go to state 24

    lacs                           shift and go to state 20
    acs                            shift and go to state 22

state 16

    (6) body -> struct ID . IZQCOR linst DERCOR

    IZQCOR          shift and go to state 25


state 17

    (7) body -> decla PCOMA .

    struct          reduce using rule 7 (body -> decla PCOMA .)
    int             reduce using rule 7 (body -> decla PCOMA .)
    float           reduce using rule 7 (body -> decla PCOMA .)
    char            reduce using rule 7 (body -> decla PCOMA .)
    double          reduce using rule 7 (body -> decla PCOMA .)
    void            reduce using rule 7 (body -> decla PCOMA .)
    $end            reduce using rule 7 (body -> decla PCOMA .)


state 18

    (4) body -> TYPE ID IZQPAR . lpam DERPAR IZQCOR linst DERCOR
    (10) lpam -> . lparam
    (11) lpam -> .
    (12) lparam -> . lparam COMA TYPE ident
    (13) lparam -> . TYPE ident
    (103) TYPE -> . int
    (104) TYPE -> . float
    (105) TYPE -> . char
    (106) TYPE -> . double
    (107) TYPE -> . void

    DERPAR          reduce using rule 11 (lpam -> .)
    int             shift and go to state 7
    float           shift and go to state 8
    char            shift and go to state 9
    double          shift and go to state 10
    void            shift and go to state 11

    TYPE                           shift and go to state 26
    lpam                           shift and go to state 27
    lparam                         shift and go to state 28

state 19

    (5) body -> TYPE main IZQPAR . lpam DERPAR IZQCOR linst DERCOR
    (10) lpam -> . lparam
    (11) lpam -> .
    (12) lparam -> . lparam COMA TYPE ident
    (13) lparam -> . TYPE ident
    (103) TYPE -> . int
    (104) TYPE -> . float
    (105) TYPE -> . char
    (106) TYPE -> . double
    (107) TYPE -> . void

    DERPAR          reduce using rule 11 (lpam -> .)
    int             shift and go to state 7
    float           shift and go to state 8
    char            shift and go to state 9
    double          shift and go to state 10
    void            shift and go to state 11

    TYPE                           shift and go to state 26
    lpam                           shift and go to state 29
    lparam                         shift and go to state 28

state 20

    (38) decla -> TYPE ident lacs . IGUAL exp
    (68) lacs -> lacs . acs
    (70) acs -> . IZQLLAVE exp DERLLAVE
    (71) acs -> . PUNTO ID

    IGUAL           shift and go to state 30
    IZQLLAVE        shift and go to state 23
    PUNTO           shift and go to state 24

    acs                            shift and go to state 31

state 21

    (39) decla -> TYPE ident IGUAL . exp
    (64) exp -> . scanf IZQPAR DERPAR
    (72) exp -> . exp SUMA exp
    (73) exp -> . exp RESTA exp
    (74) exp -> . exp MULTI exp
    (75) exp -> . exp DIV exp
    (76) exp -> . exp PORCENTAJE exp
    (77) exp -> . exp DIGUAL exp
    (78) exp -> . exp DESIGUAL exp
    (79) exp -> . exp MAYOR exp
    (80) exp -> . exp MENOR exp
    (81) exp -> . exp MAYORIGUAL exp
    (82) exp -> . exp MENORIGUAL exp
    (83) exp -> . exp AND exp
    (84) exp -> . exp OR exp
    (85) exp -> . exp BAND exp
    (86) exp -> . exp BOR exp
    (87) exp -> . exp BXOR exp
    (88) exp -> . exp BLEFT exp
    (89) exp -> . exp BRIGHT exp
    (90) exp -> . RESTA exp
    (91) exp -> . NOT exp
    (92) exp -> . BNOT exp
    (93) exp -> . sizeof exp
    (94) exp -> . IZQPAR exp DERPAR
    (95) exp -> . IZQPAR TYPE DERPAR exp
    (96) exp -> . exp ASK exp DP exp
    (97) exp -> . DOUBLE
    (98) exp -> . INTEGER
    (99) exp -> . ident
    (100) exp -> . ident lacs
    (101) exp -> . STR
    (102) exp -> . IZQCOR lex DERCOR
    (67) ident -> . ID

    scanf           shift and go to state 34
    RESTA           shift and go to state 36
    NOT             shift and go to state 37
    BNOT            shift and go to state 38
    sizeof          shift and go to state 39
    IZQPAR          shift and go to state 35
    DOUBLE          shift and go to state 40
    INTEGER         shift and go to state 41
    STR             shift and go to state 42
    IZQCOR          shift and go to state 43
    ID              shift and go to state 44

    ident                          shift and go to state 32
    exp                            shift and go to state 33

state 22

    (69) lacs -> acs .

    IGUAL           reduce using rule 69 (lacs -> acs .)
    IZQLLAVE        reduce using rule 69 (lacs -> acs .)
    PUNTO           reduce using rule 69 (lacs -> acs .)
    SUMA            reduce using rule 69 (lacs -> acs .)
    RESTA           reduce using rule 69 (lacs -> acs .)
    MULTI           reduce using rule 69 (lacs -> acs .)
    DIV             reduce using rule 69 (lacs -> acs .)
    PORCENTAJE      reduce using rule 69 (lacs -> acs .)
    DIGUAL          reduce using rule 69 (lacs -> acs .)
    DESIGUAL        reduce using rule 69 (lacs -> acs .)
    MAYOR           reduce using rule 69 (lacs -> acs .)
    MENOR           reduce using rule 69 (lacs -> acs .)
    MAYORIGUAL      reduce using rule 69 (lacs -> acs .)
    MENORIGUAL      reduce using rule 69 (lacs -> acs .)
    AND             reduce using rule 69 (lacs -> acs .)
    OR              reduce using rule 69 (lacs -> acs .)
    BAND            reduce using rule 69 (lacs -> acs .)
    BOR             reduce using rule 69 (lacs -> acs .)
    BXOR            reduce using rule 69 (lacs -> acs .)
    BLEFT           reduce using rule 69 (lacs -> acs .)
    BRIGHT          reduce using rule 69 (lacs -> acs .)
    ASK             reduce using rule 69 (lacs -> acs .)
    PCOMA           reduce using rule 69 (lacs -> acs .)
    DERPAR          reduce using rule 69 (lacs -> acs .)
    DERLLAVE        reduce using rule 69 (lacs -> acs .)
    DERCOR          reduce using rule 69 (lacs -> acs .)
    COMA            reduce using rule 69 (lacs -> acs .)
    DP              reduce using rule 69 (lacs -> acs .)
    INCE            reduce using rule 69 (lacs -> acs .)
    DECRE           reduce using rule 69 (lacs -> acs .)


state 23

    (70) acs -> IZQLLAVE . exp DERLLAVE
    (64) exp -> . scanf IZQPAR DERPAR
    (72) exp -> . exp SUMA exp
    (73) exp -> . exp RESTA exp
    (74) exp -> . exp MULTI exp
    (75) exp -> . exp DIV exp
    (76) exp -> . exp PORCENTAJE exp
    (77) exp -> . exp DIGUAL exp
    (78) exp -> . exp DESIGUAL exp
    (79) exp -> . exp MAYOR exp
    (80) exp -> . exp MENOR exp
    (81) exp -> . exp MAYORIGUAL exp
    (82) exp -> . exp MENORIGUAL exp
    (83) exp -> . exp AND exp
    (84) exp -> . exp OR exp
    (85) exp -> . exp BAND exp
    (86) exp -> . exp BOR exp
    (87) exp -> . exp BXOR exp
    (88) exp -> . exp BLEFT exp
    (89) exp -> . exp BRIGHT exp
    (90) exp -> . RESTA exp
    (91) exp -> . NOT exp
    (92) exp -> . BNOT exp
    (93) exp -> . sizeof exp
    (94) exp -> . IZQPAR exp DERPAR
    (95) exp -> . IZQPAR TYPE DERPAR exp
    (96) exp -> . exp ASK exp DP exp
    (97) exp -> . DOUBLE
    (98) exp -> . INTEGER
    (99) exp -> . ident
    (100) exp -> . ident lacs
    (101) exp -> . STR
    (102) exp -> . IZQCOR lex DERCOR
    (67) ident -> . ID

    scanf           shift and go to state 34
    RESTA           shift and go to state 36
    NOT             shift and go to state 37
    BNOT            shift and go to state 38
    sizeof          shift and go to state 39
    IZQPAR          shift and go to state 35
    DOUBLE          shift and go to state 40
    INTEGER         shift and go to state 41
    STR             shift and go to state 42
    IZQCOR          shift and go to state 43
    ID              shift and go to state 44

    exp                            shift and go to state 45
    ident                          shift and go to state 32

state 24

    (71) acs -> PUNTO . ID

    ID              shift and go to state 46


state 25

    (6) body -> struct ID IZQCOR . linst DERCOR
    (8) linst -> . linst inst
    (9) linst -> . inst
    (14) inst -> . asig PCOMA
    (15) inst -> . para
    (16) inst -> . si
    (17) inst -> . mientras
    (18) inst -> . cual
    (19) inst -> . call
    (20) inst -> . dow
    (21) inst -> . prin
    (22) inst -> . decla PCOMA
    (23) inst -> . tag
    (24) inst -> . gotot PCOMA
    (32) asig -> . ident lacs IGUAL exp
    (33) asig -> . ident IGUAL exp
    (34) asig -> . ident lacs INCE
    (35) asig -> . ident INCE
    (36) asig -> . ident lacs DECRE
    (37) asig -> . ident DECRE
    (49) para -> . for IZQPAR para1 exp PCOMA para2 DERPAR IZQCOR linst DERCOR
    (42) si -> . if IZQPAR exp DERPAR IZQCOR linst DERCOR lelsi els
    (43) si -> . if IZQPAR exp DERPAR IZQCOR linst DERCOR els
    (40) mientras -> . while IZQPAR exp DERPAR IZQCOR linst DERCOR
    (55) cual -> . switch IZQPAR exp DERPAR IZQCOR lcase def DERCOR
    (25) call -> . ident IZQPAR plex DERPAR PCOMA
    (41) dow -> . do IZQCOR linst DERCOR while IZQPAR exp DERPAR PCOMA
    (62) prin -> . printf IZQPAR STR lexpr DERPAR PCOMA
    (63) prin -> . printf IZQPAR STR DERPAR PCOMA
    (38) decla -> . TYPE ident lacs IGUAL exp
    (39) decla -> . TYPE ident IGUAL exp
    (30) tag -> . ident DP
    (31) gotot -> . goto ident
    (67) ident -> . ID
    (103) TYPE -> . int
    (104) TYPE -> . float
    (105) TYPE -> . char
    (106) TYPE -> . double
    (107) TYPE -> . void

    for             shift and go to state 61
    if              shift and go to state 62
    while           shift and go to state 63
    switch          shift and go to state 64
    do              shift and go to state 65
    printf          shift and go to state 66
    goto            shift and go to state 68
    ID              shift and go to state 44
    int             shift and go to state 7
    float           shift and go to state 8
    char            shift and go to state 9
    double          shift and go to state 10
    void            shift and go to state 11

    linst                          shift and go to state 47
    inst                           shift and go to state 48
    asig                           shift and go to state 49
    para                           shift and go to state 50
    si                             shift and go to state 51
    mientras                       shift and go to state 52
    cual                           shift and go to state 53
    call                           shift and go to state 54
    dow                            shift and go to state 55
    prin                           shift and go to state 56
    decla                          shift and go to state 57
    tag                            shift and go to state 58
    gotot                          shift and go to state 59
    ident                          shift and go to state 60
    TYPE                           shift and go to state 67

state 26

    (13) lparam -> TYPE . ident
    (67) ident -> . ID

    ID              shift and go to state 44

    ident                          shift and go to state 69

state 27

    (4) body -> TYPE ID IZQPAR lpam . DERPAR IZQCOR linst DERCOR

    DERPAR          shift and go to state 70


state 28

    (10) lpam -> lparam .
    (12) lparam -> lparam . COMA TYPE ident

    DERPAR          reduce using rule 10 (lpam -> lparam .)
    COMA            shift and go to state 71


state 29

    (5) body -> TYPE main IZQPAR lpam . DERPAR IZQCOR linst DERCOR

    DERPAR          shift and go to state 72


state 30

    (38) decla -> TYPE ident lacs IGUAL . exp
    (64) exp -> . scanf IZQPAR DERPAR
    (72) exp -> . exp SUMA exp
    (73) exp -> . exp RESTA exp
    (74) exp -> . exp MULTI exp
    (75) exp -> . exp DIV exp
    (76) exp -> . exp PORCENTAJE exp
    (77) exp -> . exp DIGUAL exp
    (78) exp -> . exp DESIGUAL exp
    (79) exp -> . exp MAYOR exp
    (80) exp -> . exp MENOR exp
    (81) exp -> . exp MAYORIGUAL exp
    (82) exp -> . exp MENORIGUAL exp
    (83) exp -> . exp AND exp
    (84) exp -> . exp OR exp
    (85) exp -> . exp BAND exp
    (86) exp -> . exp BOR exp
    (87) exp -> . exp BXOR exp
    (88) exp -> . exp BLEFT exp
    (89) exp -> . exp BRIGHT exp
    (90) exp -> . RESTA exp
    (91) exp -> . NOT exp
    (92) exp -> . BNOT exp
    (93) exp -> . sizeof exp
    (94) exp -> . IZQPAR exp DERPAR
    (95) exp -> . IZQPAR TYPE DERPAR exp
    (96) exp -> . exp ASK exp DP exp
    (97) exp -> . DOUBLE
    (98) exp -> . INTEGER
    (99) exp -> . ident
    (100) exp -> . ident lacs
    (101) exp -> . STR
    (102) exp -> . IZQCOR lex DERCOR
    (67) ident -> . ID

    scanf           shift and go to state 34
    RESTA           shift and go to state 36
    NOT             shift and go to state 37
    BNOT            shift and go to state 38
    sizeof          shift and go to state 39
    IZQPAR          shift and go to state 35
    DOUBLE          shift and go to state 40
    INTEGER         shift and go to state 41
    STR             shift and go to state 42
    IZQCOR          shift and go to state 43
    ID              shift and go to state 44

    ident                          shift and go to state 32
    exp                            shift and go to state 73

state 31

    (68) lacs -> lacs acs .

    IGUAL           reduce using rule 68 (lacs -> lacs acs .)
    IZQLLAVE        reduce using rule 68 (lacs -> lacs acs .)
    PUNTO           reduce using rule 68 (lacs -> lacs acs .)
    SUMA            reduce using rule 68 (lacs -> lacs acs .)
    RESTA           reduce using rule 68 (lacs -> lacs acs .)
    MULTI           reduce using rule 68 (lacs -> lacs acs .)
    DIV             reduce using rule 68 (lacs -> lacs acs .)
    PORCENTAJE      reduce using rule 68 (lacs -> lacs acs .)
    DIGUAL          reduce using rule 68 (lacs -> lacs acs .)
    DESIGUAL        reduce using rule 68 (lacs -> lacs acs .)
    MAYOR           reduce using rule 68 (lacs -> lacs acs .)
    MENOR           reduce using rule 68 (lacs -> lacs acs .)
    MAYORIGUAL      reduce using rule 68 (lacs -> lacs acs .)
    MENORIGUAL      reduce using rule 68 (lacs -> lacs acs .)
    AND             reduce using rule 68 (lacs -> lacs acs .)
    OR              reduce using rule 68 (lacs -> lacs acs .)
    BAND            reduce using rule 68 (lacs -> lacs acs .)
    BOR             reduce using rule 68 (lacs -> lacs acs .)
    BXOR            reduce using rule 68 (lacs -> lacs acs .)
    BLEFT           reduce using rule 68 (lacs -> lacs acs .)
    BRIGHT          reduce using rule 68 (lacs -> lacs acs .)
    ASK             reduce using rule 68 (lacs -> lacs acs .)
    PCOMA           reduce using rule 68 (lacs -> lacs acs .)
    DERPAR          reduce using rule 68 (lacs -> lacs acs .)
    DERLLAVE        reduce using rule 68 (lacs -> lacs acs .)
    DERCOR          reduce using rule 68 (lacs -> lacs acs .)
    COMA            reduce using rule 68 (lacs -> lacs acs .)
    DP              reduce using rule 68 (lacs -> lacs acs .)
    INCE            reduce using rule 68 (lacs -> lacs acs .)
    DECRE           reduce using rule 68 (lacs -> lacs acs .)


state 32

    (99) exp -> ident .
    (100) exp -> ident . lacs
    (68) lacs -> . lacs acs
    (69) lacs -> . acs
    (70) acs -> . IZQLLAVE exp DERLLAVE
    (71) acs -> . PUNTO ID

    SUMA            reduce using rule 99 (exp -> ident .)
    RESTA           reduce using rule 99 (exp -> ident .)
    MULTI           reduce using rule 99 (exp -> ident .)
    DIV             reduce using rule 99 (exp -> ident .)
    PORCENTAJE      reduce using rule 99 (exp -> ident .)
    DIGUAL          reduce using rule 99 (exp -> ident .)
    DESIGUAL        reduce using rule 99 (exp -> ident .)
    MAYOR           reduce using rule 99 (exp -> ident .)
    MENOR           reduce using rule 99 (exp -> ident .)
    MAYORIGUAL      reduce using rule 99 (exp -> ident .)
    MENORIGUAL      reduce using rule 99 (exp -> ident .)
    AND             reduce using rule 99 (exp -> ident .)
    OR              reduce using rule 99 (exp -> ident .)
    BAND            reduce using rule 99 (exp -> ident .)
    BOR             reduce using rule 99 (exp -> ident .)
    BXOR            reduce using rule 99 (exp -> ident .)
    BLEFT           reduce using rule 99 (exp -> ident .)
    BRIGHT          reduce using rule 99 (exp -> ident .)
    ASK             reduce using rule 99 (exp -> ident .)
    PCOMA           reduce using rule 99 (exp -> ident .)
    DERPAR          reduce using rule 99 (exp -> ident .)
    DERLLAVE        reduce using rule 99 (exp -> ident .)
    DERCOR          reduce using rule 99 (exp -> ident .)
    COMA            reduce using rule 99 (exp -> ident .)
    DP              reduce using rule 99 (exp -> ident .)
    IZQLLAVE        shift and go to state 23
    PUNTO           shift and go to state 24

    lacs                           shift and go to state 74
    acs                            shift and go to state 22

state 33

    (39) decla -> TYPE ident IGUAL exp .
    (72) exp -> exp . SUMA exp
    (73) exp -> exp . RESTA exp
    (74) exp -> exp . MULTI exp
    (75) exp -> exp . DIV exp
    (76) exp -> exp . PORCENTAJE exp
    (77) exp -> exp . DIGUAL exp
    (78) exp -> exp . DESIGUAL exp
    (79) exp -> exp . MAYOR exp
    (80) exp -> exp . MENOR exp
    (81) exp -> exp . MAYORIGUAL exp
    (82) exp -> exp . MENORIGUAL exp
    (83) exp -> exp . AND exp
    (84) exp -> exp . OR exp
    (85) exp -> exp . BAND exp
    (86) exp -> exp . BOR exp
    (87) exp -> exp . BXOR exp
    (88) exp -> exp . BLEFT exp
    (89) exp -> exp . BRIGHT exp
    (96) exp -> exp . ASK exp DP exp

    PCOMA           reduce using rule 39 (decla -> TYPE ident IGUAL exp .)
    DERPAR          reduce using rule 39 (decla -> TYPE ident IGUAL exp .)
    SUMA            shift and go to state 75
    RESTA           shift and go to state 76
    MULTI           shift and go to state 77
    DIV             shift and go to state 78
    PORCENTAJE      shift and go to state 79
    DIGUAL          shift and go to state 80
    DESIGUAL        shift and go to state 81
    MAYOR           shift and go to state 82
    MENOR           shift and go to state 83
    MAYORIGUAL      shift and go to state 84
    MENORIGUAL      shift and go to state 85
    AND             shift and go to state 86
    OR              shift and go to state 87
    BAND            shift and go to state 88
    BOR             shift and go to state 89
    BXOR            shift and go to state 90
    BLEFT           shift and go to state 91
    BRIGHT          shift and go to state 92
    ASK             shift and go to state 93


state 34

    (64) exp -> scanf . IZQPAR DERPAR

    IZQPAR          shift and go to state 94


state 35

    (94) exp -> IZQPAR . exp DERPAR
    (95) exp -> IZQPAR . TYPE DERPAR exp
    (64) exp -> . scanf IZQPAR DERPAR
    (72) exp -> . exp SUMA exp
    (73) exp -> . exp RESTA exp
    (74) exp -> . exp MULTI exp
    (75) exp -> . exp DIV exp
    (76) exp -> . exp PORCENTAJE exp
    (77) exp -> . exp DIGUAL exp
    (78) exp -> . exp DESIGUAL exp
    (79) exp -> . exp MAYOR exp
    (80) exp -> . exp MENOR exp
    (81) exp -> . exp MAYORIGUAL exp
    (82) exp -> . exp MENORIGUAL exp
    (83) exp -> . exp AND exp
    (84) exp -> . exp OR exp
    (85) exp -> . exp BAND exp
    (86) exp -> . exp BOR exp
    (87) exp -> . exp BXOR exp
    (88) exp -> . exp BLEFT exp
    (89) exp -> . exp BRIGHT exp
    (90) exp -> . RESTA exp
    (91) exp -> . NOT exp
    (92) exp -> . BNOT exp
    (93) exp -> . sizeof exp
    (94) exp -> . IZQPAR exp DERPAR
    (95) exp -> . IZQPAR TYPE DERPAR exp
    (96) exp -> . exp ASK exp DP exp
    (97) exp -> . DOUBLE
    (98) exp -> . INTEGER
    (99) exp -> . ident
    (100) exp -> . ident lacs
    (101) exp -> . STR
    (102) exp -> . IZQCOR lex DERCOR
    (103) TYPE -> . int
    (104) TYPE -> . float
    (105) TYPE -> . char
    (106) TYPE -> . double
    (107) TYPE -> . void
    (67) ident -> . ID

    scanf           shift and go to state 34
    RESTA           shift and go to state 36
    NOT             shift and go to state 37
    BNOT            shift and go to state 38
    sizeof          shift and go to state 39
    IZQPAR          shift and go to state 35
    DOUBLE          shift and go to state 40
    INTEGER         shift and go to state 41
    STR             shift and go to state 42
    IZQCOR          shift and go to state 43
    int             shift and go to state 7
    float           shift and go to state 8
    char            shift and go to state 9
    double          shift and go to state 10
    void            shift and go to state 11
    ID              shift and go to state 44

    exp                            shift and go to state 95
    TYPE                           shift and go to state 96
    ident                          shift and go to state 32

state 36

    (90) exp -> RESTA . exp
    (64) exp -> . scanf IZQPAR DERPAR
    (72) exp -> . exp SUMA exp
    (73) exp -> . exp RESTA exp
    (74) exp -> . exp MULTI exp
    (75) exp -> . exp DIV exp
    (76) exp -> . exp PORCENTAJE exp
    (77) exp -> . exp DIGUAL exp
    (78) exp -> . exp DESIGUAL exp
    (79) exp -> . exp MAYOR exp
    (80) exp -> . exp MENOR exp
    (81) exp -> . exp MAYORIGUAL exp
    (82) exp -> . exp MENORIGUAL exp
    (83) exp -> . exp AND exp
    (84) exp -> . exp OR exp
    (85) exp -> . exp BAND exp
    (86) exp -> . exp BOR exp
    (87) exp -> . exp BXOR exp
    (88) exp -> . exp BLEFT exp
    (89) exp -> . exp BRIGHT exp
    (90) exp -> . RESTA exp
    (91) exp -> . NOT exp
    (92) exp -> . BNOT exp
    (93) exp -> . sizeof exp
    (94) exp -> . IZQPAR exp DERPAR
    (95) exp -> . IZQPAR TYPE DERPAR exp
    (96) exp -> . exp ASK exp DP exp
    (97) exp -> . DOUBLE
    (98) exp -> . INTEGER
    (99) exp -> . ident
    (100) exp -> . ident lacs
    (101) exp -> . STR
    (102) exp -> . IZQCOR lex DERCOR
    (67) ident -> . ID

    scanf           shift and go to state 34
    RESTA           shift and go to state 36
    NOT             shift and go to state 37
    BNOT            shift and go to state 38
    sizeof          shift and go to state 39
    IZQPAR          shift and go to state 35
    DOUBLE          shift and go to state 40
    INTEGER         shift and go to state 41
    STR             shift and go to state 42
    IZQCOR          shift and go to state 43
    ID              shift and go to state 44

    exp                            shift and go to state 97
    ident                          shift and go to state 32

state 37

    (91) exp -> NOT . exp
    (64) exp -> . scanf IZQPAR DERPAR
    (72) exp -> . exp SUMA exp
    (73) exp -> . exp RESTA exp
    (74) exp -> . exp MULTI exp
    (75) exp -> . exp DIV exp
    (76) exp -> . exp PORCENTAJE exp
    (77) exp -> . exp DIGUAL exp
    (78) exp -> . exp DESIGUAL exp
    (79) exp -> . exp MAYOR exp
    (80) exp -> . exp MENOR exp
    (81) exp -> . exp MAYORIGUAL exp
    (82) exp -> . exp MENORIGUAL exp
    (83) exp -> . exp AND exp
    (84) exp -> . exp OR exp
    (85) exp -> . exp BAND exp
    (86) exp -> . exp BOR exp
    (87) exp -> . exp BXOR exp
    (88) exp -> . exp BLEFT exp
    (89) exp -> . exp BRIGHT exp
    (90) exp -> . RESTA exp
    (91) exp -> . NOT exp
    (92) exp -> . BNOT exp
    (93) exp -> . sizeof exp
    (94) exp -> . IZQPAR exp DERPAR
    (95) exp -> . IZQPAR TYPE DERPAR exp
    (96) exp -> . exp ASK exp DP exp
    (97) exp -> . DOUBLE
    (98) exp -> . INTEGER
    (99) exp -> . ident
    (100) exp -> . ident lacs
    (101) exp -> . STR
    (102) exp -> . IZQCOR lex DERCOR
    (67) ident -> . ID

    scanf           shift and go to state 34
    RESTA           shift and go to state 36
    NOT             shift and go to state 37
    BNOT            shift and go to state 38
    sizeof          shift and go to state 39
    IZQPAR          shift and go to state 35
    DOUBLE          shift and go to state 40
    INTEGER         shift and go to state 41
    STR             shift and go to state 42
    IZQCOR          shift and go to state 43
    ID              shift and go to state 44

    exp                            shift and go to state 98
    ident                          shift and go to state 32

state 38

    (92) exp -> BNOT . exp
    (64) exp -> . scanf IZQPAR DERPAR
    (72) exp -> . exp SUMA exp
    (73) exp -> . exp RESTA exp
    (74) exp -> . exp MULTI exp
    (75) exp -> . exp DIV exp
    (76) exp -> . exp PORCENTAJE exp
    (77) exp -> . exp DIGUAL exp
    (78) exp -> . exp DESIGUAL exp
    (79) exp -> . exp MAYOR exp
    (80) exp -> . exp MENOR exp
    (81) exp -> . exp MAYORIGUAL exp
    (82) exp -> . exp MENORIGUAL exp
    (83) exp -> . exp AND exp
    (84) exp -> . exp OR exp
    (85) exp -> . exp BAND exp
    (86) exp -> . exp BOR exp
    (87) exp -> . exp BXOR exp
    (88) exp -> . exp BLEFT exp
    (89) exp -> . exp BRIGHT exp
    (90) exp -> . RESTA exp
    (91) exp -> . NOT exp
    (92) exp -> . BNOT exp
    (93) exp -> . sizeof exp
    (94) exp -> . IZQPAR exp DERPAR
    (95) exp -> . IZQPAR TYPE DERPAR exp
    (96) exp -> . exp ASK exp DP exp
    (97) exp -> . DOUBLE
    (98) exp -> . INTEGER
    (99) exp -> . ident
    (100) exp -> . ident lacs
    (101) exp -> . STR
    (102) exp -> . IZQCOR lex DERCOR
    (67) ident -> . ID

    scanf           shift and go to state 34
    RESTA           shift and go to state 36
    NOT             shift and go to state 37
    BNOT            shift and go to state 38
    sizeof          shift and go to state 39
    IZQPAR          shift and go to state 35
    DOUBLE          shift and go to state 40
    INTEGER         shift and go to state 41
    STR             shift and go to state 42
    IZQCOR          shift and go to state 43
    ID              shift and go to state 44

    exp                            shift and go to state 99
    ident                          shift and go to state 32

state 39

    (93) exp -> sizeof . exp
    (64) exp -> . scanf IZQPAR DERPAR
    (72) exp -> . exp SUMA exp
    (73) exp -> . exp RESTA exp
    (74) exp -> . exp MULTI exp
    (75) exp -> . exp DIV exp
    (76) exp -> . exp PORCENTAJE exp
    (77) exp -> . exp DIGUAL exp
    (78) exp -> . exp DESIGUAL exp
    (79) exp -> . exp MAYOR exp
    (80) exp -> . exp MENOR exp
    (81) exp -> . exp MAYORIGUAL exp
    (82) exp -> . exp MENORIGUAL exp
    (83) exp -> . exp AND exp
    (84) exp -> . exp OR exp
    (85) exp -> . exp BAND exp
    (86) exp -> . exp BOR exp
    (87) exp -> . exp BXOR exp
    (88) exp -> . exp BLEFT exp
    (89) exp -> . exp BRIGHT exp
    (90) exp -> . RESTA exp
    (91) exp -> . NOT exp
    (92) exp -> . BNOT exp
    (93) exp -> . sizeof exp
    (94) exp -> . IZQPAR exp DERPAR
    (95) exp -> . IZQPAR TYPE DERPAR exp
    (96) exp -> . exp ASK exp DP exp
    (97) exp -> . DOUBLE
    (98) exp -> . INTEGER
    (99) exp -> . ident
    (100) exp -> . ident lacs
    (101) exp -> . STR
    (102) exp -> . IZQCOR lex DERCOR
    (67) ident -> . ID

    scanf           shift and go to state 34
    RESTA           shift and go to state 36
    NOT             shift and go to state 37
    BNOT            shift and go to state 38
    sizeof          shift and go to state 39
    IZQPAR          shift and go to state 35
    DOUBLE          shift and go to state 40
    INTEGER         shift and go to state 41
    STR             shift and go to state 42
    IZQCOR          shift and go to state 43
    ID              shift and go to state 44

    exp                            shift and go to state 100
    ident                          shift and go to state 32

state 40

    (97) exp -> DOUBLE .

    SUMA            reduce using rule 97 (exp -> DOUBLE .)
    RESTA           reduce using rule 97 (exp -> DOUBLE .)
    MULTI           reduce using rule 97 (exp -> DOUBLE .)
    DIV             reduce using rule 97 (exp -> DOUBLE .)
    PORCENTAJE      reduce using rule 97 (exp -> DOUBLE .)
    DIGUAL          reduce using rule 97 (exp -> DOUBLE .)
    DESIGUAL        reduce using rule 97 (exp -> DOUBLE .)
    MAYOR           reduce using rule 97 (exp -> DOUBLE .)
    MENOR           reduce using rule 97 (exp -> DOUBLE .)
    MAYORIGUAL      reduce using rule 97 (exp -> DOUBLE .)
    MENORIGUAL      reduce using rule 97 (exp -> DOUBLE .)
    AND             reduce using rule 97 (exp -> DOUBLE .)
    OR              reduce using rule 97 (exp -> DOUBLE .)
    BAND            reduce using rule 97 (exp -> DOUBLE .)
    BOR             reduce using rule 97 (exp -> DOUBLE .)
    BXOR            reduce using rule 97 (exp -> DOUBLE .)
    BLEFT           reduce using rule 97 (exp -> DOUBLE .)
    BRIGHT          reduce using rule 97 (exp -> DOUBLE .)
    ASK             reduce using rule 97 (exp -> DOUBLE .)
    PCOMA           reduce using rule 97 (exp -> DOUBLE .)
    DERPAR          reduce using rule 97 (exp -> DOUBLE .)
    DERLLAVE        reduce using rule 97 (exp -> DOUBLE .)
    DERCOR          reduce using rule 97 (exp -> DOUBLE .)
    COMA            reduce using rule 97 (exp -> DOUBLE .)
    DP              reduce using rule 97 (exp -> DOUBLE .)


state 41

    (98) exp -> INTEGER .

    SUMA            reduce using rule 98 (exp -> INTEGER .)
    RESTA           reduce using rule 98 (exp -> INTEGER .)
    MULTI           reduce using rule 98 (exp -> INTEGER .)
    DIV             reduce using rule 98 (exp -> INTEGER .)
    PORCENTAJE      reduce using rule 98 (exp -> INTEGER .)
    DIGUAL          reduce using rule 98 (exp -> INTEGER .)
    DESIGUAL        reduce using rule 98 (exp -> INTEGER .)
    MAYOR           reduce using rule 98 (exp -> INTEGER .)
    MENOR           reduce using rule 98 (exp -> INTEGER .)
    MAYORIGUAL      reduce using rule 98 (exp -> INTEGER .)
    MENORIGUAL      reduce using rule 98 (exp -> INTEGER .)
    AND             reduce using rule 98 (exp -> INTEGER .)
    OR              reduce using rule 98 (exp -> INTEGER .)
    BAND            reduce using rule 98 (exp -> INTEGER .)
    BOR             reduce using rule 98 (exp -> INTEGER .)
    BXOR            reduce using rule 98 (exp -> INTEGER .)
    BLEFT           reduce using rule 98 (exp -> INTEGER .)
    BRIGHT          reduce using rule 98 (exp -> INTEGER .)
    ASK             reduce using rule 98 (exp -> INTEGER .)
    PCOMA           reduce using rule 98 (exp -> INTEGER .)
    DERPAR          reduce using rule 98 (exp -> INTEGER .)
    DERLLAVE        reduce using rule 98 (exp -> INTEGER .)
    DERCOR          reduce using rule 98 (exp -> INTEGER .)
    COMA            reduce using rule 98 (exp -> INTEGER .)
    DP              reduce using rule 98 (exp -> INTEGER .)


state 42

    (101) exp -> STR .

    SUMA            reduce using rule 101 (exp -> STR .)
    RESTA           reduce using rule 101 (exp -> STR .)
    MULTI           reduce using rule 101 (exp -> STR .)
    DIV             reduce using rule 101 (exp -> STR .)
    PORCENTAJE      reduce using rule 101 (exp -> STR .)
    DIGUAL          reduce using rule 101 (exp -> STR .)
    DESIGUAL        reduce using rule 101 (exp -> STR .)
    MAYOR           reduce using rule 101 (exp -> STR .)
    MENOR           reduce using rule 101 (exp -> STR .)
    MAYORIGUAL      reduce using rule 101 (exp -> STR .)
    MENORIGUAL      reduce using rule 101 (exp -> STR .)
    AND             reduce using rule 101 (exp -> STR .)
    OR              reduce using rule 101 (exp -> STR .)
    BAND            reduce using rule 101 (exp -> STR .)
    BOR             reduce using rule 101 (exp -> STR .)
    BXOR            reduce using rule 101 (exp -> STR .)
    BLEFT           reduce using rule 101 (exp -> STR .)
    BRIGHT          reduce using rule 101 (exp -> STR .)
    ASK             reduce using rule 101 (exp -> STR .)
    PCOMA           reduce using rule 101 (exp -> STR .)
    DERPAR          reduce using rule 101 (exp -> STR .)
    DERLLAVE        reduce using rule 101 (exp -> STR .)
    DERCOR          reduce using rule 101 (exp -> STR .)
    COMA            reduce using rule 101 (exp -> STR .)
    DP              reduce using rule 101 (exp -> STR .)


state 43

    (102) exp -> IZQCOR . lex DERCOR
    (28) lex -> . lex COMA exp
    (29) lex -> . exp
    (64) exp -> . scanf IZQPAR DERPAR
    (72) exp -> . exp SUMA exp
    (73) exp -> . exp RESTA exp
    (74) exp -> . exp MULTI exp
    (75) exp -> . exp DIV exp
    (76) exp -> . exp PORCENTAJE exp
    (77) exp -> . exp DIGUAL exp
    (78) exp -> . exp DESIGUAL exp
    (79) exp -> . exp MAYOR exp
    (80) exp -> . exp MENOR exp
    (81) exp -> . exp MAYORIGUAL exp
    (82) exp -> . exp MENORIGUAL exp
    (83) exp -> . exp AND exp
    (84) exp -> . exp OR exp
    (85) exp -> . exp BAND exp
    (86) exp -> . exp BOR exp
    (87) exp -> . exp BXOR exp
    (88) exp -> . exp BLEFT exp
    (89) exp -> . exp BRIGHT exp
    (90) exp -> . RESTA exp
    (91) exp -> . NOT exp
    (92) exp -> . BNOT exp
    (93) exp -> . sizeof exp
    (94) exp -> . IZQPAR exp DERPAR
    (95) exp -> . IZQPAR TYPE DERPAR exp
    (96) exp -> . exp ASK exp DP exp
    (97) exp -> . DOUBLE
    (98) exp -> . INTEGER
    (99) exp -> . ident
    (100) exp -> . ident lacs
    (101) exp -> . STR
    (102) exp -> . IZQCOR lex DERCOR
    (67) ident -> . ID

    scanf           shift and go to state 34
    RESTA           shift and go to state 36
    NOT             shift and go to state 37
    BNOT            shift and go to state 38
    sizeof          shift and go to state 39
    IZQPAR          shift and go to state 35
    DOUBLE          shift and go to state 40
    INTEGER         shift and go to state 41
    STR             shift and go to state 42
    IZQCOR          shift and go to state 43
    ID              shift and go to state 44

    lex                            shift and go to state 101
    exp                            shift and go to state 102
    ident                          shift and go to state 32

state 44

    (67) ident -> ID .

    IZQLLAVE        reduce using rule 67 (ident -> ID .)
    PUNTO           reduce using rule 67 (ident -> ID .)
    SUMA            reduce using rule 67 (ident -> ID .)
    RESTA           reduce using rule 67 (ident -> ID .)
    MULTI           reduce using rule 67 (ident -> ID .)
    DIV             reduce using rule 67 (ident -> ID .)
    PORCENTAJE      reduce using rule 67 (ident -> ID .)
    DIGUAL          reduce using rule 67 (ident -> ID .)
    DESIGUAL        reduce using rule 67 (ident -> ID .)
    MAYOR           reduce using rule 67 (ident -> ID .)
    MENOR           reduce using rule 67 (ident -> ID .)
    MAYORIGUAL      reduce using rule 67 (ident -> ID .)
    MENORIGUAL      reduce using rule 67 (ident -> ID .)
    AND             reduce using rule 67 (ident -> ID .)
    OR              reduce using rule 67 (ident -> ID .)
    BAND            reduce using rule 67 (ident -> ID .)
    BOR             reduce using rule 67 (ident -> ID .)
    BXOR            reduce using rule 67 (ident -> ID .)
    BLEFT           reduce using rule 67 (ident -> ID .)
    BRIGHT          reduce using rule 67 (ident -> ID .)
    ASK             reduce using rule 67 (ident -> ID .)
    PCOMA           reduce using rule 67 (ident -> ID .)
    DERPAR          reduce using rule 67 (ident -> ID .)
    DERLLAVE        reduce using rule 67 (ident -> ID .)
    IGUAL           reduce using rule 67 (ident -> ID .)
    INCE            reduce using rule 67 (ident -> ID .)
    DECRE           reduce using rule 67 (ident -> ID .)
    IZQPAR          reduce using rule 67 (ident -> ID .)
    DP              reduce using rule 67 (ident -> ID .)
    COMA            reduce using rule 67 (ident -> ID .)
    DERCOR          reduce using rule 67 (ident -> ID .)


state 45

    (70) acs -> IZQLLAVE exp . DERLLAVE
    (72) exp -> exp . SUMA exp
    (73) exp -> exp . RESTA exp
    (74) exp -> exp . MULTI exp
    (75) exp -> exp . DIV exp
    (76) exp -> exp . PORCENTAJE exp
    (77) exp -> exp . DIGUAL exp
    (78) exp -> exp . DESIGUAL exp
    (79) exp -> exp . MAYOR exp
    (80) exp -> exp . MENOR exp
    (81) exp -> exp . MAYORIGUAL exp
    (82) exp -> exp . MENORIGUAL exp
    (83) exp -> exp . AND exp
    (84) exp -> exp . OR exp
    (85) exp -> exp . BAND exp
    (86) exp -> exp . BOR exp
    (87) exp -> exp . BXOR exp
    (88) exp -> exp . BLEFT exp
    (89) exp -> exp . BRIGHT exp
    (96) exp -> exp . ASK exp DP exp

    DERLLAVE        shift and go to state 103
    SUMA            shift and go to state 75
    RESTA           shift and go to state 76
    MULTI           shift and go to state 77
    DIV             shift and go to state 78
    PORCENTAJE      shift and go to state 79
    DIGUAL          shift and go to state 80
    DESIGUAL        shift and go to state 81
    MAYOR           shift and go to state 82
    MENOR           shift and go to state 83
    MAYORIGUAL      shift and go to state 84
    MENORIGUAL      shift and go to state 85
    AND             shift and go to state 86
    OR              shift and go to state 87
    BAND            shift and go to state 88
    BOR             shift and go to state 89
    BXOR            shift and go to state 90
    BLEFT           shift and go to state 91
    BRIGHT          shift and go to state 92
    ASK             shift and go to state 93


state 46

    (71) acs -> PUNTO ID .

    IGUAL           reduce using rule 71 (acs -> PUNTO ID .)
    IZQLLAVE        reduce using rule 71 (acs -> PUNTO ID .)
    PUNTO           reduce using rule 71 (acs -> PUNTO ID .)
    SUMA            reduce using rule 71 (acs -> PUNTO ID .)
    RESTA           reduce using rule 71 (acs -> PUNTO ID .)
    MULTI           reduce using rule 71 (acs -> PUNTO ID .)
    DIV             reduce using rule 71 (acs -> PUNTO ID .)
    PORCENTAJE      reduce using rule 71 (acs -> PUNTO ID .)
    DIGUAL          reduce using rule 71 (acs -> PUNTO ID .)
    DESIGUAL        reduce using rule 71 (acs -> PUNTO ID .)
    MAYOR           reduce using rule 71 (acs -> PUNTO ID .)
    MENOR           reduce using rule 71 (acs -> PUNTO ID .)
    MAYORIGUAL      reduce using rule 71 (acs -> PUNTO ID .)
    MENORIGUAL      reduce using rule 71 (acs -> PUNTO ID .)
    AND             reduce using rule 71 (acs -> PUNTO ID .)
    OR              reduce using rule 71 (acs -> PUNTO ID .)
    BAND            reduce using rule 71 (acs -> PUNTO ID .)
    BOR             reduce using rule 71 (acs -> PUNTO ID .)
    BXOR            reduce using rule 71 (acs -> PUNTO ID .)
    BLEFT           reduce using rule 71 (acs -> PUNTO ID .)
    BRIGHT          reduce using rule 71 (acs -> PUNTO ID .)
    ASK             reduce using rule 71 (acs -> PUNTO ID .)
    PCOMA           reduce using rule 71 (acs -> PUNTO ID .)
    DERPAR          reduce using rule 71 (acs -> PUNTO ID .)
    DERLLAVE        reduce using rule 71 (acs -> PUNTO ID .)
    DERCOR          reduce using rule 71 (acs -> PUNTO ID .)
    COMA            reduce using rule 71 (acs -> PUNTO ID .)
    DP              reduce using rule 71 (acs -> PUNTO ID .)
    INCE            reduce using rule 71 (acs -> PUNTO ID .)
    DECRE           reduce using rule 71 (acs -> PUNTO ID .)


state 47

    (6) body -> struct ID IZQCOR linst . DERCOR
    (8) linst -> linst . inst
    (14) inst -> . asig PCOMA
    (15) inst -> . para
    (16) inst -> . si
    (17) inst -> . mientras
    (18) inst -> . cual
    (19) inst -> . call
    (20) inst -> . dow
    (21) inst -> . prin
    (22) inst -> . decla PCOMA
    (23) inst -> . tag
    (24) inst -> . gotot PCOMA
    (32) asig -> . ident lacs IGUAL exp
    (33) asig -> . ident IGUAL exp
    (34) asig -> . ident lacs INCE
    (35) asig -> . ident INCE
    (36) asig -> . ident lacs DECRE
    (37) asig -> . ident DECRE
    (49) para -> . for IZQPAR para1 exp PCOMA para2 DERPAR IZQCOR linst DERCOR
    (42) si -> . if IZQPAR exp DERPAR IZQCOR linst DERCOR lelsi els
    (43) si -> . if IZQPAR exp DERPAR IZQCOR linst DERCOR els
    (40) mientras -> . while IZQPAR exp DERPAR IZQCOR linst DERCOR
    (55) cual -> . switch IZQPAR exp DERPAR IZQCOR lcase def DERCOR
    (25) call -> . ident IZQPAR plex DERPAR PCOMA
    (41) dow -> . do IZQCOR linst DERCOR while IZQPAR exp DERPAR PCOMA
    (62) prin -> . printf IZQPAR STR lexpr DERPAR PCOMA
    (63) prin -> . printf IZQPAR STR DERPAR PCOMA
    (38) decla -> . TYPE ident lacs IGUAL exp
    (39) decla -> . TYPE ident IGUAL exp
    (30) tag -> . ident DP
    (31) gotot -> . goto ident
    (67) ident -> . ID
    (103) TYPE -> . int
    (104) TYPE -> . float
    (105) TYPE -> . char
    (106) TYPE -> . double
    (107) TYPE -> . void

    DERCOR          shift and go to state 104
    for             shift and go to state 61
    if              shift and go to state 62
    while           shift and go to state 63
    switch          shift and go to state 64
    do              shift and go to state 65
    printf          shift and go to state 66
    goto            shift and go to state 68
    ID              shift and go to state 44
    int             shift and go to state 7
    float           shift and go to state 8
    char            shift and go to state 9
    double          shift and go to state 10
    void            shift and go to state 11

    inst                           shift and go to state 105
    asig                           shift and go to state 49
    para                           shift and go to state 50
    si                             shift and go to state 51
    mientras                       shift and go to state 52
    cual                           shift and go to state 53
    call                           shift and go to state 54
    dow                            shift and go to state 55
    prin                           shift and go to state 56
    decla                          shift and go to state 57
    tag                            shift and go to state 58
    gotot                          shift and go to state 59
    ident                          shift and go to state 60
    TYPE                           shift and go to state 67

state 48

    (9) linst -> inst .

    DERCOR          reduce using rule 9 (linst -> inst .)
    for             reduce using rule 9 (linst -> inst .)
    if              reduce using rule 9 (linst -> inst .)
    while           reduce using rule 9 (linst -> inst .)
    switch          reduce using rule 9 (linst -> inst .)
    do              reduce using rule 9 (linst -> inst .)
    printf          reduce using rule 9 (linst -> inst .)
    goto            reduce using rule 9 (linst -> inst .)
    ID              reduce using rule 9 (linst -> inst .)
    int             reduce using rule 9 (linst -> inst .)
    float           reduce using rule 9 (linst -> inst .)
    char            reduce using rule 9 (linst -> inst .)
    double          reduce using rule 9 (linst -> inst .)
    void            reduce using rule 9 (linst -> inst .)
    break           reduce using rule 9 (linst -> inst .)
    default         reduce using rule 9 (linst -> inst .)
    case            reduce using rule 9 (linst -> inst .)


state 49

    (14) inst -> asig . PCOMA

    PCOMA           shift and go to state 106


state 50

    (15) inst -> para .

    DERCOR          reduce using rule 15 (inst -> para .)
    for             reduce using rule 15 (inst -> para .)
    if              reduce using rule 15 (inst -> para .)
    while           reduce using rule 15 (inst -> para .)
    switch          reduce using rule 15 (inst -> para .)
    do              reduce using rule 15 (inst -> para .)
    printf          reduce using rule 15 (inst -> para .)
    goto            reduce using rule 15 (inst -> para .)
    ID              reduce using rule 15 (inst -> para .)
    int             reduce using rule 15 (inst -> para .)
    float           reduce using rule 15 (inst -> para .)
    char            reduce using rule 15 (inst -> para .)
    double          reduce using rule 15 (inst -> para .)
    void            reduce using rule 15 (inst -> para .)
    break           reduce using rule 15 (inst -> para .)
    default         reduce using rule 15 (inst -> para .)
    case            reduce using rule 15 (inst -> para .)


state 51

    (16) inst -> si .

    DERCOR          reduce using rule 16 (inst -> si .)
    for             reduce using rule 16 (inst -> si .)
    if              reduce using rule 16 (inst -> si .)
    while           reduce using rule 16 (inst -> si .)
    switch          reduce using rule 16 (inst -> si .)
    do              reduce using rule 16 (inst -> si .)
    printf          reduce using rule 16 (inst -> si .)
    goto            reduce using rule 16 (inst -> si .)
    ID              reduce using rule 16 (inst -> si .)
    int             reduce using rule 16 (inst -> si .)
    float           reduce using rule 16 (inst -> si .)
    char            reduce using rule 16 (inst -> si .)
    double          reduce using rule 16 (inst -> si .)
    void            reduce using rule 16 (inst -> si .)
    break           reduce using rule 16 (inst -> si .)
    default         reduce using rule 16 (inst -> si .)
    case            reduce using rule 16 (inst -> si .)


state 52

    (17) inst -> mientras .

    DERCOR          reduce using rule 17 (inst -> mientras .)
    for             reduce using rule 17 (inst -> mientras .)
    if              reduce using rule 17 (inst -> mientras .)
    while           reduce using rule 17 (inst -> mientras .)
    switch          reduce using rule 17 (inst -> mientras .)
    do              reduce using rule 17 (inst -> mientras .)
    printf          reduce using rule 17 (inst -> mientras .)
    goto            reduce using rule 17 (inst -> mientras .)
    ID              reduce using rule 17 (inst -> mientras .)
    int             reduce using rule 17 (inst -> mientras .)
    float           reduce using rule 17 (inst -> mientras .)
    char            reduce using rule 17 (inst -> mientras .)
    double          reduce using rule 17 (inst -> mientras .)
    void            reduce using rule 17 (inst -> mientras .)
    break           reduce using rule 17 (inst -> mientras .)
    default         reduce using rule 17 (inst -> mientras .)
    case            reduce using rule 17 (inst -> mientras .)


state 53

    (18) inst -> cual .

    DERCOR          reduce using rule 18 (inst -> cual .)
    for             reduce using rule 18 (inst -> cual .)
    if              reduce using rule 18 (inst -> cual .)
    while           reduce using rule 18 (inst -> cual .)
    switch          reduce using rule 18 (inst -> cual .)
    do              reduce using rule 18 (inst -> cual .)
    printf          reduce using rule 18 (inst -> cual .)
    goto            reduce using rule 18 (inst -> cual .)
    ID              reduce using rule 18 (inst -> cual .)
    int             reduce using rule 18 (inst -> cual .)
    float           reduce using rule 18 (inst -> cual .)
    char            reduce using rule 18 (inst -> cual .)
    double          reduce using rule 18 (inst -> cual .)
    void            reduce using rule 18 (inst -> cual .)
    break           reduce using rule 18 (inst -> cual .)
    default         reduce using rule 18 (inst -> cual .)
    case            reduce using rule 18 (inst -> cual .)


state 54

    (19) inst -> call .

    DERCOR          reduce using rule 19 (inst -> call .)
    for             reduce using rule 19 (inst -> call .)
    if              reduce using rule 19 (inst -> call .)
    while           reduce using rule 19 (inst -> call .)
    switch          reduce using rule 19 (inst -> call .)
    do              reduce using rule 19 (inst -> call .)
    printf          reduce using rule 19 (inst -> call .)
    goto            reduce using rule 19 (inst -> call .)
    ID              reduce using rule 19 (inst -> call .)
    int             reduce using rule 19 (inst -> call .)
    float           reduce using rule 19 (inst -> call .)
    char            reduce using rule 19 (inst -> call .)
    double          reduce using rule 19 (inst -> call .)
    void            reduce using rule 19 (inst -> call .)
    break           reduce using rule 19 (inst -> call .)
    default         reduce using rule 19 (inst -> call .)
    case            reduce using rule 19 (inst -> call .)


state 55

    (20) inst -> dow .

    DERCOR          reduce using rule 20 (inst -> dow .)
    for             reduce using rule 20 (inst -> dow .)
    if              reduce using rule 20 (inst -> dow .)
    while           reduce using rule 20 (inst -> dow .)
    switch          reduce using rule 20 (inst -> dow .)
    do              reduce using rule 20 (inst -> dow .)
    printf          reduce using rule 20 (inst -> dow .)
    goto            reduce using rule 20 (inst -> dow .)
    ID              reduce using rule 20 (inst -> dow .)
    int             reduce using rule 20 (inst -> dow .)
    float           reduce using rule 20 (inst -> dow .)
    char            reduce using rule 20 (inst -> dow .)
    double          reduce using rule 20 (inst -> dow .)
    void            reduce using rule 20 (inst -> dow .)
    break           reduce using rule 20 (inst -> dow .)
    default         reduce using rule 20 (inst -> dow .)
    case            reduce using rule 20 (inst -> dow .)


state 56

    (21) inst -> prin .

    DERCOR          reduce using rule 21 (inst -> prin .)
    for             reduce using rule 21 (inst -> prin .)
    if              reduce using rule 21 (inst -> prin .)
    while           reduce using rule 21 (inst -> prin .)
    switch          reduce using rule 21 (inst -> prin .)
    do              reduce using rule 21 (inst -> prin .)
    printf          reduce using rule 21 (inst -> prin .)
    goto            reduce using rule 21 (inst -> prin .)
    ID              reduce using rule 21 (inst -> prin .)
    int             reduce using rule 21 (inst -> prin .)
    float           reduce using rule 21 (inst -> prin .)
    char            reduce using rule 21 (inst -> prin .)
    double          reduce using rule 21 (inst -> prin .)
    void            reduce using rule 21 (inst -> prin .)
    break           reduce using rule 21 (inst -> prin .)
    default         reduce using rule 21 (inst -> prin .)
    case            reduce using rule 21 (inst -> prin .)


state 57

    (22) inst -> decla . PCOMA

    PCOMA           shift and go to state 107


state 58

    (23) inst -> tag .

    DERCOR          reduce using rule 23 (inst -> tag .)
    for             reduce using rule 23 (inst -> tag .)
    if              reduce using rule 23 (inst -> tag .)
    while           reduce using rule 23 (inst -> tag .)
    switch          reduce using rule 23 (inst -> tag .)
    do              reduce using rule 23 (inst -> tag .)
    printf          reduce using rule 23 (inst -> tag .)
    goto            reduce using rule 23 (inst -> tag .)
    ID              reduce using rule 23 (inst -> tag .)
    int             reduce using rule 23 (inst -> tag .)
    float           reduce using rule 23 (inst -> tag .)
    char            reduce using rule 23 (inst -> tag .)
    double          reduce using rule 23 (inst -> tag .)
    void            reduce using rule 23 (inst -> tag .)
    break           reduce using rule 23 (inst -> tag .)
    default         reduce using rule 23 (inst -> tag .)
    case            reduce using rule 23 (inst -> tag .)


state 59

    (24) inst -> gotot . PCOMA

    PCOMA           shift and go to state 108


state 60

    (32) asig -> ident . lacs IGUAL exp
    (33) asig -> ident . IGUAL exp
    (34) asig -> ident . lacs INCE
    (35) asig -> ident . INCE
    (36) asig -> ident . lacs DECRE
    (37) asig -> ident . DECRE
    (25) call -> ident . IZQPAR plex DERPAR PCOMA
    (30) tag -> ident . DP
    (68) lacs -> . lacs acs
    (69) lacs -> . acs
    (70) acs -> . IZQLLAVE exp DERLLAVE
    (71) acs -> . PUNTO ID

    IGUAL           shift and go to state 110
    INCE            shift and go to state 111
    DECRE           shift and go to state 112
    IZQPAR          shift and go to state 113
    DP              shift and go to state 114
    IZQLLAVE        shift and go to state 23
    PUNTO           shift and go to state 24

    lacs                           shift and go to state 109
    acs                            shift and go to state 22

state 61

    (49) para -> for . IZQPAR para1 exp PCOMA para2 DERPAR IZQCOR linst DERCOR

    IZQPAR          shift and go to state 115


state 62

    (42) si -> if . IZQPAR exp DERPAR IZQCOR linst DERCOR lelsi els
    (43) si -> if . IZQPAR exp DERPAR IZQCOR linst DERCOR els

    IZQPAR          shift and go to state 116


state 63

    (40) mientras -> while . IZQPAR exp DERPAR IZQCOR linst DERCOR

    IZQPAR          shift and go to state 117


state 64

    (55) cual -> switch . IZQPAR exp DERPAR IZQCOR lcase def DERCOR

    IZQPAR          shift and go to state 118


state 65

    (41) dow -> do . IZQCOR linst DERCOR while IZQPAR exp DERPAR PCOMA

    IZQCOR          shift and go to state 119


state 66

    (62) prin -> printf . IZQPAR STR lexpr DERPAR PCOMA
    (63) prin -> printf . IZQPAR STR DERPAR PCOMA

    IZQPAR          shift and go to state 120


state 67

    (38) decla -> TYPE . ident lacs IGUAL exp
    (39) decla -> TYPE . ident IGUAL exp
    (67) ident -> . ID

    ID              shift and go to state 44

    ident                          shift and go to state 15

state 68

    (31) gotot -> goto . ident
    (67) ident -> . ID

    ID              shift and go to state 44

    ident                          shift and go to state 121

state 69

    (13) lparam -> TYPE ident .

    COMA            reduce using rule 13 (lparam -> TYPE ident .)
    DERPAR          reduce using rule 13 (lparam -> TYPE ident .)


state 70

    (4) body -> TYPE ID IZQPAR lpam DERPAR . IZQCOR linst DERCOR

    IZQCOR          shift and go to state 122


state 71

    (12) lparam -> lparam COMA . TYPE ident
    (103) TYPE -> . int
    (104) TYPE -> . float
    (105) TYPE -> . char
    (106) TYPE -> . double
    (107) TYPE -> . void

    int             shift and go to state 7
    float           shift and go to state 8
    char            shift and go to state 9
    double          shift and go to state 10
    void            shift and go to state 11

    TYPE                           shift and go to state 123

state 72

    (5) body -> TYPE main IZQPAR lpam DERPAR . IZQCOR linst DERCOR

    IZQCOR          shift and go to state 124


state 73

    (38) decla -> TYPE ident lacs IGUAL exp .
    (72) exp -> exp . SUMA exp
    (73) exp -> exp . RESTA exp
    (74) exp -> exp . MULTI exp
    (75) exp -> exp . DIV exp
    (76) exp -> exp . PORCENTAJE exp
    (77) exp -> exp . DIGUAL exp
    (78) exp -> exp . DESIGUAL exp
    (79) exp -> exp . MAYOR exp
    (80) exp -> exp . MENOR exp
    (81) exp -> exp . MAYORIGUAL exp
    (82) exp -> exp . MENORIGUAL exp
    (83) exp -> exp . AND exp
    (84) exp -> exp . OR exp
    (85) exp -> exp . BAND exp
    (86) exp -> exp . BOR exp
    (87) exp -> exp . BXOR exp
    (88) exp -> exp . BLEFT exp
    (89) exp -> exp . BRIGHT exp
    (96) exp -> exp . ASK exp DP exp

    PCOMA           reduce using rule 38 (decla -> TYPE ident lacs IGUAL exp .)
    DERPAR          reduce using rule 38 (decla -> TYPE ident lacs IGUAL exp .)
    SUMA            shift and go to state 75
    RESTA           shift and go to state 76
    MULTI           shift and go to state 77
    DIV             shift and go to state 78
    PORCENTAJE      shift and go to state 79
    DIGUAL          shift and go to state 80
    DESIGUAL        shift and go to state 81
    MAYOR           shift and go to state 82
    MENOR           shift and go to state 83
    MAYORIGUAL      shift and go to state 84
    MENORIGUAL      shift and go to state 85
    AND             shift and go to state 86
    OR              shift and go to state 87
    BAND            shift and go to state 88
    BOR             shift and go to state 89
    BXOR            shift and go to state 90
    BLEFT           shift and go to state 91
    BRIGHT          shift and go to state 92
    ASK             shift and go to state 93


state 74

    (100) exp -> ident lacs .
    (68) lacs -> lacs . acs
    (70) acs -> . IZQLLAVE exp DERLLAVE
    (71) acs -> . PUNTO ID

    SUMA            reduce using rule 100 (exp -> ident lacs .)
    RESTA           reduce using rule 100 (exp -> ident lacs .)
    MULTI           reduce using rule 100 (exp -> ident lacs .)
    DIV             reduce using rule 100 (exp -> ident lacs .)
    PORCENTAJE      reduce using rule 100 (exp -> ident lacs .)
    DIGUAL          reduce using rule 100 (exp -> ident lacs .)
    DESIGUAL        reduce using rule 100 (exp -> ident lacs .)
    MAYOR           reduce using rule 100 (exp -> ident lacs .)
    MENOR           reduce using rule 100 (exp -> ident lacs .)
    MAYORIGUAL      reduce using rule 100 (exp -> ident lacs .)
    MENORIGUAL      reduce using rule 100 (exp -> ident lacs .)
    AND             reduce using rule 100 (exp -> ident lacs .)
    OR              reduce using rule 100 (exp -> ident lacs .)
    BAND            reduce using rule 100 (exp -> ident lacs .)
    BOR             reduce using rule 100 (exp -> ident lacs .)
    BXOR            reduce using rule 100 (exp -> ident lacs .)
    BLEFT           reduce using rule 100 (exp -> ident lacs .)
    BRIGHT          reduce using rule 100 (exp -> ident lacs .)
    ASK             reduce using rule 100 (exp -> ident lacs .)
    PCOMA           reduce using rule 100 (exp -> ident lacs .)
    DERPAR          reduce using rule 100 (exp -> ident lacs .)
    DERLLAVE        reduce using rule 100 (exp -> ident lacs .)
    DERCOR          reduce using rule 100 (exp -> ident lacs .)
    COMA            reduce using rule 100 (exp -> ident lacs .)
    DP              reduce using rule 100 (exp -> ident lacs .)
    IZQLLAVE        shift and go to state 23
    PUNTO           shift and go to state 24

    acs                            shift and go to state 31

state 75

    (72) exp -> exp SUMA . exp
    (64) exp -> . scanf IZQPAR DERPAR
    (72) exp -> . exp SUMA exp
    (73) exp -> . exp RESTA exp
    (74) exp -> . exp MULTI exp
    (75) exp -> . exp DIV exp
    (76) exp -> . exp PORCENTAJE exp
    (77) exp -> . exp DIGUAL exp
    (78) exp -> . exp DESIGUAL exp
    (79) exp -> . exp MAYOR exp
    (80) exp -> . exp MENOR exp
    (81) exp -> . exp MAYORIGUAL exp
    (82) exp -> . exp MENORIGUAL exp
    (83) exp -> . exp AND exp
    (84) exp -> . exp OR exp
    (85) exp -> . exp BAND exp
    (86) exp -> . exp BOR exp
    (87) exp -> . exp BXOR exp
    (88) exp -> . exp BLEFT exp
    (89) exp -> . exp BRIGHT exp
    (90) exp -> . RESTA exp
    (91) exp -> . NOT exp
    (92) exp -> . BNOT exp
    (93) exp -> . sizeof exp
    (94) exp -> . IZQPAR exp DERPAR
    (95) exp -> . IZQPAR TYPE DERPAR exp
    (96) exp -> . exp ASK exp DP exp
    (97) exp -> . DOUBLE
    (98) exp -> . INTEGER
    (99) exp -> . ident
    (100) exp -> . ident lacs
    (101) exp -> . STR
    (102) exp -> . IZQCOR lex DERCOR
    (67) ident -> . ID

    scanf           shift and go to state 34
    RESTA           shift and go to state 36
    NOT             shift and go to state 37
    BNOT            shift and go to state 38
    sizeof          shift and go to state 39
    IZQPAR          shift and go to state 35
    DOUBLE          shift and go to state 40
    INTEGER         shift and go to state 41
    STR             shift and go to state 42
    IZQCOR          shift and go to state 43
    ID              shift and go to state 44

    exp                            shift and go to state 125
    ident                          shift and go to state 32

state 76

    (73) exp -> exp RESTA . exp
    (64) exp -> . scanf IZQPAR DERPAR
    (72) exp -> . exp SUMA exp
    (73) exp -> . exp RESTA exp
    (74) exp -> . exp MULTI exp
    (75) exp -> . exp DIV exp
    (76) exp -> . exp PORCENTAJE exp
    (77) exp -> . exp DIGUAL exp
    (78) exp -> . exp DESIGUAL exp
    (79) exp -> . exp MAYOR exp
    (80) exp -> . exp MENOR exp
    (81) exp -> . exp MAYORIGUAL exp
    (82) exp -> . exp MENORIGUAL exp
    (83) exp -> . exp AND exp
    (84) exp -> . exp OR exp
    (85) exp -> . exp BAND exp
    (86) exp -> . exp BOR exp
    (87) exp -> . exp BXOR exp
    (88) exp -> . exp BLEFT exp
    (89) exp -> . exp BRIGHT exp
    (90) exp -> . RESTA exp
    (91) exp -> . NOT exp
    (92) exp -> . BNOT exp
    (93) exp -> . sizeof exp
    (94) exp -> . IZQPAR exp DERPAR
    (95) exp -> . IZQPAR TYPE DERPAR exp
    (96) exp -> . exp ASK exp DP exp
    (97) exp -> . DOUBLE
    (98) exp -> . INTEGER
    (99) exp -> . ident
    (100) exp -> . ident lacs
    (101) exp -> . STR
    (102) exp -> . IZQCOR lex DERCOR
    (67) ident -> . ID

    scanf           shift and go to state 34
    RESTA           shift and go to state 36
    NOT             shift and go to state 37
    BNOT            shift and go to state 38
    sizeof          shift and go to state 39
    IZQPAR          shift and go to state 35
    DOUBLE          shift and go to state 40
    INTEGER         shift and go to state 41
    STR             shift and go to state 42
    IZQCOR          shift and go to state 43
    ID              shift and go to state 44

    exp                            shift and go to state 126
    ident                          shift and go to state 32

state 77

    (74) exp -> exp MULTI . exp
    (64) exp -> . scanf IZQPAR DERPAR
    (72) exp -> . exp SUMA exp
    (73) exp -> . exp RESTA exp
    (74) exp -> . exp MULTI exp
    (75) exp -> . exp DIV exp
    (76) exp -> . exp PORCENTAJE exp
    (77) exp -> . exp DIGUAL exp
    (78) exp -> . exp DESIGUAL exp
    (79) exp -> . exp MAYOR exp
    (80) exp -> . exp MENOR exp
    (81) exp -> . exp MAYORIGUAL exp
    (82) exp -> . exp MENORIGUAL exp
    (83) exp -> . exp AND exp
    (84) exp -> . exp OR exp
    (85) exp -> . exp BAND exp
    (86) exp -> . exp BOR exp
    (87) exp -> . exp BXOR exp
    (88) exp -> . exp BLEFT exp
    (89) exp -> . exp BRIGHT exp
    (90) exp -> . RESTA exp
    (91) exp -> . NOT exp
    (92) exp -> . BNOT exp
    (93) exp -> . sizeof exp
    (94) exp -> . IZQPAR exp DERPAR
    (95) exp -> . IZQPAR TYPE DERPAR exp
    (96) exp -> . exp ASK exp DP exp
    (97) exp -> . DOUBLE
    (98) exp -> . INTEGER
    (99) exp -> . ident
    (100) exp -> . ident lacs
    (101) exp -> . STR
    (102) exp -> . IZQCOR lex DERCOR
    (67) ident -> . ID

    scanf           shift and go to state 34
    RESTA           shift and go to state 36
    NOT             shift and go to state 37
    BNOT            shift and go to state 38
    sizeof          shift and go to state 39
    IZQPAR          shift and go to state 35
    DOUBLE          shift and go to state 40
    INTEGER         shift and go to state 41
    STR             shift and go to state 42
    IZQCOR          shift and go to state 43
    ID              shift and go to state 44

    exp                            shift and go to state 127
    ident                          shift and go to state 32

state 78

    (75) exp -> exp DIV . exp
    (64) exp -> . scanf IZQPAR DERPAR
    (72) exp -> . exp SUMA exp
    (73) exp -> . exp RESTA exp
    (74) exp -> . exp MULTI exp
    (75) exp -> . exp DIV exp
    (76) exp -> . exp PORCENTAJE exp
    (77) exp -> . exp DIGUAL exp
    (78) exp -> . exp DESIGUAL exp
    (79) exp -> . exp MAYOR exp
    (80) exp -> . exp MENOR exp
    (81) exp -> . exp MAYORIGUAL exp
    (82) exp -> . exp MENORIGUAL exp
    (83) exp -> . exp AND exp
    (84) exp -> . exp OR exp
    (85) exp -> . exp BAND exp
    (86) exp -> . exp BOR exp
    (87) exp -> . exp BXOR exp
    (88) exp -> . exp BLEFT exp
    (89) exp -> . exp BRIGHT exp
    (90) exp -> . RESTA exp
    (91) exp -> . NOT exp
    (92) exp -> . BNOT exp
    (93) exp -> . sizeof exp
    (94) exp -> . IZQPAR exp DERPAR
    (95) exp -> . IZQPAR TYPE DERPAR exp
    (96) exp -> . exp ASK exp DP exp
    (97) exp -> . DOUBLE
    (98) exp -> . INTEGER
    (99) exp -> . ident
    (100) exp -> . ident lacs
    (101) exp -> . STR
    (102) exp -> . IZQCOR lex DERCOR
    (67) ident -> . ID

    scanf           shift and go to state 34
    RESTA           shift and go to state 36
    NOT             shift and go to state 37
    BNOT            shift and go to state 38
    sizeof          shift and go to state 39
    IZQPAR          shift and go to state 35
    DOUBLE          shift and go to state 40
    INTEGER         shift and go to state 41
    STR             shift and go to state 42
    IZQCOR          shift and go to state 43
    ID              shift and go to state 44

    exp                            shift and go to state 128
    ident                          shift and go to state 32

state 79

    (76) exp -> exp PORCENTAJE . exp
    (64) exp -> . scanf IZQPAR DERPAR
    (72) exp -> . exp SUMA exp
    (73) exp -> . exp RESTA exp
    (74) exp -> . exp MULTI exp
    (75) exp -> . exp DIV exp
    (76) exp -> . exp PORCENTAJE exp
    (77) exp -> . exp DIGUAL exp
    (78) exp -> . exp DESIGUAL exp
    (79) exp -> . exp MAYOR exp
    (80) exp -> . exp MENOR exp
    (81) exp -> . exp MAYORIGUAL exp
    (82) exp -> . exp MENORIGUAL exp
    (83) exp -> . exp AND exp
    (84) exp -> . exp OR exp
    (85) exp -> . exp BAND exp
    (86) exp -> . exp BOR exp
    (87) exp -> . exp BXOR exp
    (88) exp -> . exp BLEFT exp
    (89) exp -> . exp BRIGHT exp
    (90) exp -> . RESTA exp
    (91) exp -> . NOT exp
    (92) exp -> . BNOT exp
    (93) exp -> . sizeof exp
    (94) exp -> . IZQPAR exp DERPAR
    (95) exp -> . IZQPAR TYPE DERPAR exp
    (96) exp -> . exp ASK exp DP exp
    (97) exp -> . DOUBLE
    (98) exp -> . INTEGER
    (99) exp -> . ident
    (100) exp -> . ident lacs
    (101) exp -> . STR
    (102) exp -> . IZQCOR lex DERCOR
    (67) ident -> . ID

    scanf           shift and go to state 34
    RESTA           shift and go to state 36
    NOT             shift and go to state 37
    BNOT            shift and go to state 38
    sizeof          shift and go to state 39
    IZQPAR          shift and go to state 35
    DOUBLE          shift and go to state 40
    INTEGER         shift and go to state 41
    STR             shift and go to state 42
    IZQCOR          shift and go to state 43
    ID              shift and go to state 44

    exp                            shift and go to state 129
    ident                          shift and go to state 32

state 80

    (77) exp -> exp DIGUAL . exp
    (64) exp -> . scanf IZQPAR DERPAR
    (72) exp -> . exp SUMA exp
    (73) exp -> . exp RESTA exp
    (74) exp -> . exp MULTI exp
    (75) exp -> . exp DIV exp
    (76) exp -> . exp PORCENTAJE exp
    (77) exp -> . exp DIGUAL exp
    (78) exp -> . exp DESIGUAL exp
    (79) exp -> . exp MAYOR exp
    (80) exp -> . exp MENOR exp
    (81) exp -> . exp MAYORIGUAL exp
    (82) exp -> . exp MENORIGUAL exp
    (83) exp -> . exp AND exp
    (84) exp -> . exp OR exp
    (85) exp -> . exp BAND exp
    (86) exp -> . exp BOR exp
    (87) exp -> . exp BXOR exp
    (88) exp -> . exp BLEFT exp
    (89) exp -> . exp BRIGHT exp
    (90) exp -> . RESTA exp
    (91) exp -> . NOT exp
    (92) exp -> . BNOT exp
    (93) exp -> . sizeof exp
    (94) exp -> . IZQPAR exp DERPAR
    (95) exp -> . IZQPAR TYPE DERPAR exp
    (96) exp -> . exp ASK exp DP exp
    (97) exp -> . DOUBLE
    (98) exp -> . INTEGER
    (99) exp -> . ident
    (100) exp -> . ident lacs
    (101) exp -> . STR
    (102) exp -> . IZQCOR lex DERCOR
    (67) ident -> . ID

    scanf           shift and go to state 34
    RESTA           shift and go to state 36
    NOT             shift and go to state 37
    BNOT            shift and go to state 38
    sizeof          shift and go to state 39
    IZQPAR          shift and go to state 35
    DOUBLE          shift and go to state 40
    INTEGER         shift and go to state 41
    STR             shift and go to state 42
    IZQCOR          shift and go to state 43
    ID              shift and go to state 44

    exp                            shift and go to state 130
    ident                          shift and go to state 32

state 81

    (78) exp -> exp DESIGUAL . exp
    (64) exp -> . scanf IZQPAR DERPAR
    (72) exp -> . exp SUMA exp
    (73) exp -> . exp RESTA exp
    (74) exp -> . exp MULTI exp
    (75) exp -> . exp DIV exp
    (76) exp -> . exp PORCENTAJE exp
    (77) exp -> . exp DIGUAL exp
    (78) exp -> . exp DESIGUAL exp
    (79) exp -> . exp MAYOR exp
    (80) exp -> . exp MENOR exp
    (81) exp -> . exp MAYORIGUAL exp
    (82) exp -> . exp MENORIGUAL exp
    (83) exp -> . exp AND exp
    (84) exp -> . exp OR exp
    (85) exp -> . exp BAND exp
    (86) exp -> . exp BOR exp
    (87) exp -> . exp BXOR exp
    (88) exp -> . exp BLEFT exp
    (89) exp -> . exp BRIGHT exp
    (90) exp -> . RESTA exp
    (91) exp -> . NOT exp
    (92) exp -> . BNOT exp
    (93) exp -> . sizeof exp
    (94) exp -> . IZQPAR exp DERPAR
    (95) exp -> . IZQPAR TYPE DERPAR exp
    (96) exp -> . exp ASK exp DP exp
    (97) exp -> . DOUBLE
    (98) exp -> . INTEGER
    (99) exp -> . ident
    (100) exp -> . ident lacs
    (101) exp -> . STR
    (102) exp -> . IZQCOR lex DERCOR
    (67) ident -> . ID

    scanf           shift and go to state 34
    RESTA           shift and go to state 36
    NOT             shift and go to state 37
    BNOT            shift and go to state 38
    sizeof          shift and go to state 39
    IZQPAR          shift and go to state 35
    DOUBLE          shift and go to state 40
    INTEGER         shift and go to state 41
    STR             shift and go to state 42
    IZQCOR          shift and go to state 43
    ID              shift and go to state 44

    exp                            shift and go to state 131
    ident                          shift and go to state 32

state 82

    (79) exp -> exp MAYOR . exp
    (64) exp -> . scanf IZQPAR DERPAR
    (72) exp -> . exp SUMA exp
    (73) exp -> . exp RESTA exp
    (74) exp -> . exp MULTI exp
    (75) exp -> . exp DIV exp
    (76) exp -> . exp PORCENTAJE exp
    (77) exp -> . exp DIGUAL exp
    (78) exp -> . exp DESIGUAL exp
    (79) exp -> . exp MAYOR exp
    (80) exp -> . exp MENOR exp
    (81) exp -> . exp MAYORIGUAL exp
    (82) exp -> . exp MENORIGUAL exp
    (83) exp -> . exp AND exp
    (84) exp -> . exp OR exp
    (85) exp -> . exp BAND exp
    (86) exp -> . exp BOR exp
    (87) exp -> . exp BXOR exp
    (88) exp -> . exp BLEFT exp
    (89) exp -> . exp BRIGHT exp
    (90) exp -> . RESTA exp
    (91) exp -> . NOT exp
    (92) exp -> . BNOT exp
    (93) exp -> . sizeof exp
    (94) exp -> . IZQPAR exp DERPAR
    (95) exp -> . IZQPAR TYPE DERPAR exp
    (96) exp -> . exp ASK exp DP exp
    (97) exp -> . DOUBLE
    (98) exp -> . INTEGER
    (99) exp -> . ident
    (100) exp -> . ident lacs
    (101) exp -> . STR
    (102) exp -> . IZQCOR lex DERCOR
    (67) ident -> . ID

    scanf           shift and go to state 34
    RESTA           shift and go to state 36
    NOT             shift and go to state 37
    BNOT            shift and go to state 38
    sizeof          shift and go to state 39
    IZQPAR          shift and go to state 35
    DOUBLE          shift and go to state 40
    INTEGER         shift and go to state 41
    STR             shift and go to state 42
    IZQCOR          shift and go to state 43
    ID              shift and go to state 44

    exp                            shift and go to state 132
    ident                          shift and go to state 32

state 83

    (80) exp -> exp MENOR . exp
    (64) exp -> . scanf IZQPAR DERPAR
    (72) exp -> . exp SUMA exp
    (73) exp -> . exp RESTA exp
    (74) exp -> . exp MULTI exp
    (75) exp -> . exp DIV exp
    (76) exp -> . exp PORCENTAJE exp
    (77) exp -> . exp DIGUAL exp
    (78) exp -> . exp DESIGUAL exp
    (79) exp -> . exp MAYOR exp
    (80) exp -> . exp MENOR exp
    (81) exp -> . exp MAYORIGUAL exp
    (82) exp -> . exp MENORIGUAL exp
    (83) exp -> . exp AND exp
    (84) exp -> . exp OR exp
    (85) exp -> . exp BAND exp
    (86) exp -> . exp BOR exp
    (87) exp -> . exp BXOR exp
    (88) exp -> . exp BLEFT exp
    (89) exp -> . exp BRIGHT exp
    (90) exp -> . RESTA exp
    (91) exp -> . NOT exp
    (92) exp -> . BNOT exp
    (93) exp -> . sizeof exp
    (94) exp -> . IZQPAR exp DERPAR
    (95) exp -> . IZQPAR TYPE DERPAR exp
    (96) exp -> . exp ASK exp DP exp
    (97) exp -> . DOUBLE
    (98) exp -> . INTEGER
    (99) exp -> . ident
    (100) exp -> . ident lacs
    (101) exp -> . STR
    (102) exp -> . IZQCOR lex DERCOR
    (67) ident -> . ID

    scanf           shift and go to state 34
    RESTA           shift and go to state 36
    NOT             shift and go to state 37
    BNOT            shift and go to state 38
    sizeof          shift and go to state 39
    IZQPAR          shift and go to state 35
    DOUBLE          shift and go to state 40
    INTEGER         shift and go to state 41
    STR             shift and go to state 42
    IZQCOR          shift and go to state 43
    ID              shift and go to state 44

    exp                            shift and go to state 133
    ident                          shift and go to state 32

state 84

    (81) exp -> exp MAYORIGUAL . exp
    (64) exp -> . scanf IZQPAR DERPAR
    (72) exp -> . exp SUMA exp
    (73) exp -> . exp RESTA exp
    (74) exp -> . exp MULTI exp
    (75) exp -> . exp DIV exp
    (76) exp -> . exp PORCENTAJE exp
    (77) exp -> . exp DIGUAL exp
    (78) exp -> . exp DESIGUAL exp
    (79) exp -> . exp MAYOR exp
    (80) exp -> . exp MENOR exp
    (81) exp -> . exp MAYORIGUAL exp
    (82) exp -> . exp MENORIGUAL exp
    (83) exp -> . exp AND exp
    (84) exp -> . exp OR exp
    (85) exp -> . exp BAND exp
    (86) exp -> . exp BOR exp
    (87) exp -> . exp BXOR exp
    (88) exp -> . exp BLEFT exp
    (89) exp -> . exp BRIGHT exp
    (90) exp -> . RESTA exp
    (91) exp -> . NOT exp
    (92) exp -> . BNOT exp
    (93) exp -> . sizeof exp
    (94) exp -> . IZQPAR exp DERPAR
    (95) exp -> . IZQPAR TYPE DERPAR exp
    (96) exp -> . exp ASK exp DP exp
    (97) exp -> . DOUBLE
    (98) exp -> . INTEGER
    (99) exp -> . ident
    (100) exp -> . ident lacs
    (101) exp -> . STR
    (102) exp -> . IZQCOR lex DERCOR
    (67) ident -> . ID

    scanf           shift and go to state 34
    RESTA           shift and go to state 36
    NOT             shift and go to state 37
    BNOT            shift and go to state 38
    sizeof          shift and go to state 39
    IZQPAR          shift and go to state 35
    DOUBLE          shift and go to state 40
    INTEGER         shift and go to state 41
    STR             shift and go to state 42
    IZQCOR          shift and go to state 43
    ID              shift and go to state 44

    exp                            shift and go to state 134
    ident                          shift and go to state 32

state 85

    (82) exp -> exp MENORIGUAL . exp
    (64) exp -> . scanf IZQPAR DERPAR
    (72) exp -> . exp SUMA exp
    (73) exp -> . exp RESTA exp
    (74) exp -> . exp MULTI exp
    (75) exp -> . exp DIV exp
    (76) exp -> . exp PORCENTAJE exp
    (77) exp -> . exp DIGUAL exp
    (78) exp -> . exp DESIGUAL exp
    (79) exp -> . exp MAYOR exp
    (80) exp -> . exp MENOR exp
    (81) exp -> . exp MAYORIGUAL exp
    (82) exp -> . exp MENORIGUAL exp
    (83) exp -> . exp AND exp
    (84) exp -> . exp OR exp
    (85) exp -> . exp BAND exp
    (86) exp -> . exp BOR exp
    (87) exp -> . exp BXOR exp
    (88) exp -> . exp BLEFT exp
    (89) exp -> . exp BRIGHT exp
    (90) exp -> . RESTA exp
    (91) exp -> . NOT exp
    (92) exp -> . BNOT exp
    (93) exp -> . sizeof exp
    (94) exp -> . IZQPAR exp DERPAR
    (95) exp -> . IZQPAR TYPE DERPAR exp
    (96) exp -> . exp ASK exp DP exp
    (97) exp -> . DOUBLE
    (98) exp -> . INTEGER
    (99) exp -> . ident
    (100) exp -> . ident lacs
    (101) exp -> . STR
    (102) exp -> . IZQCOR lex DERCOR
    (67) ident -> . ID

    scanf           shift and go to state 34
    RESTA           shift and go to state 36
    NOT             shift and go to state 37
    BNOT            shift and go to state 38
    sizeof          shift and go to state 39
    IZQPAR          shift and go to state 35
    DOUBLE          shift and go to state 40
    INTEGER         shift and go to state 41
    STR             shift and go to state 42
    IZQCOR          shift and go to state 43
    ID              shift and go to state 44

    exp                            shift and go to state 135
    ident                          shift and go to state 32

state 86

    (83) exp -> exp AND . exp
    (64) exp -> . scanf IZQPAR DERPAR
    (72) exp -> . exp SUMA exp
    (73) exp -> . exp RESTA exp
    (74) exp -> . exp MULTI exp
    (75) exp -> . exp DIV exp
    (76) exp -> . exp PORCENTAJE exp
    (77) exp -> . exp DIGUAL exp
    (78) exp -> . exp DESIGUAL exp
    (79) exp -> . exp MAYOR exp
    (80) exp -> . exp MENOR exp
    (81) exp -> . exp MAYORIGUAL exp
    (82) exp -> . exp MENORIGUAL exp
    (83) exp -> . exp AND exp
    (84) exp -> . exp OR exp
    (85) exp -> . exp BAND exp
    (86) exp -> . exp BOR exp
    (87) exp -> . exp BXOR exp
    (88) exp -> . exp BLEFT exp
    (89) exp -> . exp BRIGHT exp
    (90) exp -> . RESTA exp
    (91) exp -> . NOT exp
    (92) exp -> . BNOT exp
    (93) exp -> . sizeof exp
    (94) exp -> . IZQPAR exp DERPAR
    (95) exp -> . IZQPAR TYPE DERPAR exp
    (96) exp -> . exp ASK exp DP exp
    (97) exp -> . DOUBLE
    (98) exp -> . INTEGER
    (99) exp -> . ident
    (100) exp -> . ident lacs
    (101) exp -> . STR
    (102) exp -> . IZQCOR lex DERCOR
    (67) ident -> . ID

    scanf           shift and go to state 34
    RESTA           shift and go to state 36
    NOT             shift and go to state 37
    BNOT            shift and go to state 38
    sizeof          shift and go to state 39
    IZQPAR          shift and go to state 35
    DOUBLE          shift and go to state 40
    INTEGER         shift and go to state 41
    STR             shift and go to state 42
    IZQCOR          shift and go to state 43
    ID              shift and go to state 44

    exp                            shift and go to state 136
    ident                          shift and go to state 32

state 87

    (84) exp -> exp OR . exp
    (64) exp -> . scanf IZQPAR DERPAR
    (72) exp -> . exp SUMA exp
    (73) exp -> . exp RESTA exp
    (74) exp -> . exp MULTI exp
    (75) exp -> . exp DIV exp
    (76) exp -> . exp PORCENTAJE exp
    (77) exp -> . exp DIGUAL exp
    (78) exp -> . exp DESIGUAL exp
    (79) exp -> . exp MAYOR exp
    (80) exp -> . exp MENOR exp
    (81) exp -> . exp MAYORIGUAL exp
    (82) exp -> . exp MENORIGUAL exp
    (83) exp -> . exp AND exp
    (84) exp -> . exp OR exp
    (85) exp -> . exp BAND exp
    (86) exp -> . exp BOR exp
    (87) exp -> . exp BXOR exp
    (88) exp -> . exp BLEFT exp
    (89) exp -> . exp BRIGHT exp
    (90) exp -> . RESTA exp
    (91) exp -> . NOT exp
    (92) exp -> . BNOT exp
    (93) exp -> . sizeof exp
    (94) exp -> . IZQPAR exp DERPAR
    (95) exp -> . IZQPAR TYPE DERPAR exp
    (96) exp -> . exp ASK exp DP exp
    (97) exp -> . DOUBLE
    (98) exp -> . INTEGER
    (99) exp -> . ident
    (100) exp -> . ident lacs
    (101) exp -> . STR
    (102) exp -> . IZQCOR lex DERCOR
    (67) ident -> . ID

    scanf           shift and go to state 34
    RESTA           shift and go to state 36
    NOT             shift and go to state 37
    BNOT            shift and go to state 38
    sizeof          shift and go to state 39
    IZQPAR          shift and go to state 35
    DOUBLE          shift and go to state 40
    INTEGER         shift and go to state 41
    STR             shift and go to state 42
    IZQCOR          shift and go to state 43
    ID              shift and go to state 44

    exp                            shift and go to state 137
    ident                          shift and go to state 32

state 88

    (85) exp -> exp BAND . exp
    (64) exp -> . scanf IZQPAR DERPAR
    (72) exp -> . exp SUMA exp
    (73) exp -> . exp RESTA exp
    (74) exp -> . exp MULTI exp
    (75) exp -> . exp DIV exp
    (76) exp -> . exp PORCENTAJE exp
    (77) exp -> . exp DIGUAL exp
    (78) exp -> . exp DESIGUAL exp
    (79) exp -> . exp MAYOR exp
    (80) exp -> . exp MENOR exp
    (81) exp -> . exp MAYORIGUAL exp
    (82) exp -> . exp MENORIGUAL exp
    (83) exp -> . exp AND exp
    (84) exp -> . exp OR exp
    (85) exp -> . exp BAND exp
    (86) exp -> . exp BOR exp
    (87) exp -> . exp BXOR exp
    (88) exp -> . exp BLEFT exp
    (89) exp -> . exp BRIGHT exp
    (90) exp -> . RESTA exp
    (91) exp -> . NOT exp
    (92) exp -> . BNOT exp
    (93) exp -> . sizeof exp
    (94) exp -> . IZQPAR exp DERPAR
    (95) exp -> . IZQPAR TYPE DERPAR exp
    (96) exp -> . exp ASK exp DP exp
    (97) exp -> . DOUBLE
    (98) exp -> . INTEGER
    (99) exp -> . ident
    (100) exp -> . ident lacs
    (101) exp -> . STR
    (102) exp -> . IZQCOR lex DERCOR
    (67) ident -> . ID

    scanf           shift and go to state 34
    RESTA           shift and go to state 36
    NOT             shift and go to state 37
    BNOT            shift and go to state 38
    sizeof          shift and go to state 39
    IZQPAR          shift and go to state 35
    DOUBLE          shift and go to state 40
    INTEGER         shift and go to state 41
    STR             shift and go to state 42
    IZQCOR          shift and go to state 43
    ID              shift and go to state 44

    exp                            shift and go to state 138
    ident                          shift and go to state 32

state 89

    (86) exp -> exp BOR . exp
    (64) exp -> . scanf IZQPAR DERPAR
    (72) exp -> . exp SUMA exp
    (73) exp -> . exp RESTA exp
    (74) exp -> . exp MULTI exp
    (75) exp -> . exp DIV exp
    (76) exp -> . exp PORCENTAJE exp
    (77) exp -> . exp DIGUAL exp
    (78) exp -> . exp DESIGUAL exp
    (79) exp -> . exp MAYOR exp
    (80) exp -> . exp MENOR exp
    (81) exp -> . exp MAYORIGUAL exp
    (82) exp -> . exp MENORIGUAL exp
    (83) exp -> . exp AND exp
    (84) exp -> . exp OR exp
    (85) exp -> . exp BAND exp
    (86) exp -> . exp BOR exp
    (87) exp -> . exp BXOR exp
    (88) exp -> . exp BLEFT exp
    (89) exp -> . exp BRIGHT exp
    (90) exp -> . RESTA exp
    (91) exp -> . NOT exp
    (92) exp -> . BNOT exp
    (93) exp -> . sizeof exp
    (94) exp -> . IZQPAR exp DERPAR
    (95) exp -> . IZQPAR TYPE DERPAR exp
    (96) exp -> . exp ASK exp DP exp
    (97) exp -> . DOUBLE
    (98) exp -> . INTEGER
    (99) exp -> . ident
    (100) exp -> . ident lacs
    (101) exp -> . STR
    (102) exp -> . IZQCOR lex DERCOR
    (67) ident -> . ID

    scanf           shift and go to state 34
    RESTA           shift and go to state 36
    NOT             shift and go to state 37
    BNOT            shift and go to state 38
    sizeof          shift and go to state 39
    IZQPAR          shift and go to state 35
    DOUBLE          shift and go to state 40
    INTEGER         shift and go to state 41
    STR             shift and go to state 42
    IZQCOR          shift and go to state 43
    ID              shift and go to state 44

    exp                            shift and go to state 139
    ident                          shift and go to state 32

state 90

    (87) exp -> exp BXOR . exp
    (64) exp -> . scanf IZQPAR DERPAR
    (72) exp -> . exp SUMA exp
    (73) exp -> . exp RESTA exp
    (74) exp -> . exp MULTI exp
    (75) exp -> . exp DIV exp
    (76) exp -> . exp PORCENTAJE exp
    (77) exp -> . exp DIGUAL exp
    (78) exp -> . exp DESIGUAL exp
    (79) exp -> . exp MAYOR exp
    (80) exp -> . exp MENOR exp
    (81) exp -> . exp MAYORIGUAL exp
    (82) exp -> . exp MENORIGUAL exp
    (83) exp -> . exp AND exp
    (84) exp -> . exp OR exp
    (85) exp -> . exp BAND exp
    (86) exp -> . exp BOR exp
    (87) exp -> . exp BXOR exp
    (88) exp -> . exp BLEFT exp
    (89) exp -> . exp BRIGHT exp
    (90) exp -> . RESTA exp
    (91) exp -> . NOT exp
    (92) exp -> . BNOT exp
    (93) exp -> . sizeof exp
    (94) exp -> . IZQPAR exp DERPAR
    (95) exp -> . IZQPAR TYPE DERPAR exp
    (96) exp -> . exp ASK exp DP exp
    (97) exp -> . DOUBLE
    (98) exp -> . INTEGER
    (99) exp -> . ident
    (100) exp -> . ident lacs
    (101) exp -> . STR
    (102) exp -> . IZQCOR lex DERCOR
    (67) ident -> . ID

    scanf           shift and go to state 34
    RESTA           shift and go to state 36
    NOT             shift and go to state 37
    BNOT            shift and go to state 38
    sizeof          shift and go to state 39
    IZQPAR          shift and go to state 35
    DOUBLE          shift and go to state 40
    INTEGER         shift and go to state 41
    STR             shift and go to state 42
    IZQCOR          shift and go to state 43
    ID              shift and go to state 44

    exp                            shift and go to state 140
    ident                          shift and go to state 32

state 91

    (88) exp -> exp BLEFT . exp
    (64) exp -> . scanf IZQPAR DERPAR
    (72) exp -> . exp SUMA exp
    (73) exp -> . exp RESTA exp
    (74) exp -> . exp MULTI exp
    (75) exp -> . exp DIV exp
    (76) exp -> . exp PORCENTAJE exp
    (77) exp -> . exp DIGUAL exp
    (78) exp -> . exp DESIGUAL exp
    (79) exp -> . exp MAYOR exp
    (80) exp -> . exp MENOR exp
    (81) exp -> . exp MAYORIGUAL exp
    (82) exp -> . exp MENORIGUAL exp
    (83) exp -> . exp AND exp
    (84) exp -> . exp OR exp
    (85) exp -> . exp BAND exp
    (86) exp -> . exp BOR exp
    (87) exp -> . exp BXOR exp
    (88) exp -> . exp BLEFT exp
    (89) exp -> . exp BRIGHT exp
    (90) exp -> . RESTA exp
    (91) exp -> . NOT exp
    (92) exp -> . BNOT exp
    (93) exp -> . sizeof exp
    (94) exp -> . IZQPAR exp DERPAR
    (95) exp -> . IZQPAR TYPE DERPAR exp
    (96) exp -> . exp ASK exp DP exp
    (97) exp -> . DOUBLE
    (98) exp -> . INTEGER
    (99) exp -> . ident
    (100) exp -> . ident lacs
    (101) exp -> . STR
    (102) exp -> . IZQCOR lex DERCOR
    (67) ident -> . ID

    scanf           shift and go to state 34
    RESTA           shift and go to state 36
    NOT             shift and go to state 37
    BNOT            shift and go to state 38
    sizeof          shift and go to state 39
    IZQPAR          shift and go to state 35
    DOUBLE          shift and go to state 40
    INTEGER         shift and go to state 41
    STR             shift and go to state 42
    IZQCOR          shift and go to state 43
    ID              shift and go to state 44

    exp                            shift and go to state 141
    ident                          shift and go to state 32

state 92

    (89) exp -> exp BRIGHT . exp
    (64) exp -> . scanf IZQPAR DERPAR
    (72) exp -> . exp SUMA exp
    (73) exp -> . exp RESTA exp
    (74) exp -> . exp MULTI exp
    (75) exp -> . exp DIV exp
    (76) exp -> . exp PORCENTAJE exp
    (77) exp -> . exp DIGUAL exp
    (78) exp -> . exp DESIGUAL exp
    (79) exp -> . exp MAYOR exp
    (80) exp -> . exp MENOR exp
    (81) exp -> . exp MAYORIGUAL exp
    (82) exp -> . exp MENORIGUAL exp
    (83) exp -> . exp AND exp
    (84) exp -> . exp OR exp
    (85) exp -> . exp BAND exp
    (86) exp -> . exp BOR exp
    (87) exp -> . exp BXOR exp
    (88) exp -> . exp BLEFT exp
    (89) exp -> . exp BRIGHT exp
    (90) exp -> . RESTA exp
    (91) exp -> . NOT exp
    (92) exp -> . BNOT exp
    (93) exp -> . sizeof exp
    (94) exp -> . IZQPAR exp DERPAR
    (95) exp -> . IZQPAR TYPE DERPAR exp
    (96) exp -> . exp ASK exp DP exp
    (97) exp -> . DOUBLE
    (98) exp -> . INTEGER
    (99) exp -> . ident
    (100) exp -> . ident lacs
    (101) exp -> . STR
    (102) exp -> . IZQCOR lex DERCOR
    (67) ident -> . ID

    scanf           shift and go to state 34
    RESTA           shift and go to state 36
    NOT             shift and go to state 37
    BNOT            shift and go to state 38
    sizeof          shift and go to state 39
    IZQPAR          shift and go to state 35
    DOUBLE          shift and go to state 40
    INTEGER         shift and go to state 41
    STR             shift and go to state 42
    IZQCOR          shift and go to state 43
    ID              shift and go to state 44

    exp                            shift and go to state 142
    ident                          shift and go to state 32

state 93

    (96) exp -> exp ASK . exp DP exp
    (64) exp -> . scanf IZQPAR DERPAR
    (72) exp -> . exp SUMA exp
    (73) exp -> . exp RESTA exp
    (74) exp -> . exp MULTI exp
    (75) exp -> . exp DIV exp
    (76) exp -> . exp PORCENTAJE exp
    (77) exp -> . exp DIGUAL exp
    (78) exp -> . exp DESIGUAL exp
    (79) exp -> . exp MAYOR exp
    (80) exp -> . exp MENOR exp
    (81) exp -> . exp MAYORIGUAL exp
    (82) exp -> . exp MENORIGUAL exp
    (83) exp -> . exp AND exp
    (84) exp -> . exp OR exp
    (85) exp -> . exp BAND exp
    (86) exp -> . exp BOR exp
    (87) exp -> . exp BXOR exp
    (88) exp -> . exp BLEFT exp
    (89) exp -> . exp BRIGHT exp
    (90) exp -> . RESTA exp
    (91) exp -> . NOT exp
    (92) exp -> . BNOT exp
    (93) exp -> . sizeof exp
    (94) exp -> . IZQPAR exp DERPAR
    (95) exp -> . IZQPAR TYPE DERPAR exp
    (96) exp -> . exp ASK exp DP exp
    (97) exp -> . DOUBLE
    (98) exp -> . INTEGER
    (99) exp -> . ident
    (100) exp -> . ident lacs
    (101) exp -> . STR
    (102) exp -> . IZQCOR lex DERCOR
    (67) ident -> . ID

    scanf           shift and go to state 34
    RESTA           shift and go to state 36
    NOT             shift and go to state 37
    BNOT            shift and go to state 38
    sizeof          shift and go to state 39
    IZQPAR          shift and go to state 35
    DOUBLE          shift and go to state 40
    INTEGER         shift and go to state 41
    STR             shift and go to state 42
    IZQCOR          shift and go to state 43
    ID              shift and go to state 44

    exp                            shift and go to state 143
    ident                          shift and go to state 32

state 94

    (64) exp -> scanf IZQPAR . DERPAR

    DERPAR          shift and go to state 144


state 95

    (94) exp -> IZQPAR exp . DERPAR
    (72) exp -> exp . SUMA exp
    (73) exp -> exp . RESTA exp
    (74) exp -> exp . MULTI exp
    (75) exp -> exp . DIV exp
    (76) exp -> exp . PORCENTAJE exp
    (77) exp -> exp . DIGUAL exp
    (78) exp -> exp . DESIGUAL exp
    (79) exp -> exp . MAYOR exp
    (80) exp -> exp . MENOR exp
    (81) exp -> exp . MAYORIGUAL exp
    (82) exp -> exp . MENORIGUAL exp
    (83) exp -> exp . AND exp
    (84) exp -> exp . OR exp
    (85) exp -> exp . BAND exp
    (86) exp -> exp . BOR exp
    (87) exp -> exp . BXOR exp
    (88) exp -> exp . BLEFT exp
    (89) exp -> exp . BRIGHT exp
    (96) exp -> exp . ASK exp DP exp

    DERPAR          shift and go to state 145
    SUMA            shift and go to state 75
    RESTA           shift and go to state 76
    MULTI           shift and go to state 77
    DIV             shift and go to state 78
    PORCENTAJE      shift and go to state 79
    DIGUAL          shift and go to state 80
    DESIGUAL        shift and go to state 81
    MAYOR           shift and go to state 82
    MENOR           shift and go to state 83
    MAYORIGUAL      shift and go to state 84
    MENORIGUAL      shift and go to state 85
    AND             shift and go to state 86
    OR              shift and go to state 87
    BAND            shift and go to state 88
    BOR             shift and go to state 89
    BXOR            shift and go to state 90
    BLEFT           shift and go to state 91
    BRIGHT          shift and go to state 92
    ASK             shift and go to state 93


state 96

    (95) exp -> IZQPAR TYPE . DERPAR exp

    DERPAR          shift and go to state 146


state 97

    (90) exp -> RESTA exp .
    (72) exp -> exp . SUMA exp
    (73) exp -> exp . RESTA exp
    (74) exp -> exp . MULTI exp
    (75) exp -> exp . DIV exp
    (76) exp -> exp . PORCENTAJE exp
    (77) exp -> exp . DIGUAL exp
    (78) exp -> exp . DESIGUAL exp
    (79) exp -> exp . MAYOR exp
    (80) exp -> exp . MENOR exp
    (81) exp -> exp . MAYORIGUAL exp
    (82) exp -> exp . MENORIGUAL exp
    (83) exp -> exp . AND exp
    (84) exp -> exp . OR exp
    (85) exp -> exp . BAND exp
    (86) exp -> exp . BOR exp
    (87) exp -> exp . BXOR exp
    (88) exp -> exp . BLEFT exp
    (89) exp -> exp . BRIGHT exp
    (96) exp -> exp . ASK exp DP exp

    SUMA            reduce using rule 90 (exp -> RESTA exp .)
    RESTA           reduce using rule 90 (exp -> RESTA exp .)
    DIGUAL          reduce using rule 90 (exp -> RESTA exp .)
    DESIGUAL        reduce using rule 90 (exp -> RESTA exp .)
    MAYOR           reduce using rule 90 (exp -> RESTA exp .)
    MENOR           reduce using rule 90 (exp -> RESTA exp .)
    MAYORIGUAL      reduce using rule 90 (exp -> RESTA exp .)
    MENORIGUAL      reduce using rule 90 (exp -> RESTA exp .)
    AND             reduce using rule 90 (exp -> RESTA exp .)
    OR              reduce using rule 90 (exp -> RESTA exp .)
    BAND            reduce using rule 90 (exp -> RESTA exp .)
    BOR             reduce using rule 90 (exp -> RESTA exp .)
    BXOR            reduce using rule 90 (exp -> RESTA exp .)
    BLEFT           reduce using rule 90 (exp -> RESTA exp .)
    BRIGHT          reduce using rule 90 (exp -> RESTA exp .)
    ASK             reduce using rule 90 (exp -> RESTA exp .)
    PCOMA           reduce using rule 90 (exp -> RESTA exp .)
    DERPAR          reduce using rule 90 (exp -> RESTA exp .)
    DERLLAVE        reduce using rule 90 (exp -> RESTA exp .)
    DERCOR          reduce using rule 90 (exp -> RESTA exp .)
    COMA            reduce using rule 90 (exp -> RESTA exp .)
    DP              reduce using rule 90 (exp -> RESTA exp .)
    MULTI           shift and go to state 77
    DIV             shift and go to state 78
    PORCENTAJE      shift and go to state 79

  ! MULTI           [ reduce using rule 90 (exp -> RESTA exp .) ]
  ! DIV             [ reduce using rule 90 (exp -> RESTA exp .) ]
  ! PORCENTAJE      [ reduce using rule 90 (exp -> RESTA exp .) ]
  ! SUMA            [ shift and go to state 75 ]
  ! RESTA           [ shift and go to state 76 ]
  ! DIGUAL          [ shift and go to state 80 ]
  ! DESIGUAL        [ shift and go to state 81 ]
  ! MAYOR           [ shift and go to state 82 ]
  ! MENOR           [ shift and go to state 83 ]
  ! MAYORIGUAL      [ shift and go to state 84 ]
  ! MENORIGUAL      [ shift and go to state 85 ]
  ! AND             [ shift and go to state 86 ]
  ! OR              [ shift and go to state 87 ]
  ! BAND            [ shift and go to state 88 ]
  ! BOR             [ shift and go to state 89 ]
  ! BXOR            [ shift and go to state 90 ]
  ! BLEFT           [ shift and go to state 91 ]
  ! BRIGHT          [ shift and go to state 92 ]
  ! ASK             [ shift and go to state 93 ]


state 98

    (91) exp -> NOT exp .
    (72) exp -> exp . SUMA exp
    (73) exp -> exp . RESTA exp
    (74) exp -> exp . MULTI exp
    (75) exp -> exp . DIV exp
    (76) exp -> exp . PORCENTAJE exp
    (77) exp -> exp . DIGUAL exp
    (78) exp -> exp . DESIGUAL exp
    (79) exp -> exp . MAYOR exp
    (80) exp -> exp . MENOR exp
    (81) exp -> exp . MAYORIGUAL exp
    (82) exp -> exp . MENORIGUAL exp
    (83) exp -> exp . AND exp
    (84) exp -> exp . OR exp
    (85) exp -> exp . BAND exp
    (86) exp -> exp . BOR exp
    (87) exp -> exp . BXOR exp
    (88) exp -> exp . BLEFT exp
    (89) exp -> exp . BRIGHT exp
    (96) exp -> exp . ASK exp DP exp

    SUMA            reduce using rule 91 (exp -> NOT exp .)
    RESTA           reduce using rule 91 (exp -> NOT exp .)
    MULTI           reduce using rule 91 (exp -> NOT exp .)
    DIV             reduce using rule 91 (exp -> NOT exp .)
    PORCENTAJE      reduce using rule 91 (exp -> NOT exp .)
    DIGUAL          reduce using rule 91 (exp -> NOT exp .)
    DESIGUAL        reduce using rule 91 (exp -> NOT exp .)
    MAYOR           reduce using rule 91 (exp -> NOT exp .)
    MENOR           reduce using rule 91 (exp -> NOT exp .)
    MAYORIGUAL      reduce using rule 91 (exp -> NOT exp .)
    MENORIGUAL      reduce using rule 91 (exp -> NOT exp .)
    AND             reduce using rule 91 (exp -> NOT exp .)
    OR              reduce using rule 91 (exp -> NOT exp .)
    BAND            reduce using rule 91 (exp -> NOT exp .)
    BOR             reduce using rule 91 (exp -> NOT exp .)
    BXOR            reduce using rule 91 (exp -> NOT exp .)
    BLEFT           reduce using rule 91 (exp -> NOT exp .)
    BRIGHT          reduce using rule 91 (exp -> NOT exp .)
    ASK             reduce using rule 91 (exp -> NOT exp .)
    PCOMA           reduce using rule 91 (exp -> NOT exp .)
    DERPAR          reduce using rule 91 (exp -> NOT exp .)
    DERLLAVE        reduce using rule 91 (exp -> NOT exp .)
    DERCOR          reduce using rule 91 (exp -> NOT exp .)
    COMA            reduce using rule 91 (exp -> NOT exp .)
    DP              reduce using rule 91 (exp -> NOT exp .)

  ! SUMA            [ shift and go to state 75 ]
  ! RESTA           [ shift and go to state 76 ]
  ! MULTI           [ shift and go to state 77 ]
  ! DIV             [ shift and go to state 78 ]
  ! PORCENTAJE      [ shift and go to state 79 ]
  ! DIGUAL          [ shift and go to state 80 ]
  ! DESIGUAL        [ shift and go to state 81 ]
  ! MAYOR           [ shift and go to state 82 ]
  ! MENOR           [ shift and go to state 83 ]
  ! MAYORIGUAL      [ shift and go to state 84 ]
  ! MENORIGUAL      [ shift and go to state 85 ]
  ! AND             [ shift and go to state 86 ]
  ! OR              [ shift and go to state 87 ]
  ! BAND            [ shift and go to state 88 ]
  ! BOR             [ shift and go to state 89 ]
  ! BXOR            [ shift and go to state 90 ]
  ! BLEFT           [ shift and go to state 91 ]
  ! BRIGHT          [ shift and go to state 92 ]
  ! ASK             [ shift and go to state 93 ]


state 99

    (92) exp -> BNOT exp .
    (72) exp -> exp . SUMA exp
    (73) exp -> exp . RESTA exp
    (74) exp -> exp . MULTI exp
    (75) exp -> exp . DIV exp
    (76) exp -> exp . PORCENTAJE exp
    (77) exp -> exp . DIGUAL exp
    (78) exp -> exp . DESIGUAL exp
    (79) exp -> exp . MAYOR exp
    (80) exp -> exp . MENOR exp
    (81) exp -> exp . MAYORIGUAL exp
    (82) exp -> exp . MENORIGUAL exp
    (83) exp -> exp . AND exp
    (84) exp -> exp . OR exp
    (85) exp -> exp . BAND exp
    (86) exp -> exp . BOR exp
    (87) exp -> exp . BXOR exp
    (88) exp -> exp . BLEFT exp
    (89) exp -> exp . BRIGHT exp
    (96) exp -> exp . ASK exp DP exp

    SUMA            reduce using rule 92 (exp -> BNOT exp .)
    RESTA           reduce using rule 92 (exp -> BNOT exp .)
    MULTI           reduce using rule 92 (exp -> BNOT exp .)
    DIV             reduce using rule 92 (exp -> BNOT exp .)
    PORCENTAJE      reduce using rule 92 (exp -> BNOT exp .)
    DIGUAL          reduce using rule 92 (exp -> BNOT exp .)
    DESIGUAL        reduce using rule 92 (exp -> BNOT exp .)
    MAYOR           reduce using rule 92 (exp -> BNOT exp .)
    MENOR           reduce using rule 92 (exp -> BNOT exp .)
    MAYORIGUAL      reduce using rule 92 (exp -> BNOT exp .)
    MENORIGUAL      reduce using rule 92 (exp -> BNOT exp .)
    AND             reduce using rule 92 (exp -> BNOT exp .)
    OR              reduce using rule 92 (exp -> BNOT exp .)
    BAND            reduce using rule 92 (exp -> BNOT exp .)
    BOR             reduce using rule 92 (exp -> BNOT exp .)
    BXOR            reduce using rule 92 (exp -> BNOT exp .)
    BLEFT           reduce using rule 92 (exp -> BNOT exp .)
    BRIGHT          reduce using rule 92 (exp -> BNOT exp .)
    ASK             reduce using rule 92 (exp -> BNOT exp .)
    PCOMA           reduce using rule 92 (exp -> BNOT exp .)
    DERPAR          reduce using rule 92 (exp -> BNOT exp .)
    DERLLAVE        reduce using rule 92 (exp -> BNOT exp .)
    DERCOR          reduce using rule 92 (exp -> BNOT exp .)
    COMA            reduce using rule 92 (exp -> BNOT exp .)
    DP              reduce using rule 92 (exp -> BNOT exp .)

  ! SUMA            [ shift and go to state 75 ]
  ! RESTA           [ shift and go to state 76 ]
  ! MULTI           [ shift and go to state 77 ]
  ! DIV             [ shift and go to state 78 ]
  ! PORCENTAJE      [ shift and go to state 79 ]
  ! DIGUAL          [ shift and go to state 80 ]
  ! DESIGUAL        [ shift and go to state 81 ]
  ! MAYOR           [ shift and go to state 82 ]
  ! MENOR           [ shift and go to state 83 ]
  ! MAYORIGUAL      [ shift and go to state 84 ]
  ! MENORIGUAL      [ shift and go to state 85 ]
  ! AND             [ shift and go to state 86 ]
  ! OR              [ shift and go to state 87 ]
  ! BAND            [ shift and go to state 88 ]
  ! BOR             [ shift and go to state 89 ]
  ! BXOR            [ shift and go to state 90 ]
  ! BLEFT           [ shift and go to state 91 ]
  ! BRIGHT          [ shift and go to state 92 ]
  ! ASK             [ shift and go to state 93 ]


state 100

    (93) exp -> sizeof exp .
    (72) exp -> exp . SUMA exp
    (73) exp -> exp . RESTA exp
    (74) exp -> exp . MULTI exp
    (75) exp -> exp . DIV exp
    (76) exp -> exp . PORCENTAJE exp
    (77) exp -> exp . DIGUAL exp
    (78) exp -> exp . DESIGUAL exp
    (79) exp -> exp . MAYOR exp
    (80) exp -> exp . MENOR exp
    (81) exp -> exp . MAYORIGUAL exp
    (82) exp -> exp . MENORIGUAL exp
    (83) exp -> exp . AND exp
    (84) exp -> exp . OR exp
    (85) exp -> exp . BAND exp
    (86) exp -> exp . BOR exp
    (87) exp -> exp . BXOR exp
    (88) exp -> exp . BLEFT exp
    (89) exp -> exp . BRIGHT exp
    (96) exp -> exp . ASK exp DP exp

    SUMA            reduce using rule 93 (exp -> sizeof exp .)
    RESTA           reduce using rule 93 (exp -> sizeof exp .)
    MULTI           reduce using rule 93 (exp -> sizeof exp .)
    DIV             reduce using rule 93 (exp -> sizeof exp .)
    PORCENTAJE      reduce using rule 93 (exp -> sizeof exp .)
    DIGUAL          reduce using rule 93 (exp -> sizeof exp .)
    DESIGUAL        reduce using rule 93 (exp -> sizeof exp .)
    MAYOR           reduce using rule 93 (exp -> sizeof exp .)
    MENOR           reduce using rule 93 (exp -> sizeof exp .)
    MAYORIGUAL      reduce using rule 93 (exp -> sizeof exp .)
    MENORIGUAL      reduce using rule 93 (exp -> sizeof exp .)
    AND             reduce using rule 93 (exp -> sizeof exp .)
    OR              reduce using rule 93 (exp -> sizeof exp .)
    BAND            reduce using rule 93 (exp -> sizeof exp .)
    BOR             reduce using rule 93 (exp -> sizeof exp .)
    BXOR            reduce using rule 93 (exp -> sizeof exp .)
    BLEFT           reduce using rule 93 (exp -> sizeof exp .)
    BRIGHT          reduce using rule 93 (exp -> sizeof exp .)
    ASK             reduce using rule 93 (exp -> sizeof exp .)
    PCOMA           reduce using rule 93 (exp -> sizeof exp .)
    DERPAR          reduce using rule 93 (exp -> sizeof exp .)
    DERLLAVE        reduce using rule 93 (exp -> sizeof exp .)
    DERCOR          reduce using rule 93 (exp -> sizeof exp .)
    COMA            reduce using rule 93 (exp -> sizeof exp .)
    DP              reduce using rule 93 (exp -> sizeof exp .)

  ! SUMA            [ shift and go to state 75 ]
  ! RESTA           [ shift and go to state 76 ]
  ! MULTI           [ shift and go to state 77 ]
  ! DIV             [ shift and go to state 78 ]
  ! PORCENTAJE      [ shift and go to state 79 ]
  ! DIGUAL          [ shift and go to state 80 ]
  ! DESIGUAL        [ shift and go to state 81 ]
  ! MAYOR           [ shift and go to state 82 ]
  ! MENOR           [ shift and go to state 83 ]
  ! MAYORIGUAL      [ shift and go to state 84 ]
  ! MENORIGUAL      [ shift and go to state 85 ]
  ! AND             [ shift and go to state 86 ]
  ! OR              [ shift and go to state 87 ]
  ! BAND            [ shift and go to state 88 ]
  ! BOR             [ shift and go to state 89 ]
  ! BXOR            [ shift and go to state 90 ]
  ! BLEFT           [ shift and go to state 91 ]
  ! BRIGHT          [ shift and go to state 92 ]
  ! ASK             [ shift and go to state 93 ]


state 101

    (102) exp -> IZQCOR lex . DERCOR
    (28) lex -> lex . COMA exp

    DERCOR          shift and go to state 147
    COMA            shift and go to state 148


state 102

    (29) lex -> exp .
    (72) exp -> exp . SUMA exp
    (73) exp -> exp . RESTA exp
    (74) exp -> exp . MULTI exp
    (75) exp -> exp . DIV exp
    (76) exp -> exp . PORCENTAJE exp
    (77) exp -> exp . DIGUAL exp
    (78) exp -> exp . DESIGUAL exp
    (79) exp -> exp . MAYOR exp
    (80) exp -> exp . MENOR exp
    (81) exp -> exp . MAYORIGUAL exp
    (82) exp -> exp . MENORIGUAL exp
    (83) exp -> exp . AND exp
    (84) exp -> exp . OR exp
    (85) exp -> exp . BAND exp
    (86) exp -> exp . BOR exp
    (87) exp -> exp . BXOR exp
    (88) exp -> exp . BLEFT exp
    (89) exp -> exp . BRIGHT exp
    (96) exp -> exp . ASK exp DP exp

    DERCOR          reduce using rule 29 (lex -> exp .)
    COMA            reduce using rule 29 (lex -> exp .)
    DERPAR          reduce using rule 29 (lex -> exp .)
    SUMA            shift and go to state 75
    RESTA           shift and go to state 76
    MULTI           shift and go to state 77
    DIV             shift and go to state 78
    PORCENTAJE      shift and go to state 79
    DIGUAL          shift and go to state 80
    DESIGUAL        shift and go to state 81
    MAYOR           shift and go to state 82
    MENOR           shift and go to state 83
    MAYORIGUAL      shift and go to state 84
    MENORIGUAL      shift and go to state 85
    AND             shift and go to state 86
    OR              shift and go to state 87
    BAND            shift and go to state 88
    BOR             shift and go to state 89
    BXOR            shift and go to state 90
    BLEFT           shift and go to state 91
    BRIGHT          shift and go to state 92
    ASK             shift and go to state 93


state 103

    (70) acs -> IZQLLAVE exp DERLLAVE .

    IGUAL           reduce using rule 70 (acs -> IZQLLAVE exp DERLLAVE .)
    IZQLLAVE        reduce using rule 70 (acs -> IZQLLAVE exp DERLLAVE .)
    PUNTO           reduce using rule 70 (acs -> IZQLLAVE exp DERLLAVE .)
    SUMA            reduce using rule 70 (acs -> IZQLLAVE exp DERLLAVE .)
    RESTA           reduce using rule 70 (acs -> IZQLLAVE exp DERLLAVE .)
    MULTI           reduce using rule 70 (acs -> IZQLLAVE exp DERLLAVE .)
    DIV             reduce using rule 70 (acs -> IZQLLAVE exp DERLLAVE .)
    PORCENTAJE      reduce using rule 70 (acs -> IZQLLAVE exp DERLLAVE .)
    DIGUAL          reduce using rule 70 (acs -> IZQLLAVE exp DERLLAVE .)
    DESIGUAL        reduce using rule 70 (acs -> IZQLLAVE exp DERLLAVE .)
    MAYOR           reduce using rule 70 (acs -> IZQLLAVE exp DERLLAVE .)
    MENOR           reduce using rule 70 (acs -> IZQLLAVE exp DERLLAVE .)
    MAYORIGUAL      reduce using rule 70 (acs -> IZQLLAVE exp DERLLAVE .)
    MENORIGUAL      reduce using rule 70 (acs -> IZQLLAVE exp DERLLAVE .)
    AND             reduce using rule 70 (acs -> IZQLLAVE exp DERLLAVE .)
    OR              reduce using rule 70 (acs -> IZQLLAVE exp DERLLAVE .)
    BAND            reduce using rule 70 (acs -> IZQLLAVE exp DERLLAVE .)
    BOR             reduce using rule 70 (acs -> IZQLLAVE exp DERLLAVE .)
    BXOR            reduce using rule 70 (acs -> IZQLLAVE exp DERLLAVE .)
    BLEFT           reduce using rule 70 (acs -> IZQLLAVE exp DERLLAVE .)
    BRIGHT          reduce using rule 70 (acs -> IZQLLAVE exp DERLLAVE .)
    ASK             reduce using rule 70 (acs -> IZQLLAVE exp DERLLAVE .)
    PCOMA           reduce using rule 70 (acs -> IZQLLAVE exp DERLLAVE .)
    DERPAR          reduce using rule 70 (acs -> IZQLLAVE exp DERLLAVE .)
    DERLLAVE        reduce using rule 70 (acs -> IZQLLAVE exp DERLLAVE .)
    DERCOR          reduce using rule 70 (acs -> IZQLLAVE exp DERLLAVE .)
    COMA            reduce using rule 70 (acs -> IZQLLAVE exp DERLLAVE .)
    DP              reduce using rule 70 (acs -> IZQLLAVE exp DERLLAVE .)
    INCE            reduce using rule 70 (acs -> IZQLLAVE exp DERLLAVE .)
    DECRE           reduce using rule 70 (acs -> IZQLLAVE exp DERLLAVE .)


state 104

    (6) body -> struct ID IZQCOR linst DERCOR .

    struct          reduce using rule 6 (body -> struct ID IZQCOR linst DERCOR .)
    int             reduce using rule 6 (body -> struct ID IZQCOR linst DERCOR .)
    float           reduce using rule 6 (body -> struct ID IZQCOR linst DERCOR .)
    char            reduce using rule 6 (body -> struct ID IZQCOR linst DERCOR .)
    double          reduce using rule 6 (body -> struct ID IZQCOR linst DERCOR .)
    void            reduce using rule 6 (body -> struct ID IZQCOR linst DERCOR .)
    $end            reduce using rule 6 (body -> struct ID IZQCOR linst DERCOR .)


state 105

    (8) linst -> linst inst .

    DERCOR          reduce using rule 8 (linst -> linst inst .)
    for             reduce using rule 8 (linst -> linst inst .)
    if              reduce using rule 8 (linst -> linst inst .)
    while           reduce using rule 8 (linst -> linst inst .)
    switch          reduce using rule 8 (linst -> linst inst .)
    do              reduce using rule 8 (linst -> linst inst .)
    printf          reduce using rule 8 (linst -> linst inst .)
    goto            reduce using rule 8 (linst -> linst inst .)
    ID              reduce using rule 8 (linst -> linst inst .)
    int             reduce using rule 8 (linst -> linst inst .)
    float           reduce using rule 8 (linst -> linst inst .)
    char            reduce using rule 8 (linst -> linst inst .)
    double          reduce using rule 8 (linst -> linst inst .)
    void            reduce using rule 8 (linst -> linst inst .)
    break           reduce using rule 8 (linst -> linst inst .)
    default         reduce using rule 8 (linst -> linst inst .)
    case            reduce using rule 8 (linst -> linst inst .)


state 106

    (14) inst -> asig PCOMA .

    DERCOR          reduce using rule 14 (inst -> asig PCOMA .)
    for             reduce using rule 14 (inst -> asig PCOMA .)
    if              reduce using rule 14 (inst -> asig PCOMA .)
    while           reduce using rule 14 (inst -> asig PCOMA .)
    switch          reduce using rule 14 (inst -> asig PCOMA .)
    do              reduce using rule 14 (inst -> asig PCOMA .)
    printf          reduce using rule 14 (inst -> asig PCOMA .)
    goto            reduce using rule 14 (inst -> asig PCOMA .)
    ID              reduce using rule 14 (inst -> asig PCOMA .)
    int             reduce using rule 14 (inst -> asig PCOMA .)
    float           reduce using rule 14 (inst -> asig PCOMA .)
    char            reduce using rule 14 (inst -> asig PCOMA .)
    double          reduce using rule 14 (inst -> asig PCOMA .)
    void            reduce using rule 14 (inst -> asig PCOMA .)
    break           reduce using rule 14 (inst -> asig PCOMA .)
    default         reduce using rule 14 (inst -> asig PCOMA .)
    case            reduce using rule 14 (inst -> asig PCOMA .)


state 107

    (22) inst -> decla PCOMA .

    DERCOR          reduce using rule 22 (inst -> decla PCOMA .)
    for             reduce using rule 22 (inst -> decla PCOMA .)
    if              reduce using rule 22 (inst -> decla PCOMA .)
    while           reduce using rule 22 (inst -> decla PCOMA .)
    switch          reduce using rule 22 (inst -> decla PCOMA .)
    do              reduce using rule 22 (inst -> decla PCOMA .)
    printf          reduce using rule 22 (inst -> decla PCOMA .)
    goto            reduce using rule 22 (inst -> decla PCOMA .)
    ID              reduce using rule 22 (inst -> decla PCOMA .)
    int             reduce using rule 22 (inst -> decla PCOMA .)
    float           reduce using rule 22 (inst -> decla PCOMA .)
    char            reduce using rule 22 (inst -> decla PCOMA .)
    double          reduce using rule 22 (inst -> decla PCOMA .)
    void            reduce using rule 22 (inst -> decla PCOMA .)
    break           reduce using rule 22 (inst -> decla PCOMA .)
    default         reduce using rule 22 (inst -> decla PCOMA .)
    case            reduce using rule 22 (inst -> decla PCOMA .)


state 108

    (24) inst -> gotot PCOMA .

    DERCOR          reduce using rule 24 (inst -> gotot PCOMA .)
    for             reduce using rule 24 (inst -> gotot PCOMA .)
    if              reduce using rule 24 (inst -> gotot PCOMA .)
    while           reduce using rule 24 (inst -> gotot PCOMA .)
    switch          reduce using rule 24 (inst -> gotot PCOMA .)
    do              reduce using rule 24 (inst -> gotot PCOMA .)
    printf          reduce using rule 24 (inst -> gotot PCOMA .)
    goto            reduce using rule 24 (inst -> gotot PCOMA .)
    ID              reduce using rule 24 (inst -> gotot PCOMA .)
    int             reduce using rule 24 (inst -> gotot PCOMA .)
    float           reduce using rule 24 (inst -> gotot PCOMA .)
    char            reduce using rule 24 (inst -> gotot PCOMA .)
    double          reduce using rule 24 (inst -> gotot PCOMA .)
    void            reduce using rule 24 (inst -> gotot PCOMA .)
    break           reduce using rule 24 (inst -> gotot PCOMA .)
    default         reduce using rule 24 (inst -> gotot PCOMA .)
    case            reduce using rule 24 (inst -> gotot PCOMA .)


state 109

    (32) asig -> ident lacs . IGUAL exp
    (34) asig -> ident lacs . INCE
    (36) asig -> ident lacs . DECRE
    (68) lacs -> lacs . acs
    (70) acs -> . IZQLLAVE exp DERLLAVE
    (71) acs -> . PUNTO ID

    IGUAL           shift and go to state 149
    INCE            shift and go to state 150
    DECRE           shift and go to state 151
    IZQLLAVE        shift and go to state 23
    PUNTO           shift and go to state 24

    acs                            shift and go to state 31

state 110

    (33) asig -> ident IGUAL . exp
    (64) exp -> . scanf IZQPAR DERPAR
    (72) exp -> . exp SUMA exp
    (73) exp -> . exp RESTA exp
    (74) exp -> . exp MULTI exp
    (75) exp -> . exp DIV exp
    (76) exp -> . exp PORCENTAJE exp
    (77) exp -> . exp DIGUAL exp
    (78) exp -> . exp DESIGUAL exp
    (79) exp -> . exp MAYOR exp
    (80) exp -> . exp MENOR exp
    (81) exp -> . exp MAYORIGUAL exp
    (82) exp -> . exp MENORIGUAL exp
    (83) exp -> . exp AND exp
    (84) exp -> . exp OR exp
    (85) exp -> . exp BAND exp
    (86) exp -> . exp BOR exp
    (87) exp -> . exp BXOR exp
    (88) exp -> . exp BLEFT exp
    (89) exp -> . exp BRIGHT exp
    (90) exp -> . RESTA exp
    (91) exp -> . NOT exp
    (92) exp -> . BNOT exp
    (93) exp -> . sizeof exp
    (94) exp -> . IZQPAR exp DERPAR
    (95) exp -> . IZQPAR TYPE DERPAR exp
    (96) exp -> . exp ASK exp DP exp
    (97) exp -> . DOUBLE
    (98) exp -> . INTEGER
    (99) exp -> . ident
    (100) exp -> . ident lacs
    (101) exp -> . STR
    (102) exp -> . IZQCOR lex DERCOR
    (67) ident -> . ID

    scanf           shift and go to state 34
    RESTA           shift and go to state 36
    NOT             shift and go to state 37
    BNOT            shift and go to state 38
    sizeof          shift and go to state 39
    IZQPAR          shift and go to state 35
    DOUBLE          shift and go to state 40
    INTEGER         shift and go to state 41
    STR             shift and go to state 42
    IZQCOR          shift and go to state 43
    ID              shift and go to state 44

    ident                          shift and go to state 32
    exp                            shift and go to state 152

state 111

    (35) asig -> ident INCE .

    PCOMA           reduce using rule 35 (asig -> ident INCE .)
    DERPAR          reduce using rule 35 (asig -> ident INCE .)


state 112

    (37) asig -> ident DECRE .

    PCOMA           reduce using rule 37 (asig -> ident DECRE .)
    DERPAR          reduce using rule 37 (asig -> ident DECRE .)


state 113

    (25) call -> ident IZQPAR . plex DERPAR PCOMA
    (26) plex -> . lex
    (27) plex -> .
    (28) lex -> . lex COMA exp
    (29) lex -> . exp
    (64) exp -> . scanf IZQPAR DERPAR
    (72) exp -> . exp SUMA exp
    (73) exp -> . exp RESTA exp
    (74) exp -> . exp MULTI exp
    (75) exp -> . exp DIV exp
    (76) exp -> . exp PORCENTAJE exp
    (77) exp -> . exp DIGUAL exp
    (78) exp -> . exp DESIGUAL exp
    (79) exp -> . exp MAYOR exp
    (80) exp -> . exp MENOR exp
    (81) exp -> . exp MAYORIGUAL exp
    (82) exp -> . exp MENORIGUAL exp
    (83) exp -> . exp AND exp
    (84) exp -> . exp OR exp
    (85) exp -> . exp BAND exp
    (86) exp -> . exp BOR exp
    (87) exp -> . exp BXOR exp
    (88) exp -> . exp BLEFT exp
    (89) exp -> . exp BRIGHT exp
    (90) exp -> . RESTA exp
    (91) exp -> . NOT exp
    (92) exp -> . BNOT exp
    (93) exp -> . sizeof exp
    (94) exp -> . IZQPAR exp DERPAR
    (95) exp -> . IZQPAR TYPE DERPAR exp
    (96) exp -> . exp ASK exp DP exp
    (97) exp -> . DOUBLE
    (98) exp -> . INTEGER
    (99) exp -> . ident
    (100) exp -> . ident lacs
    (101) exp -> . STR
    (102) exp -> . IZQCOR lex DERCOR
    (67) ident -> . ID

    DERPAR          reduce using rule 27 (plex -> .)
    scanf           shift and go to state 34
    RESTA           shift and go to state 36
    NOT             shift and go to state 37
    BNOT            shift and go to state 38
    sizeof          shift and go to state 39
    IZQPAR          shift and go to state 35
    DOUBLE          shift and go to state 40
    INTEGER         shift and go to state 41
    STR             shift and go to state 42
    IZQCOR          shift and go to state 43
    ID              shift and go to state 44

    ident                          shift and go to state 32
    plex                           shift and go to state 153
    lex                            shift and go to state 154
    exp                            shift and go to state 102

state 114

    (30) tag -> ident DP .

    DERCOR          reduce using rule 30 (tag -> ident DP .)
    for             reduce using rule 30 (tag -> ident DP .)
    if              reduce using rule 30 (tag -> ident DP .)
    while           reduce using rule 30 (tag -> ident DP .)
    switch          reduce using rule 30 (tag -> ident DP .)
    do              reduce using rule 30 (tag -> ident DP .)
    printf          reduce using rule 30 (tag -> ident DP .)
    goto            reduce using rule 30 (tag -> ident DP .)
    ID              reduce using rule 30 (tag -> ident DP .)
    int             reduce using rule 30 (tag -> ident DP .)
    float           reduce using rule 30 (tag -> ident DP .)
    char            reduce using rule 30 (tag -> ident DP .)
    double          reduce using rule 30 (tag -> ident DP .)
    void            reduce using rule 30 (tag -> ident DP .)
    break           reduce using rule 30 (tag -> ident DP .)
    default         reduce using rule 30 (tag -> ident DP .)
    case            reduce using rule 30 (tag -> ident DP .)


state 115

    (49) para -> for IZQPAR . para1 exp PCOMA para2 DERPAR IZQCOR linst DERCOR
    (50) para1 -> . asig PCOMA
    (51) para1 -> . decla PCOMA
    (32) asig -> . ident lacs IGUAL exp
    (33) asig -> . ident IGUAL exp
    (34) asig -> . ident lacs INCE
    (35) asig -> . ident INCE
    (36) asig -> . ident lacs DECRE
    (37) asig -> . ident DECRE
    (38) decla -> . TYPE ident lacs IGUAL exp
    (39) decla -> . TYPE ident IGUAL exp
    (67) ident -> . ID
    (103) TYPE -> . int
    (104) TYPE -> . float
    (105) TYPE -> . char
    (106) TYPE -> . double
    (107) TYPE -> . void

    ID              shift and go to state 44
    int             shift and go to state 7
    float           shift and go to state 8
    char            shift and go to state 9
    double          shift and go to state 10
    void            shift and go to state 11

    para1                          shift and go to state 155
    asig                           shift and go to state 156
    decla                          shift and go to state 157
    ident                          shift and go to state 158
    TYPE                           shift and go to state 67

state 116

    (42) si -> if IZQPAR . exp DERPAR IZQCOR linst DERCOR lelsi els
    (43) si -> if IZQPAR . exp DERPAR IZQCOR linst DERCOR els
    (64) exp -> . scanf IZQPAR DERPAR
    (72) exp -> . exp SUMA exp
    (73) exp -> . exp RESTA exp
    (74) exp -> . exp MULTI exp
    (75) exp -> . exp DIV exp
    (76) exp -> . exp PORCENTAJE exp
    (77) exp -> . exp DIGUAL exp
    (78) exp -> . exp DESIGUAL exp
    (79) exp -> . exp MAYOR exp
    (80) exp -> . exp MENOR exp
    (81) exp -> . exp MAYORIGUAL exp
    (82) exp -> . exp MENORIGUAL exp
    (83) exp -> . exp AND exp
    (84) exp -> . exp OR exp
    (85) exp -> . exp BAND exp
    (86) exp -> . exp BOR exp
    (87) exp -> . exp BXOR exp
    (88) exp -> . exp BLEFT exp
    (89) exp -> . exp BRIGHT exp
    (90) exp -> . RESTA exp
    (91) exp -> . NOT exp
    (92) exp -> . BNOT exp
    (93) exp -> . sizeof exp
    (94) exp -> . IZQPAR exp DERPAR
    (95) exp -> . IZQPAR TYPE DERPAR exp
    (96) exp -> . exp ASK exp DP exp
    (97) exp -> . DOUBLE
    (98) exp -> . INTEGER
    (99) exp -> . ident
    (100) exp -> . ident lacs
    (101) exp -> . STR
    (102) exp -> . IZQCOR lex DERCOR
    (67) ident -> . ID

    scanf           shift and go to state 34
    RESTA           shift and go to state 36
    NOT             shift and go to state 37
    BNOT            shift and go to state 38
    sizeof          shift and go to state 39
    IZQPAR          shift and go to state 35
    DOUBLE          shift and go to state 40
    INTEGER         shift and go to state 41
    STR             shift and go to state 42
    IZQCOR          shift and go to state 43
    ID              shift and go to state 44

    exp                            shift and go to state 159
    ident                          shift and go to state 32

state 117

    (40) mientras -> while IZQPAR . exp DERPAR IZQCOR linst DERCOR
    (64) exp -> . scanf IZQPAR DERPAR
    (72) exp -> . exp SUMA exp
    (73) exp -> . exp RESTA exp
    (74) exp -> . exp MULTI exp
    (75) exp -> . exp DIV exp
    (76) exp -> . exp PORCENTAJE exp
    (77) exp -> . exp DIGUAL exp
    (78) exp -> . exp DESIGUAL exp
    (79) exp -> . exp MAYOR exp
    (80) exp -> . exp MENOR exp
    (81) exp -> . exp MAYORIGUAL exp
    (82) exp -> . exp MENORIGUAL exp
    (83) exp -> . exp AND exp
    (84) exp -> . exp OR exp
    (85) exp -> . exp BAND exp
    (86) exp -> . exp BOR exp
    (87) exp -> . exp BXOR exp
    (88) exp -> . exp BLEFT exp
    (89) exp -> . exp BRIGHT exp
    (90) exp -> . RESTA exp
    (91) exp -> . NOT exp
    (92) exp -> . BNOT exp
    (93) exp -> . sizeof exp
    (94) exp -> . IZQPAR exp DERPAR
    (95) exp -> . IZQPAR TYPE DERPAR exp
    (96) exp -> . exp ASK exp DP exp
    (97) exp -> . DOUBLE
    (98) exp -> . INTEGER
    (99) exp -> . ident
    (100) exp -> . ident lacs
    (101) exp -> . STR
    (102) exp -> . IZQCOR lex DERCOR
    (67) ident -> . ID

    scanf           shift and go to state 34
    RESTA           shift and go to state 36
    NOT             shift and go to state 37
    BNOT            shift and go to state 38
    sizeof          shift and go to state 39
    IZQPAR          shift and go to state 35
    DOUBLE          shift and go to state 40
    INTEGER         shift and go to state 41
    STR             shift and go to state 42
    IZQCOR          shift and go to state 43
    ID              shift and go to state 44

    exp                            shift and go to state 160
    ident                          shift and go to state 32

state 118

    (55) cual -> switch IZQPAR . exp DERPAR IZQCOR lcase def DERCOR
    (64) exp -> . scanf IZQPAR DERPAR
    (72) exp -> . exp SUMA exp
    (73) exp -> . exp RESTA exp
    (74) exp -> . exp MULTI exp
    (75) exp -> . exp DIV exp
    (76) exp -> . exp PORCENTAJE exp
    (77) exp -> . exp DIGUAL exp
    (78) exp -> . exp DESIGUAL exp
    (79) exp -> . exp MAYOR exp
    (80) exp -> . exp MENOR exp
    (81) exp -> . exp MAYORIGUAL exp
    (82) exp -> . exp MENORIGUAL exp
    (83) exp -> . exp AND exp
    (84) exp -> . exp OR exp
    (85) exp -> . exp BAND exp
    (86) exp -> . exp BOR exp
    (87) exp -> . exp BXOR exp
    (88) exp -> . exp BLEFT exp
    (89) exp -> . exp BRIGHT exp
    (90) exp -> . RESTA exp
    (91) exp -> . NOT exp
    (92) exp -> . BNOT exp
    (93) exp -> . sizeof exp
    (94) exp -> . IZQPAR exp DERPAR
    (95) exp -> . IZQPAR TYPE DERPAR exp
    (96) exp -> . exp ASK exp DP exp
    (97) exp -> . DOUBLE
    (98) exp -> . INTEGER
    (99) exp -> . ident
    (100) exp -> . ident lacs
    (101) exp -> . STR
    (102) exp -> . IZQCOR lex DERCOR
    (67) ident -> . ID

    scanf           shift and go to state 34
    RESTA           shift and go to state 36
    NOT             shift and go to state 37
    BNOT            shift and go to state 38
    sizeof          shift and go to state 39
    IZQPAR          shift and go to state 35
    DOUBLE          shift and go to state 40
    INTEGER         shift and go to state 41
    STR             shift and go to state 42
    IZQCOR          shift and go to state 43
    ID              shift and go to state 44

    exp                            shift and go to state 161
    ident                          shift and go to state 32

state 119

    (41) dow -> do IZQCOR . linst DERCOR while IZQPAR exp DERPAR PCOMA
    (8) linst -> . linst inst
    (9) linst -> . inst
    (14) inst -> . asig PCOMA
    (15) inst -> . para
    (16) inst -> . si
    (17) inst -> . mientras
    (18) inst -> . cual
    (19) inst -> . call
    (20) inst -> . dow
    (21) inst -> . prin
    (22) inst -> . decla PCOMA
    (23) inst -> . tag
    (24) inst -> . gotot PCOMA
    (32) asig -> . ident lacs IGUAL exp
    (33) asig -> . ident IGUAL exp
    (34) asig -> . ident lacs INCE
    (35) asig -> . ident INCE
    (36) asig -> . ident lacs DECRE
    (37) asig -> . ident DECRE
    (49) para -> . for IZQPAR para1 exp PCOMA para2 DERPAR IZQCOR linst DERCOR
    (42) si -> . if IZQPAR exp DERPAR IZQCOR linst DERCOR lelsi els
    (43) si -> . if IZQPAR exp DERPAR IZQCOR linst DERCOR els
    (40) mientras -> . while IZQPAR exp DERPAR IZQCOR linst DERCOR
    (55) cual -> . switch IZQPAR exp DERPAR IZQCOR lcase def DERCOR
    (25) call -> . ident IZQPAR plex DERPAR PCOMA
    (41) dow -> . do IZQCOR linst DERCOR while IZQPAR exp DERPAR PCOMA
    (62) prin -> . printf IZQPAR STR lexpr DERPAR PCOMA
    (63) prin -> . printf IZQPAR STR DERPAR PCOMA
    (38) decla -> . TYPE ident lacs IGUAL exp
    (39) decla -> . TYPE ident IGUAL exp
    (30) tag -> . ident DP
    (31) gotot -> . goto ident
    (67) ident -> . ID
    (103) TYPE -> . int
    (104) TYPE -> . float
    (105) TYPE -> . char
    (106) TYPE -> . double
    (107) TYPE -> . void

    for             shift and go to state 61
    if              shift and go to state 62
    while           shift and go to state 63
    switch          shift and go to state 64
    do              shift and go to state 65
    printf          shift and go to state 66
    goto            shift and go to state 68
    ID              shift and go to state 44
    int             shift and go to state 7
    float           shift and go to state 8
    char            shift and go to state 9
    double          shift and go to state 10
    void            shift and go to state 11

    linst                          shift and go to state 162
    inst                           shift and go to state 48
    asig                           shift and go to state 49
    para                           shift and go to state 50
    si                             shift and go to state 51
    mientras                       shift and go to state 52
    cual                           shift and go to state 53
    call                           shift and go to state 54
    dow                            shift and go to state 55
    prin                           shift and go to state 56
    decla                          shift and go to state 57
    tag                            shift and go to state 58
    gotot                          shift and go to state 59
    ident                          shift and go to state 60
    TYPE                           shift and go to state 67

state 120

    (62) prin -> printf IZQPAR . STR lexpr DERPAR PCOMA
    (63) prin -> printf IZQPAR . STR DERPAR PCOMA

    STR             shift and go to state 163


state 121

    (31) gotot -> goto ident .

    PCOMA           reduce using rule 31 (gotot -> goto ident .)


state 122

    (4) body -> TYPE ID IZQPAR lpam DERPAR IZQCOR . linst DERCOR
    (8) linst -> . linst inst
    (9) linst -> . inst
    (14) inst -> . asig PCOMA
    (15) inst -> . para
    (16) inst -> . si
    (17) inst -> . mientras
    (18) inst -> . cual
    (19) inst -> . call
    (20) inst -> . dow
    (21) inst -> . prin
    (22) inst -> . decla PCOMA
    (23) inst -> . tag
    (24) inst -> . gotot PCOMA
    (32) asig -> . ident lacs IGUAL exp
    (33) asig -> . ident IGUAL exp
    (34) asig -> . ident lacs INCE
    (35) asig -> . ident INCE
    (36) asig -> . ident lacs DECRE
    (37) asig -> . ident DECRE
    (49) para -> . for IZQPAR para1 exp PCOMA para2 DERPAR IZQCOR linst DERCOR
    (42) si -> . if IZQPAR exp DERPAR IZQCOR linst DERCOR lelsi els
    (43) si -> . if IZQPAR exp DERPAR IZQCOR linst DERCOR els
    (40) mientras -> . while IZQPAR exp DERPAR IZQCOR linst DERCOR
    (55) cual -> . switch IZQPAR exp DERPAR IZQCOR lcase def DERCOR
    (25) call -> . ident IZQPAR plex DERPAR PCOMA
    (41) dow -> . do IZQCOR linst DERCOR while IZQPAR exp DERPAR PCOMA
    (62) prin -> . printf IZQPAR STR lexpr DERPAR PCOMA
    (63) prin -> . printf IZQPAR STR DERPAR PCOMA
    (38) decla -> . TYPE ident lacs IGUAL exp
    (39) decla -> . TYPE ident IGUAL exp
    (30) tag -> . ident DP
    (31) gotot -> . goto ident
    (67) ident -> . ID
    (103) TYPE -> . int
    (104) TYPE -> . float
    (105) TYPE -> . char
    (106) TYPE -> . double
    (107) TYPE -> . void

    for             shift and go to state 61
    if              shift and go to state 62
    while           shift and go to state 63
    switch          shift and go to state 64
    do              shift and go to state 65
    printf          shift and go to state 66
    goto            shift and go to state 68
    ID              shift and go to state 44
    int             shift and go to state 7
    float           shift and go to state 8
    char            shift and go to state 9
    double          shift and go to state 10
    void            shift and go to state 11

    TYPE                           shift and go to state 67
    linst                          shift and go to state 164
    inst                           shift and go to state 48
    asig                           shift and go to state 49
    para                           shift and go to state 50
    si                             shift and go to state 51
    mientras                       shift and go to state 52
    cual                           shift and go to state 53
    call                           shift and go to state 54
    dow                            shift and go to state 55
    prin                           shift and go to state 56
    decla                          shift and go to state 57
    tag                            shift and go to state 58
    gotot                          shift and go to state 59
    ident                          shift and go to state 60

state 123

    (12) lparam -> lparam COMA TYPE . ident
    (67) ident -> . ID

    ID              shift and go to state 44

    ident                          shift and go to state 165

state 124

    (5) body -> TYPE main IZQPAR lpam DERPAR IZQCOR . linst DERCOR
    (8) linst -> . linst inst
    (9) linst -> . inst
    (14) inst -> . asig PCOMA
    (15) inst -> . para
    (16) inst -> . si
    (17) inst -> . mientras
    (18) inst -> . cual
    (19) inst -> . call
    (20) inst -> . dow
    (21) inst -> . prin
    (22) inst -> . decla PCOMA
    (23) inst -> . tag
    (24) inst -> . gotot PCOMA
    (32) asig -> . ident lacs IGUAL exp
    (33) asig -> . ident IGUAL exp
    (34) asig -> . ident lacs INCE
    (35) asig -> . ident INCE
    (36) asig -> . ident lacs DECRE
    (37) asig -> . ident DECRE
    (49) para -> . for IZQPAR para1 exp PCOMA para2 DERPAR IZQCOR linst DERCOR
    (42) si -> . if IZQPAR exp DERPAR IZQCOR linst DERCOR lelsi els
    (43) si -> . if IZQPAR exp DERPAR IZQCOR linst DERCOR els
    (40) mientras -> . while IZQPAR exp DERPAR IZQCOR linst DERCOR
    (55) cual -> . switch IZQPAR exp DERPAR IZQCOR lcase def DERCOR
    (25) call -> . ident IZQPAR plex DERPAR PCOMA
    (41) dow -> . do IZQCOR linst DERCOR while IZQPAR exp DERPAR PCOMA
    (62) prin -> . printf IZQPAR STR lexpr DERPAR PCOMA
    (63) prin -> . printf IZQPAR STR DERPAR PCOMA
    (38) decla -> . TYPE ident lacs IGUAL exp
    (39) decla -> . TYPE ident IGUAL exp
    (30) tag -> . ident DP
    (31) gotot -> . goto ident
    (67) ident -> . ID
    (103) TYPE -> . int
    (104) TYPE -> . float
    (105) TYPE -> . char
    (106) TYPE -> . double
    (107) TYPE -> . void

    for             shift and go to state 61
    if              shift and go to state 62
    while           shift and go to state 63
    switch          shift and go to state 64
    do              shift and go to state 65
    printf          shift and go to state 66
    goto            shift and go to state 68
    ID              shift and go to state 44
    int             shift and go to state 7
    float           shift and go to state 8
    char            shift and go to state 9
    double          shift and go to state 10
    void            shift and go to state 11

    TYPE                           shift and go to state 67
    linst                          shift and go to state 166
    inst                           shift and go to state 48
    asig                           shift and go to state 49
    para                           shift and go to state 50
    si                             shift and go to state 51
    mientras                       shift and go to state 52
    cual                           shift and go to state 53
    call                           shift and go to state 54
    dow                            shift and go to state 55
    prin                           shift and go to state 56
    decla                          shift and go to state 57
    tag                            shift and go to state 58
    gotot                          shift and go to state 59
    ident                          shift and go to state 60

state 125

    (72) exp -> exp SUMA exp .
    (72) exp -> exp . SUMA exp
    (73) exp -> exp . RESTA exp
    (74) exp -> exp . MULTI exp
    (75) exp -> exp . DIV exp
    (76) exp -> exp . PORCENTAJE exp
    (77) exp -> exp . DIGUAL exp
    (78) exp -> exp . DESIGUAL exp
    (79) exp -> exp . MAYOR exp
    (80) exp -> exp . MENOR exp
    (81) exp -> exp . MAYORIGUAL exp
    (82) exp -> exp . MENORIGUAL exp
    (83) exp -> exp . AND exp
    (84) exp -> exp . OR exp
    (85) exp -> exp . BAND exp
    (86) exp -> exp . BOR exp
    (87) exp -> exp . BXOR exp
    (88) exp -> exp . BLEFT exp
    (89) exp -> exp . BRIGHT exp
    (96) exp -> exp . ASK exp DP exp

    SUMA            reduce using rule 72 (exp -> exp SUMA exp .)
    RESTA           reduce using rule 72 (exp -> exp SUMA exp .)
    DIGUAL          reduce using rule 72 (exp -> exp SUMA exp .)
    DESIGUAL        reduce using rule 72 (exp -> exp SUMA exp .)
    MAYOR           reduce using rule 72 (exp -> exp SUMA exp .)
    MENOR           reduce using rule 72 (exp -> exp SUMA exp .)
    MAYORIGUAL      reduce using rule 72 (exp -> exp SUMA exp .)
    MENORIGUAL      reduce using rule 72 (exp -> exp SUMA exp .)
    AND             reduce using rule 72 (exp -> exp SUMA exp .)
    OR              reduce using rule 72 (exp -> exp SUMA exp .)
    BAND            reduce using rule 72 (exp -> exp SUMA exp .)
    BOR             reduce using rule 72 (exp -> exp SUMA exp .)
    BXOR            reduce using rule 72 (exp -> exp SUMA exp .)
    BLEFT           reduce using rule 72 (exp -> exp SUMA exp .)
    BRIGHT          reduce using rule 72 (exp -> exp SUMA exp .)
    ASK             reduce using rule 72 (exp -> exp SUMA exp .)
    PCOMA           reduce using rule 72 (exp -> exp SUMA exp .)
    DERPAR          reduce using rule 72 (exp -> exp SUMA exp .)
    DERLLAVE        reduce using rule 72 (exp -> exp SUMA exp .)
    DERCOR          reduce using rule 72 (exp -> exp SUMA exp .)
    COMA            reduce using rule 72 (exp -> exp SUMA exp .)
    DP              reduce using rule 72 (exp -> exp SUMA exp .)
    MULTI           shift and go to state 77
    DIV             shift and go to state 78
    PORCENTAJE      shift and go to state 79

  ! MULTI           [ reduce using rule 72 (exp -> exp SUMA exp .) ]
  ! DIV             [ reduce using rule 72 (exp -> exp SUMA exp .) ]
  ! PORCENTAJE      [ reduce using rule 72 (exp -> exp SUMA exp .) ]
  ! SUMA            [ shift and go to state 75 ]
  ! RESTA           [ shift and go to state 76 ]
  ! DIGUAL          [ shift and go to state 80 ]
  ! DESIGUAL        [ shift and go to state 81 ]
  ! MAYOR           [ shift and go to state 82 ]
  ! MENOR           [ shift and go to state 83 ]
  ! MAYORIGUAL      [ shift and go to state 84 ]
  ! MENORIGUAL      [ shift and go to state 85 ]
  ! AND             [ shift and go to state 86 ]
  ! OR              [ shift and go to state 87 ]
  ! BAND            [ shift and go to state 88 ]
  ! BOR             [ shift and go to state 89 ]
  ! BXOR            [ shift and go to state 90 ]
  ! BLEFT           [ shift and go to state 91 ]
  ! BRIGHT          [ shift and go to state 92 ]
  ! ASK             [ shift and go to state 93 ]


state 126

    (73) exp -> exp RESTA exp .
    (72) exp -> exp . SUMA exp
    (73) exp -> exp . RESTA exp
    (74) exp -> exp . MULTI exp
    (75) exp -> exp . DIV exp
    (76) exp -> exp . PORCENTAJE exp
    (77) exp -> exp . DIGUAL exp
    (78) exp -> exp . DESIGUAL exp
    (79) exp -> exp . MAYOR exp
    (80) exp -> exp . MENOR exp
    (81) exp -> exp . MAYORIGUAL exp
    (82) exp -> exp . MENORIGUAL exp
    (83) exp -> exp . AND exp
    (84) exp -> exp . OR exp
    (85) exp -> exp . BAND exp
    (86) exp -> exp . BOR exp
    (87) exp -> exp . BXOR exp
    (88) exp -> exp . BLEFT exp
    (89) exp -> exp . BRIGHT exp
    (96) exp -> exp . ASK exp DP exp

    SUMA            reduce using rule 73 (exp -> exp RESTA exp .)
    RESTA           reduce using rule 73 (exp -> exp RESTA exp .)
    DIGUAL          reduce using rule 73 (exp -> exp RESTA exp .)
    DESIGUAL        reduce using rule 73 (exp -> exp RESTA exp .)
    MAYOR           reduce using rule 73 (exp -> exp RESTA exp .)
    MENOR           reduce using rule 73 (exp -> exp RESTA exp .)
    MAYORIGUAL      reduce using rule 73 (exp -> exp RESTA exp .)
    MENORIGUAL      reduce using rule 73 (exp -> exp RESTA exp .)
    AND             reduce using rule 73 (exp -> exp RESTA exp .)
    OR              reduce using rule 73 (exp -> exp RESTA exp .)
    BAND            reduce using rule 73 (exp -> exp RESTA exp .)
    BOR             reduce using rule 73 (exp -> exp RESTA exp .)
    BXOR            reduce using rule 73 (exp -> exp RESTA exp .)
    BLEFT           reduce using rule 73 (exp -> exp RESTA exp .)
    BRIGHT          reduce using rule 73 (exp -> exp RESTA exp .)
    ASK             reduce using rule 73 (exp -> exp RESTA exp .)
    PCOMA           reduce using rule 73 (exp -> exp RESTA exp .)
    DERPAR          reduce using rule 73 (exp -> exp RESTA exp .)
    DERLLAVE        reduce using rule 73 (exp -> exp RESTA exp .)
    DERCOR          reduce using rule 73 (exp -> exp RESTA exp .)
    COMA            reduce using rule 73 (exp -> exp RESTA exp .)
    DP              reduce using rule 73 (exp -> exp RESTA exp .)
    MULTI           shift and go to state 77
    DIV             shift and go to state 78
    PORCENTAJE      shift and go to state 79

  ! MULTI           [ reduce using rule 73 (exp -> exp RESTA exp .) ]
  ! DIV             [ reduce using rule 73 (exp -> exp RESTA exp .) ]
  ! PORCENTAJE      [ reduce using rule 73 (exp -> exp RESTA exp .) ]
  ! SUMA            [ shift and go to state 75 ]
  ! RESTA           [ shift and go to state 76 ]
  ! DIGUAL          [ shift and go to state 80 ]
  ! DESIGUAL        [ shift and go to state 81 ]
  ! MAYOR           [ shift and go to state 82 ]
  ! MENOR           [ shift and go to state 83 ]
  ! MAYORIGUAL      [ shift and go to state 84 ]
  ! MENORIGUAL      [ shift and go to state 85 ]
  ! AND             [ shift and go to state 86 ]
  ! OR              [ shift and go to state 87 ]
  ! BAND            [ shift and go to state 88 ]
  ! BOR             [ shift and go to state 89 ]
  ! BXOR            [ shift and go to state 90 ]
  ! BLEFT           [ shift and go to state 91 ]
  ! BRIGHT          [ shift and go to state 92 ]
  ! ASK             [ shift and go to state 93 ]


state 127

    (74) exp -> exp MULTI exp .
    (72) exp -> exp . SUMA exp
    (73) exp -> exp . RESTA exp
    (74) exp -> exp . MULTI exp
    (75) exp -> exp . DIV exp
    (76) exp -> exp . PORCENTAJE exp
    (77) exp -> exp . DIGUAL exp
    (78) exp -> exp . DESIGUAL exp
    (79) exp -> exp . MAYOR exp
    (80) exp -> exp . MENOR exp
    (81) exp -> exp . MAYORIGUAL exp
    (82) exp -> exp . MENORIGUAL exp
    (83) exp -> exp . AND exp
    (84) exp -> exp . OR exp
    (85) exp -> exp . BAND exp
    (86) exp -> exp . BOR exp
    (87) exp -> exp . BXOR exp
    (88) exp -> exp . BLEFT exp
    (89) exp -> exp . BRIGHT exp
    (96) exp -> exp . ASK exp DP exp

    SUMA            reduce using rule 74 (exp -> exp MULTI exp .)
    RESTA           reduce using rule 74 (exp -> exp MULTI exp .)
    MULTI           reduce using rule 74 (exp -> exp MULTI exp .)
    DIV             reduce using rule 74 (exp -> exp MULTI exp .)
    PORCENTAJE      reduce using rule 74 (exp -> exp MULTI exp .)
    DIGUAL          reduce using rule 74 (exp -> exp MULTI exp .)
    DESIGUAL        reduce using rule 74 (exp -> exp MULTI exp .)
    MAYOR           reduce using rule 74 (exp -> exp MULTI exp .)
    MENOR           reduce using rule 74 (exp -> exp MULTI exp .)
    MAYORIGUAL      reduce using rule 74 (exp -> exp MULTI exp .)
    MENORIGUAL      reduce using rule 74 (exp -> exp MULTI exp .)
    AND             reduce using rule 74 (exp -> exp MULTI exp .)
    OR              reduce using rule 74 (exp -> exp MULTI exp .)
    BAND            reduce using rule 74 (exp -> exp MULTI exp .)
    BOR             reduce using rule 74 (exp -> exp MULTI exp .)
    BXOR            reduce using rule 74 (exp -> exp MULTI exp .)
    BLEFT           reduce using rule 74 (exp -> exp MULTI exp .)
    BRIGHT          reduce using rule 74 (exp -> exp MULTI exp .)
    ASK             reduce using rule 74 (exp -> exp MULTI exp .)
    PCOMA           reduce using rule 74 (exp -> exp MULTI exp .)
    DERPAR          reduce using rule 74 (exp -> exp MULTI exp .)
    DERLLAVE        reduce using rule 74 (exp -> exp MULTI exp .)
    DERCOR          reduce using rule 74 (exp -> exp MULTI exp .)
    COMA            reduce using rule 74 (exp -> exp MULTI exp .)
    DP              reduce using rule 74 (exp -> exp MULTI exp .)

  ! SUMA            [ shift and go to state 75 ]
  ! RESTA           [ shift and go to state 76 ]
  ! MULTI           [ shift and go to state 77 ]
  ! DIV             [ shift and go to state 78 ]
  ! PORCENTAJE      [ shift and go to state 79 ]
  ! DIGUAL          [ shift and go to state 80 ]
  ! DESIGUAL        [ shift and go to state 81 ]
  ! MAYOR           [ shift and go to state 82 ]
  ! MENOR           [ shift and go to state 83 ]
  ! MAYORIGUAL      [ shift and go to state 84 ]
  ! MENORIGUAL      [ shift and go to state 85 ]
  ! AND             [ shift and go to state 86 ]
  ! OR              [ shift and go to state 87 ]
  ! BAND            [ shift and go to state 88 ]
  ! BOR             [ shift and go to state 89 ]
  ! BXOR            [ shift and go to state 90 ]
  ! BLEFT           [ shift and go to state 91 ]
  ! BRIGHT          [ shift and go to state 92 ]
  ! ASK             [ shift and go to state 93 ]


state 128

    (75) exp -> exp DIV exp .
    (72) exp -> exp . SUMA exp
    (73) exp -> exp . RESTA exp
    (74) exp -> exp . MULTI exp
    (75) exp -> exp . DIV exp
    (76) exp -> exp . PORCENTAJE exp
    (77) exp -> exp . DIGUAL exp
    (78) exp -> exp . DESIGUAL exp
    (79) exp -> exp . MAYOR exp
    (80) exp -> exp . MENOR exp
    (81) exp -> exp . MAYORIGUAL exp
    (82) exp -> exp . MENORIGUAL exp
    (83) exp -> exp . AND exp
    (84) exp -> exp . OR exp
    (85) exp -> exp . BAND exp
    (86) exp -> exp . BOR exp
    (87) exp -> exp . BXOR exp
    (88) exp -> exp . BLEFT exp
    (89) exp -> exp . BRIGHT exp
    (96) exp -> exp . ASK exp DP exp

    SUMA            reduce using rule 75 (exp -> exp DIV exp .)
    RESTA           reduce using rule 75 (exp -> exp DIV exp .)
    MULTI           reduce using rule 75 (exp -> exp DIV exp .)
    DIV             reduce using rule 75 (exp -> exp DIV exp .)
    PORCENTAJE      reduce using rule 75 (exp -> exp DIV exp .)
    DIGUAL          reduce using rule 75 (exp -> exp DIV exp .)
    DESIGUAL        reduce using rule 75 (exp -> exp DIV exp .)
    MAYOR           reduce using rule 75 (exp -> exp DIV exp .)
    MENOR           reduce using rule 75 (exp -> exp DIV exp .)
    MAYORIGUAL      reduce using rule 75 (exp -> exp DIV exp .)
    MENORIGUAL      reduce using rule 75 (exp -> exp DIV exp .)
    AND             reduce using rule 75 (exp -> exp DIV exp .)
    OR              reduce using rule 75 (exp -> exp DIV exp .)
    BAND            reduce using rule 75 (exp -> exp DIV exp .)
    BOR             reduce using rule 75 (exp -> exp DIV exp .)
    BXOR            reduce using rule 75 (exp -> exp DIV exp .)
    BLEFT           reduce using rule 75 (exp -> exp DIV exp .)
    BRIGHT          reduce using rule 75 (exp -> exp DIV exp .)
    ASK             reduce using rule 75 (exp -> exp DIV exp .)
    PCOMA           reduce using rule 75 (exp -> exp DIV exp .)
    DERPAR          reduce using rule 75 (exp -> exp DIV exp .)
    DERLLAVE        reduce using rule 75 (exp -> exp DIV exp .)
    DERCOR          reduce using rule 75 (exp -> exp DIV exp .)
    COMA            reduce using rule 75 (exp -> exp DIV exp .)
    DP              reduce using rule 75 (exp -> exp DIV exp .)

  ! SUMA            [ shift and go to state 75 ]
  ! RESTA           [ shift and go to state 76 ]
  ! MULTI           [ shift and go to state 77 ]
  ! DIV             [ shift and go to state 78 ]
  ! PORCENTAJE      [ shift and go to state 79 ]
  ! DIGUAL          [ shift and go to state 80 ]
  ! DESIGUAL        [ shift and go to state 81 ]
  ! MAYOR           [ shift and go to state 82 ]
  ! MENOR           [ shift and go to state 83 ]
  ! MAYORIGUAL      [ shift and go to state 84 ]
  ! MENORIGUAL      [ shift and go to state 85 ]
  ! AND             [ shift and go to state 86 ]
  ! OR              [ shift and go to state 87 ]
  ! BAND            [ shift and go to state 88 ]
  ! BOR             [ shift and go to state 89 ]
  ! BXOR            [ shift and go to state 90 ]
  ! BLEFT           [ shift and go to state 91 ]
  ! BRIGHT          [ shift and go to state 92 ]
  ! ASK             [ shift and go to state 93 ]


state 129

    (76) exp -> exp PORCENTAJE exp .
    (72) exp -> exp . SUMA exp
    (73) exp -> exp . RESTA exp
    (74) exp -> exp . MULTI exp
    (75) exp -> exp . DIV exp
    (76) exp -> exp . PORCENTAJE exp
    (77) exp -> exp . DIGUAL exp
    (78) exp -> exp . DESIGUAL exp
    (79) exp -> exp . MAYOR exp
    (80) exp -> exp . MENOR exp
    (81) exp -> exp . MAYORIGUAL exp
    (82) exp -> exp . MENORIGUAL exp
    (83) exp -> exp . AND exp
    (84) exp -> exp . OR exp
    (85) exp -> exp . BAND exp
    (86) exp -> exp . BOR exp
    (87) exp -> exp . BXOR exp
    (88) exp -> exp . BLEFT exp
    (89) exp -> exp . BRIGHT exp
    (96) exp -> exp . ASK exp DP exp

    SUMA            reduce using rule 76 (exp -> exp PORCENTAJE exp .)
    RESTA           reduce using rule 76 (exp -> exp PORCENTAJE exp .)
    MULTI           reduce using rule 76 (exp -> exp PORCENTAJE exp .)
    DIV             reduce using rule 76 (exp -> exp PORCENTAJE exp .)
    PORCENTAJE      reduce using rule 76 (exp -> exp PORCENTAJE exp .)
    DIGUAL          reduce using rule 76 (exp -> exp PORCENTAJE exp .)
    DESIGUAL        reduce using rule 76 (exp -> exp PORCENTAJE exp .)
    MAYOR           reduce using rule 76 (exp -> exp PORCENTAJE exp .)
    MENOR           reduce using rule 76 (exp -> exp PORCENTAJE exp .)
    MAYORIGUAL      reduce using rule 76 (exp -> exp PORCENTAJE exp .)
    MENORIGUAL      reduce using rule 76 (exp -> exp PORCENTAJE exp .)
    AND             reduce using rule 76 (exp -> exp PORCENTAJE exp .)
    OR              reduce using rule 76 (exp -> exp PORCENTAJE exp .)
    BAND            reduce using rule 76 (exp -> exp PORCENTAJE exp .)
    BOR             reduce using rule 76 (exp -> exp PORCENTAJE exp .)
    BXOR            reduce using rule 76 (exp -> exp PORCENTAJE exp .)
    BLEFT           reduce using rule 76 (exp -> exp PORCENTAJE exp .)
    BRIGHT          reduce using rule 76 (exp -> exp PORCENTAJE exp .)
    ASK             reduce using rule 76 (exp -> exp PORCENTAJE exp .)
    PCOMA           reduce using rule 76 (exp -> exp PORCENTAJE exp .)
    DERPAR          reduce using rule 76 (exp -> exp PORCENTAJE exp .)
    DERLLAVE        reduce using rule 76 (exp -> exp PORCENTAJE exp .)
    DERCOR          reduce using rule 76 (exp -> exp PORCENTAJE exp .)
    COMA            reduce using rule 76 (exp -> exp PORCENTAJE exp .)
    DP              reduce using rule 76 (exp -> exp PORCENTAJE exp .)

  ! SUMA            [ shift and go to state 75 ]
  ! RESTA           [ shift and go to state 76 ]
  ! MULTI           [ shift and go to state 77 ]
  ! DIV             [ shift and go to state 78 ]
  ! PORCENTAJE      [ shift and go to state 79 ]
  ! DIGUAL          [ shift and go to state 80 ]
  ! DESIGUAL        [ shift and go to state 81 ]
  ! MAYOR           [ shift and go to state 82 ]
  ! MENOR           [ shift and go to state 83 ]
  ! MAYORIGUAL      [ shift and go to state 84 ]
  ! MENORIGUAL      [ shift and go to state 85 ]
  ! AND             [ shift and go to state 86 ]
  ! OR              [ shift and go to state 87 ]
  ! BAND            [ shift and go to state 88 ]
  ! BOR             [ shift and go to state 89 ]
  ! BXOR            [ shift and go to state 90 ]
  ! BLEFT           [ shift and go to state 91 ]
  ! BRIGHT          [ shift and go to state 92 ]
  ! ASK             [ shift and go to state 93 ]


state 130

    (77) exp -> exp DIGUAL exp .
    (72) exp -> exp . SUMA exp
    (73) exp -> exp . RESTA exp
    (74) exp -> exp . MULTI exp
    (75) exp -> exp . DIV exp
    (76) exp -> exp . PORCENTAJE exp
    (77) exp -> exp . DIGUAL exp
    (78) exp -> exp . DESIGUAL exp
    (79) exp -> exp . MAYOR exp
    (80) exp -> exp . MENOR exp
    (81) exp -> exp . MAYORIGUAL exp
    (82) exp -> exp . MENORIGUAL exp
    (83) exp -> exp . AND exp
    (84) exp -> exp . OR exp
    (85) exp -> exp . BAND exp
    (86) exp -> exp . BOR exp
    (87) exp -> exp . BXOR exp
    (88) exp -> exp . BLEFT exp
    (89) exp -> exp . BRIGHT exp
    (96) exp -> exp . ASK exp DP exp

    DIGUAL          reduce using rule 77 (exp -> exp DIGUAL exp .)
    DESIGUAL        reduce using rule 77 (exp -> exp DIGUAL exp .)
    MAYOR           reduce using rule 77 (exp -> exp DIGUAL exp .)
    MENOR           reduce using rule 77 (exp -> exp DIGUAL exp .)
    MAYORIGUAL      reduce using rule 77 (exp -> exp DIGUAL exp .)
    MENORIGUAL      reduce using rule 77 (exp -> exp DIGUAL exp .)
    AND             reduce using rule 77 (exp -> exp DIGUAL exp .)
    OR              reduce using rule 77 (exp -> exp DIGUAL exp .)
    BAND            reduce using rule 77 (exp -> exp DIGUAL exp .)
    BOR             reduce using rule 77 (exp -> exp DIGUAL exp .)
    BXOR            reduce using rule 77 (exp -> exp DIGUAL exp .)
    BLEFT           reduce using rule 77 (exp -> exp DIGUAL exp .)
    BRIGHT          reduce using rule 77 (exp -> exp DIGUAL exp .)
    ASK             reduce using rule 77 (exp -> exp DIGUAL exp .)
    PCOMA           reduce using rule 77 (exp -> exp DIGUAL exp .)
    DERPAR          reduce using rule 77 (exp -> exp DIGUAL exp .)
    DERLLAVE        reduce using rule 77 (exp -> exp DIGUAL exp .)
    DERCOR          reduce using rule 77 (exp -> exp DIGUAL exp .)
    COMA            reduce using rule 77 (exp -> exp DIGUAL exp .)
    DP              reduce using rule 77 (exp -> exp DIGUAL exp .)
    SUMA            shift and go to state 75
    RESTA           shift and go to state 76
    MULTI           shift and go to state 77
    DIV             shift and go to state 78
    PORCENTAJE      shift and go to state 79

  ! SUMA            [ reduce using rule 77 (exp -> exp DIGUAL exp .) ]
  ! RESTA           [ reduce using rule 77 (exp -> exp DIGUAL exp .) ]
  ! MULTI           [ reduce using rule 77 (exp -> exp DIGUAL exp .) ]
  ! DIV             [ reduce using rule 77 (exp -> exp DIGUAL exp .) ]
  ! PORCENTAJE      [ reduce using rule 77 (exp -> exp DIGUAL exp .) ]
  ! DIGUAL          [ shift and go to state 80 ]
  ! DESIGUAL        [ shift and go to state 81 ]
  ! MAYOR           [ shift and go to state 82 ]
  ! MENOR           [ shift and go to state 83 ]
  ! MAYORIGUAL      [ shift and go to state 84 ]
  ! MENORIGUAL      [ shift and go to state 85 ]
  ! AND             [ shift and go to state 86 ]
  ! OR              [ shift and go to state 87 ]
  ! BAND            [ shift and go to state 88 ]
  ! BOR             [ shift and go to state 89 ]
  ! BXOR            [ shift and go to state 90 ]
  ! BLEFT           [ shift and go to state 91 ]
  ! BRIGHT          [ shift and go to state 92 ]
  ! ASK             [ shift and go to state 93 ]


state 131

    (78) exp -> exp DESIGUAL exp .
    (72) exp -> exp . SUMA exp
    (73) exp -> exp . RESTA exp
    (74) exp -> exp . MULTI exp
    (75) exp -> exp . DIV exp
    (76) exp -> exp . PORCENTAJE exp
    (77) exp -> exp . DIGUAL exp
    (78) exp -> exp . DESIGUAL exp
    (79) exp -> exp . MAYOR exp
    (80) exp -> exp . MENOR exp
    (81) exp -> exp . MAYORIGUAL exp
    (82) exp -> exp . MENORIGUAL exp
    (83) exp -> exp . AND exp
    (84) exp -> exp . OR exp
    (85) exp -> exp . BAND exp
    (86) exp -> exp . BOR exp
    (87) exp -> exp . BXOR exp
    (88) exp -> exp . BLEFT exp
    (89) exp -> exp . BRIGHT exp
    (96) exp -> exp . ASK exp DP exp

    DIGUAL          reduce using rule 78 (exp -> exp DESIGUAL exp .)
    DESIGUAL        reduce using rule 78 (exp -> exp DESIGUAL exp .)
    MAYOR           reduce using rule 78 (exp -> exp DESIGUAL exp .)
    MENOR           reduce using rule 78 (exp -> exp DESIGUAL exp .)
    MAYORIGUAL      reduce using rule 78 (exp -> exp DESIGUAL exp .)
    MENORIGUAL      reduce using rule 78 (exp -> exp DESIGUAL exp .)
    AND             reduce using rule 78 (exp -> exp DESIGUAL exp .)
    OR              reduce using rule 78 (exp -> exp DESIGUAL exp .)
    BAND            reduce using rule 78 (exp -> exp DESIGUAL exp .)
    BOR             reduce using rule 78 (exp -> exp DESIGUAL exp .)
    BXOR            reduce using rule 78 (exp -> exp DESIGUAL exp .)
    BLEFT           reduce using rule 78 (exp -> exp DESIGUAL exp .)
    BRIGHT          reduce using rule 78 (exp -> exp DESIGUAL exp .)
    ASK             reduce using rule 78 (exp -> exp DESIGUAL exp .)
    PCOMA           reduce using rule 78 (exp -> exp DESIGUAL exp .)
    DERPAR          reduce using rule 78 (exp -> exp DESIGUAL exp .)
    DERLLAVE        reduce using rule 78 (exp -> exp DESIGUAL exp .)
    DERCOR          reduce using rule 78 (exp -> exp DESIGUAL exp .)
    COMA            reduce using rule 78 (exp -> exp DESIGUAL exp .)
    DP              reduce using rule 78 (exp -> exp DESIGUAL exp .)
    SUMA            shift and go to state 75
    RESTA           shift and go to state 76
    MULTI           shift and go to state 77
    DIV             shift and go to state 78
    PORCENTAJE      shift and go to state 79

  ! SUMA            [ reduce using rule 78 (exp -> exp DESIGUAL exp .) ]
  ! RESTA           [ reduce using rule 78 (exp -> exp DESIGUAL exp .) ]
  ! MULTI           [ reduce using rule 78 (exp -> exp DESIGUAL exp .) ]
  ! DIV             [ reduce using rule 78 (exp -> exp DESIGUAL exp .) ]
  ! PORCENTAJE      [ reduce using rule 78 (exp -> exp DESIGUAL exp .) ]
  ! DIGUAL          [ shift and go to state 80 ]
  ! DESIGUAL        [ shift and go to state 81 ]
  ! MAYOR           [ shift and go to state 82 ]
  ! MENOR           [ shift and go to state 83 ]
  ! MAYORIGUAL      [ shift and go to state 84 ]
  ! MENORIGUAL      [ shift and go to state 85 ]
  ! AND             [ shift and go to state 86 ]
  ! OR              [ shift and go to state 87 ]
  ! BAND            [ shift and go to state 88 ]
  ! BOR             [ shift and go to state 89 ]
  ! BXOR            [ shift and go to state 90 ]
  ! BLEFT           [ shift and go to state 91 ]
  ! BRIGHT          [ shift and go to state 92 ]
  ! ASK             [ shift and go to state 93 ]


state 132

    (79) exp -> exp MAYOR exp .
    (72) exp -> exp . SUMA exp
    (73) exp -> exp . RESTA exp
    (74) exp -> exp . MULTI exp
    (75) exp -> exp . DIV exp
    (76) exp -> exp . PORCENTAJE exp
    (77) exp -> exp . DIGUAL exp
    (78) exp -> exp . DESIGUAL exp
    (79) exp -> exp . MAYOR exp
    (80) exp -> exp . MENOR exp
    (81) exp -> exp . MAYORIGUAL exp
    (82) exp -> exp . MENORIGUAL exp
    (83) exp -> exp . AND exp
    (84) exp -> exp . OR exp
    (85) exp -> exp . BAND exp
    (86) exp -> exp . BOR exp
    (87) exp -> exp . BXOR exp
    (88) exp -> exp . BLEFT exp
    (89) exp -> exp . BRIGHT exp
    (96) exp -> exp . ASK exp DP exp

    DIGUAL          reduce using rule 79 (exp -> exp MAYOR exp .)
    DESIGUAL        reduce using rule 79 (exp -> exp MAYOR exp .)
    MAYOR           reduce using rule 79 (exp -> exp MAYOR exp .)
    MENOR           reduce using rule 79 (exp -> exp MAYOR exp .)
    MAYORIGUAL      reduce using rule 79 (exp -> exp MAYOR exp .)
    MENORIGUAL      reduce using rule 79 (exp -> exp MAYOR exp .)
    AND             reduce using rule 79 (exp -> exp MAYOR exp .)
    OR              reduce using rule 79 (exp -> exp MAYOR exp .)
    BAND            reduce using rule 79 (exp -> exp MAYOR exp .)
    BOR             reduce using rule 79 (exp -> exp MAYOR exp .)
    BXOR            reduce using rule 79 (exp -> exp MAYOR exp .)
    BLEFT           reduce using rule 79 (exp -> exp MAYOR exp .)
    BRIGHT          reduce using rule 79 (exp -> exp MAYOR exp .)
    ASK             reduce using rule 79 (exp -> exp MAYOR exp .)
    PCOMA           reduce using rule 79 (exp -> exp MAYOR exp .)
    DERPAR          reduce using rule 79 (exp -> exp MAYOR exp .)
    DERLLAVE        reduce using rule 79 (exp -> exp MAYOR exp .)
    DERCOR          reduce using rule 79 (exp -> exp MAYOR exp .)
    COMA            reduce using rule 79 (exp -> exp MAYOR exp .)
    DP              reduce using rule 79 (exp -> exp MAYOR exp .)
    SUMA            shift and go to state 75
    RESTA           shift and go to state 76
    MULTI           shift and go to state 77
    DIV             shift and go to state 78
    PORCENTAJE      shift and go to state 79

  ! SUMA            [ reduce using rule 79 (exp -> exp MAYOR exp .) ]
  ! RESTA           [ reduce using rule 79 (exp -> exp MAYOR exp .) ]
  ! MULTI           [ reduce using rule 79 (exp -> exp MAYOR exp .) ]
  ! DIV             [ reduce using rule 79 (exp -> exp MAYOR exp .) ]
  ! PORCENTAJE      [ reduce using rule 79 (exp -> exp MAYOR exp .) ]
  ! DIGUAL          [ shift and go to state 80 ]
  ! DESIGUAL        [ shift and go to state 81 ]
  ! MAYOR           [ shift and go to state 82 ]
  ! MENOR           [ shift and go to state 83 ]
  ! MAYORIGUAL      [ shift and go to state 84 ]
  ! MENORIGUAL      [ shift and go to state 85 ]
  ! AND             [ shift and go to state 86 ]
  ! OR              [ shift and go to state 87 ]
  ! BAND            [ shift and go to state 88 ]
  ! BOR             [ shift and go to state 89 ]
  ! BXOR            [ shift and go to state 90 ]
  ! BLEFT           [ shift and go to state 91 ]
  ! BRIGHT          [ shift and go to state 92 ]
  ! ASK             [ shift and go to state 93 ]


state 133

    (80) exp -> exp MENOR exp .
    (72) exp -> exp . SUMA exp
    (73) exp -> exp . RESTA exp
    (74) exp -> exp . MULTI exp
    (75) exp -> exp . DIV exp
    (76) exp -> exp . PORCENTAJE exp
    (77) exp -> exp . DIGUAL exp
    (78) exp -> exp . DESIGUAL exp
    (79) exp -> exp . MAYOR exp
    (80) exp -> exp . MENOR exp
    (81) exp -> exp . MAYORIGUAL exp
    (82) exp -> exp . MENORIGUAL exp
    (83) exp -> exp . AND exp
    (84) exp -> exp . OR exp
    (85) exp -> exp . BAND exp
    (86) exp -> exp . BOR exp
    (87) exp -> exp . BXOR exp
    (88) exp -> exp . BLEFT exp
    (89) exp -> exp . BRIGHT exp
    (96) exp -> exp . ASK exp DP exp

    DIGUAL          reduce using rule 80 (exp -> exp MENOR exp .)
    DESIGUAL        reduce using rule 80 (exp -> exp MENOR exp .)
    MAYOR           reduce using rule 80 (exp -> exp MENOR exp .)
    MENOR           reduce using rule 80 (exp -> exp MENOR exp .)
    MAYORIGUAL      reduce using rule 80 (exp -> exp MENOR exp .)
    MENORIGUAL      reduce using rule 80 (exp -> exp MENOR exp .)
    AND             reduce using rule 80 (exp -> exp MENOR exp .)
    OR              reduce using rule 80 (exp -> exp MENOR exp .)
    BAND            reduce using rule 80 (exp -> exp MENOR exp .)
    BOR             reduce using rule 80 (exp -> exp MENOR exp .)
    BXOR            reduce using rule 80 (exp -> exp MENOR exp .)
    BLEFT           reduce using rule 80 (exp -> exp MENOR exp .)
    BRIGHT          reduce using rule 80 (exp -> exp MENOR exp .)
    ASK             reduce using rule 80 (exp -> exp MENOR exp .)
    PCOMA           reduce using rule 80 (exp -> exp MENOR exp .)
    DERPAR          reduce using rule 80 (exp -> exp MENOR exp .)
    DERLLAVE        reduce using rule 80 (exp -> exp MENOR exp .)
    DERCOR          reduce using rule 80 (exp -> exp MENOR exp .)
    COMA            reduce using rule 80 (exp -> exp MENOR exp .)
    DP              reduce using rule 80 (exp -> exp MENOR exp .)
    SUMA            shift and go to state 75
    RESTA           shift and go to state 76
    MULTI           shift and go to state 77
    DIV             shift and go to state 78
    PORCENTAJE      shift and go to state 79

  ! SUMA            [ reduce using rule 80 (exp -> exp MENOR exp .) ]
  ! RESTA           [ reduce using rule 80 (exp -> exp MENOR exp .) ]
  ! MULTI           [ reduce using rule 80 (exp -> exp MENOR exp .) ]
  ! DIV             [ reduce using rule 80 (exp -> exp MENOR exp .) ]
  ! PORCENTAJE      [ reduce using rule 80 (exp -> exp MENOR exp .) ]
  ! DIGUAL          [ shift and go to state 80 ]
  ! DESIGUAL        [ shift and go to state 81 ]
  ! MAYOR           [ shift and go to state 82 ]
  ! MENOR           [ shift and go to state 83 ]
  ! MAYORIGUAL      [ shift and go to state 84 ]
  ! MENORIGUAL      [ shift and go to state 85 ]
  ! AND             [ shift and go to state 86 ]
  ! OR              [ shift and go to state 87 ]
  ! BAND            [ shift and go to state 88 ]
  ! BOR             [ shift and go to state 89 ]
  ! BXOR            [ shift and go to state 90 ]
  ! BLEFT           [ shift and go to state 91 ]
  ! BRIGHT          [ shift and go to state 92 ]
  ! ASK             [ shift and go to state 93 ]


state 134

    (81) exp -> exp MAYORIGUAL exp .
    (72) exp -> exp . SUMA exp
    (73) exp -> exp . RESTA exp
    (74) exp -> exp . MULTI exp
    (75) exp -> exp . DIV exp
    (76) exp -> exp . PORCENTAJE exp
    (77) exp -> exp . DIGUAL exp
    (78) exp -> exp . DESIGUAL exp
    (79) exp -> exp . MAYOR exp
    (80) exp -> exp . MENOR exp
    (81) exp -> exp . MAYORIGUAL exp
    (82) exp -> exp . MENORIGUAL exp
    (83) exp -> exp . AND exp
    (84) exp -> exp . OR exp
    (85) exp -> exp . BAND exp
    (86) exp -> exp . BOR exp
    (87) exp -> exp . BXOR exp
    (88) exp -> exp . BLEFT exp
    (89) exp -> exp . BRIGHT exp
    (96) exp -> exp . ASK exp DP exp

    DIGUAL          reduce using rule 81 (exp -> exp MAYORIGUAL exp .)
    DESIGUAL        reduce using rule 81 (exp -> exp MAYORIGUAL exp .)
    MAYOR           reduce using rule 81 (exp -> exp MAYORIGUAL exp .)
    MENOR           reduce using rule 81 (exp -> exp MAYORIGUAL exp .)
    MAYORIGUAL      reduce using rule 81 (exp -> exp MAYORIGUAL exp .)
    MENORIGUAL      reduce using rule 81 (exp -> exp MAYORIGUAL exp .)
    AND             reduce using rule 81 (exp -> exp MAYORIGUAL exp .)
    OR              reduce using rule 81 (exp -> exp MAYORIGUAL exp .)
    BAND            reduce using rule 81 (exp -> exp MAYORIGUAL exp .)
    BOR             reduce using rule 81 (exp -> exp MAYORIGUAL exp .)
    BXOR            reduce using rule 81 (exp -> exp MAYORIGUAL exp .)
    BLEFT           reduce using rule 81 (exp -> exp MAYORIGUAL exp .)
    BRIGHT          reduce using rule 81 (exp -> exp MAYORIGUAL exp .)
    ASK             reduce using rule 81 (exp -> exp MAYORIGUAL exp .)
    PCOMA           reduce using rule 81 (exp -> exp MAYORIGUAL exp .)
    DERPAR          reduce using rule 81 (exp -> exp MAYORIGUAL exp .)
    DERLLAVE        reduce using rule 81 (exp -> exp MAYORIGUAL exp .)
    DERCOR          reduce using rule 81 (exp -> exp MAYORIGUAL exp .)
    COMA            reduce using rule 81 (exp -> exp MAYORIGUAL exp .)
    DP              reduce using rule 81 (exp -> exp MAYORIGUAL exp .)
    SUMA            shift and go to state 75
    RESTA           shift and go to state 76
    MULTI           shift and go to state 77
    DIV             shift and go to state 78
    PORCENTAJE      shift and go to state 79

  ! SUMA            [ reduce using rule 81 (exp -> exp MAYORIGUAL exp .) ]
  ! RESTA           [ reduce using rule 81 (exp -> exp MAYORIGUAL exp .) ]
  ! MULTI           [ reduce using rule 81 (exp -> exp MAYORIGUAL exp .) ]
  ! DIV             [ reduce using rule 81 (exp -> exp MAYORIGUAL exp .) ]
  ! PORCENTAJE      [ reduce using rule 81 (exp -> exp MAYORIGUAL exp .) ]
  ! DIGUAL          [ shift and go to state 80 ]
  ! DESIGUAL        [ shift and go to state 81 ]
  ! MAYOR           [ shift and go to state 82 ]
  ! MENOR           [ shift and go to state 83 ]
  ! MAYORIGUAL      [ shift and go to state 84 ]
  ! MENORIGUAL      [ shift and go to state 85 ]
  ! AND             [ shift and go to state 86 ]
  ! OR              [ shift and go to state 87 ]
  ! BAND            [ shift and go to state 88 ]
  ! BOR             [ shift and go to state 89 ]
  ! BXOR            [ shift and go to state 90 ]
  ! BLEFT           [ shift and go to state 91 ]
  ! BRIGHT          [ shift and go to state 92 ]
  ! ASK             [ shift and go to state 93 ]


state 135

    (82) exp -> exp MENORIGUAL exp .
    (72) exp -> exp . SUMA exp
    (73) exp -> exp . RESTA exp
    (74) exp -> exp . MULTI exp
    (75) exp -> exp . DIV exp
    (76) exp -> exp . PORCENTAJE exp
    (77) exp -> exp . DIGUAL exp
    (78) exp -> exp . DESIGUAL exp
    (79) exp -> exp . MAYOR exp
    (80) exp -> exp . MENOR exp
    (81) exp -> exp . MAYORIGUAL exp
    (82) exp -> exp . MENORIGUAL exp
    (83) exp -> exp . AND exp
    (84) exp -> exp . OR exp
    (85) exp -> exp . BAND exp
    (86) exp -> exp . BOR exp
    (87) exp -> exp . BXOR exp
    (88) exp -> exp . BLEFT exp
    (89) exp -> exp . BRIGHT exp
    (96) exp -> exp . ASK exp DP exp

    DIGUAL          reduce using rule 82 (exp -> exp MENORIGUAL exp .)
    DESIGUAL        reduce using rule 82 (exp -> exp MENORIGUAL exp .)
    MAYOR           reduce using rule 82 (exp -> exp MENORIGUAL exp .)
    MENOR           reduce using rule 82 (exp -> exp MENORIGUAL exp .)
    MAYORIGUAL      reduce using rule 82 (exp -> exp MENORIGUAL exp .)
    MENORIGUAL      reduce using rule 82 (exp -> exp MENORIGUAL exp .)
    AND             reduce using rule 82 (exp -> exp MENORIGUAL exp .)
    OR              reduce using rule 82 (exp -> exp MENORIGUAL exp .)
    BAND            reduce using rule 82 (exp -> exp MENORIGUAL exp .)
    BOR             reduce using rule 82 (exp -> exp MENORIGUAL exp .)
    BXOR            reduce using rule 82 (exp -> exp MENORIGUAL exp .)
    BLEFT           reduce using rule 82 (exp -> exp MENORIGUAL exp .)
    BRIGHT          reduce using rule 82 (exp -> exp MENORIGUAL exp .)
    ASK             reduce using rule 82 (exp -> exp MENORIGUAL exp .)
    PCOMA           reduce using rule 82 (exp -> exp MENORIGUAL exp .)
    DERPAR          reduce using rule 82 (exp -> exp MENORIGUAL exp .)
    DERLLAVE        reduce using rule 82 (exp -> exp MENORIGUAL exp .)
    DERCOR          reduce using rule 82 (exp -> exp MENORIGUAL exp .)
    COMA            reduce using rule 82 (exp -> exp MENORIGUAL exp .)
    DP              reduce using rule 82 (exp -> exp MENORIGUAL exp .)
    SUMA            shift and go to state 75
    RESTA           shift and go to state 76
    MULTI           shift and go to state 77
    DIV             shift and go to state 78
    PORCENTAJE      shift and go to state 79

  ! SUMA            [ reduce using rule 82 (exp -> exp MENORIGUAL exp .) ]
  ! RESTA           [ reduce using rule 82 (exp -> exp MENORIGUAL exp .) ]
  ! MULTI           [ reduce using rule 82 (exp -> exp MENORIGUAL exp .) ]
  ! DIV             [ reduce using rule 82 (exp -> exp MENORIGUAL exp .) ]
  ! PORCENTAJE      [ reduce using rule 82 (exp -> exp MENORIGUAL exp .) ]
  ! DIGUAL          [ shift and go to state 80 ]
  ! DESIGUAL        [ shift and go to state 81 ]
  ! MAYOR           [ shift and go to state 82 ]
  ! MENOR           [ shift and go to state 83 ]
  ! MAYORIGUAL      [ shift and go to state 84 ]
  ! MENORIGUAL      [ shift and go to state 85 ]
  ! AND             [ shift and go to state 86 ]
  ! OR              [ shift and go to state 87 ]
  ! BAND            [ shift and go to state 88 ]
  ! BOR             [ shift and go to state 89 ]
  ! BXOR            [ shift and go to state 90 ]
  ! BLEFT           [ shift and go to state 91 ]
  ! BRIGHT          [ shift and go to state 92 ]
  ! ASK             [ shift and go to state 93 ]


state 136

    (83) exp -> exp AND exp .
    (72) exp -> exp . SUMA exp
    (73) exp -> exp . RESTA exp
    (74) exp -> exp . MULTI exp
    (75) exp -> exp . DIV exp
    (76) exp -> exp . PORCENTAJE exp
    (77) exp -> exp . DIGUAL exp
    (78) exp -> exp . DESIGUAL exp
    (79) exp -> exp . MAYOR exp
    (80) exp -> exp . MENOR exp
    (81) exp -> exp . MAYORIGUAL exp
    (82) exp -> exp . MENORIGUAL exp
    (83) exp -> exp . AND exp
    (84) exp -> exp . OR exp
    (85) exp -> exp . BAND exp
    (86) exp -> exp . BOR exp
    (87) exp -> exp . BXOR exp
    (88) exp -> exp . BLEFT exp
    (89) exp -> exp . BRIGHT exp
    (96) exp -> exp . ASK exp DP exp

    AND             reduce using rule 83 (exp -> exp AND exp .)
    OR              reduce using rule 83 (exp -> exp AND exp .)
    BAND            reduce using rule 83 (exp -> exp AND exp .)
    BOR             reduce using rule 83 (exp -> exp AND exp .)
    BXOR            reduce using rule 83 (exp -> exp AND exp .)
    BLEFT           reduce using rule 83 (exp -> exp AND exp .)
    BRIGHT          reduce using rule 83 (exp -> exp AND exp .)
    ASK             reduce using rule 83 (exp -> exp AND exp .)
    PCOMA           reduce using rule 83 (exp -> exp AND exp .)
    DERPAR          reduce using rule 83 (exp -> exp AND exp .)
    DERLLAVE        reduce using rule 83 (exp -> exp AND exp .)
    DERCOR          reduce using rule 83 (exp -> exp AND exp .)
    COMA            reduce using rule 83 (exp -> exp AND exp .)
    DP              reduce using rule 83 (exp -> exp AND exp .)
    SUMA            shift and go to state 75
    RESTA           shift and go to state 76
    MULTI           shift and go to state 77
    DIV             shift and go to state 78
    PORCENTAJE      shift and go to state 79
    DIGUAL          shift and go to state 80
    DESIGUAL        shift and go to state 81
    MAYOR           shift and go to state 82
    MENOR           shift and go to state 83
    MAYORIGUAL      shift and go to state 84
    MENORIGUAL      shift and go to state 85

  ! SUMA            [ reduce using rule 83 (exp -> exp AND exp .) ]
  ! RESTA           [ reduce using rule 83 (exp -> exp AND exp .) ]
  ! MULTI           [ reduce using rule 83 (exp -> exp AND exp .) ]
  ! DIV             [ reduce using rule 83 (exp -> exp AND exp .) ]
  ! PORCENTAJE      [ reduce using rule 83 (exp -> exp AND exp .) ]
  ! DIGUAL          [ reduce using rule 83 (exp -> exp AND exp .) ]
  ! DESIGUAL        [ reduce using rule 83 (exp -> exp AND exp .) ]
  ! MAYOR           [ reduce using rule 83 (exp -> exp AND exp .) ]
  ! MENOR           [ reduce using rule 83 (exp -> exp AND exp .) ]
  ! MAYORIGUAL      [ reduce using rule 83 (exp -> exp AND exp .) ]
  ! MENORIGUAL      [ reduce using rule 83 (exp -> exp AND exp .) ]
  ! AND             [ shift and go to state 86 ]
  ! OR              [ shift and go to state 87 ]
  ! BAND            [ shift and go to state 88 ]
  ! BOR             [ shift and go to state 89 ]
  ! BXOR            [ shift and go to state 90 ]
  ! BLEFT           [ shift and go to state 91 ]
  ! BRIGHT          [ shift and go to state 92 ]
  ! ASK             [ shift and go to state 93 ]


state 137

    (84) exp -> exp OR exp .
    (72) exp -> exp . SUMA exp
    (73) exp -> exp . RESTA exp
    (74) exp -> exp . MULTI exp
    (75) exp -> exp . DIV exp
    (76) exp -> exp . PORCENTAJE exp
    (77) exp -> exp . DIGUAL exp
    (78) exp -> exp . DESIGUAL exp
    (79) exp -> exp . MAYOR exp
    (80) exp -> exp . MENOR exp
    (81) exp -> exp . MAYORIGUAL exp
    (82) exp -> exp . MENORIGUAL exp
    (83) exp -> exp . AND exp
    (84) exp -> exp . OR exp
    (85) exp -> exp . BAND exp
    (86) exp -> exp . BOR exp
    (87) exp -> exp . BXOR exp
    (88) exp -> exp . BLEFT exp
    (89) exp -> exp . BRIGHT exp
    (96) exp -> exp . ASK exp DP exp

    OR              reduce using rule 84 (exp -> exp OR exp .)
    BOR             reduce using rule 84 (exp -> exp OR exp .)
    BXOR            reduce using rule 84 (exp -> exp OR exp .)
    BLEFT           reduce using rule 84 (exp -> exp OR exp .)
    BRIGHT          reduce using rule 84 (exp -> exp OR exp .)
    ASK             reduce using rule 84 (exp -> exp OR exp .)
    PCOMA           reduce using rule 84 (exp -> exp OR exp .)
    DERPAR          reduce using rule 84 (exp -> exp OR exp .)
    DERLLAVE        reduce using rule 84 (exp -> exp OR exp .)
    DERCOR          reduce using rule 84 (exp -> exp OR exp .)
    COMA            reduce using rule 84 (exp -> exp OR exp .)
    DP              reduce using rule 84 (exp -> exp OR exp .)
    SUMA            shift and go to state 75
    RESTA           shift and go to state 76
    MULTI           shift and go to state 77
    DIV             shift and go to state 78
    PORCENTAJE      shift and go to state 79
    DIGUAL          shift and go to state 80
    DESIGUAL        shift and go to state 81
    MAYOR           shift and go to state 82
    MENOR           shift and go to state 83
    MAYORIGUAL      shift and go to state 84
    MENORIGUAL      shift and go to state 85
    AND             shift and go to state 86
    BAND            shift and go to state 88

  ! SUMA            [ reduce using rule 84 (exp -> exp OR exp .) ]
  ! RESTA           [ reduce using rule 84 (exp -> exp OR exp .) ]
  ! MULTI           [ reduce using rule 84 (exp -> exp OR exp .) ]
  ! DIV             [ reduce using rule 84 (exp -> exp OR exp .) ]
  ! PORCENTAJE      [ reduce using rule 84 (exp -> exp OR exp .) ]
  ! DIGUAL          [ reduce using rule 84 (exp -> exp OR exp .) ]
  ! DESIGUAL        [ reduce using rule 84 (exp -> exp OR exp .) ]
  ! MAYOR           [ reduce using rule 84 (exp -> exp OR exp .) ]
  ! MENOR           [ reduce using rule 84 (exp -> exp OR exp .) ]
  ! MAYORIGUAL      [ reduce using rule 84 (exp -> exp OR exp .) ]
  ! MENORIGUAL      [ reduce using rule 84 (exp -> exp OR exp .) ]
  ! AND             [ reduce using rule 84 (exp -> exp OR exp .) ]
  ! BAND            [ reduce using rule 84 (exp -> exp OR exp .) ]
  ! OR              [ shift and go to state 87 ]
  ! BOR             [ shift and go to state 89 ]
  ! BXOR            [ shift and go to state 90 ]
  ! BLEFT           [ shift and go to state 91 ]
  ! BRIGHT          [ shift and go to state 92 ]
  ! ASK             [ shift and go to state 93 ]


state 138

    (85) exp -> exp BAND exp .
    (72) exp -> exp . SUMA exp
    (73) exp -> exp . RESTA exp
    (74) exp -> exp . MULTI exp
    (75) exp -> exp . DIV exp
    (76) exp -> exp . PORCENTAJE exp
    (77) exp -> exp . DIGUAL exp
    (78) exp -> exp . DESIGUAL exp
    (79) exp -> exp . MAYOR exp
    (80) exp -> exp . MENOR exp
    (81) exp -> exp . MAYORIGUAL exp
    (82) exp -> exp . MENORIGUAL exp
    (83) exp -> exp . AND exp
    (84) exp -> exp . OR exp
    (85) exp -> exp . BAND exp
    (86) exp -> exp . BOR exp
    (87) exp -> exp . BXOR exp
    (88) exp -> exp . BLEFT exp
    (89) exp -> exp . BRIGHT exp
    (96) exp -> exp . ASK exp DP exp

    AND             reduce using rule 85 (exp -> exp BAND exp .)
    OR              reduce using rule 85 (exp -> exp BAND exp .)
    BAND            reduce using rule 85 (exp -> exp BAND exp .)
    BOR             reduce using rule 85 (exp -> exp BAND exp .)
    BXOR            reduce using rule 85 (exp -> exp BAND exp .)
    BLEFT           reduce using rule 85 (exp -> exp BAND exp .)
    BRIGHT          reduce using rule 85 (exp -> exp BAND exp .)
    ASK             reduce using rule 85 (exp -> exp BAND exp .)
    PCOMA           reduce using rule 85 (exp -> exp BAND exp .)
    DERPAR          reduce using rule 85 (exp -> exp BAND exp .)
    DERLLAVE        reduce using rule 85 (exp -> exp BAND exp .)
    DERCOR          reduce using rule 85 (exp -> exp BAND exp .)
    COMA            reduce using rule 85 (exp -> exp BAND exp .)
    DP              reduce using rule 85 (exp -> exp BAND exp .)
    SUMA            shift and go to state 75
    RESTA           shift and go to state 76
    MULTI           shift and go to state 77
    DIV             shift and go to state 78
    PORCENTAJE      shift and go to state 79
    DIGUAL          shift and go to state 80
    DESIGUAL        shift and go to state 81
    MAYOR           shift and go to state 82
    MENOR           shift and go to state 83
    MAYORIGUAL      shift and go to state 84
    MENORIGUAL      shift and go to state 85

  ! SUMA            [ reduce using rule 85 (exp -> exp BAND exp .) ]
  ! RESTA           [ reduce using rule 85 (exp -> exp BAND exp .) ]
  ! MULTI           [ reduce using rule 85 (exp -> exp BAND exp .) ]
  ! DIV             [ reduce using rule 85 (exp -> exp BAND exp .) ]
  ! PORCENTAJE      [ reduce using rule 85 (exp -> exp BAND exp .) ]
  ! DIGUAL          [ reduce using rule 85 (exp -> exp BAND exp .) ]
  ! DESIGUAL        [ reduce using rule 85 (exp -> exp BAND exp .) ]
  ! MAYOR           [ reduce using rule 85 (exp -> exp BAND exp .) ]
  ! MENOR           [ reduce using rule 85 (exp -> exp BAND exp .) ]
  ! MAYORIGUAL      [ reduce using rule 85 (exp -> exp BAND exp .) ]
  ! MENORIGUAL      [ reduce using rule 85 (exp -> exp BAND exp .) ]
  ! AND             [ shift and go to state 86 ]
  ! OR              [ shift and go to state 87 ]
  ! BAND            [ shift and go to state 88 ]
  ! BOR             [ shift and go to state 89 ]
  ! BXOR            [ shift and go to state 90 ]
  ! BLEFT           [ shift and go to state 91 ]
  ! BRIGHT          [ shift and go to state 92 ]
  ! ASK             [ shift and go to state 93 ]


state 139

    (86) exp -> exp BOR exp .
    (72) exp -> exp . SUMA exp
    (73) exp -> exp . RESTA exp
    (74) exp -> exp . MULTI exp
    (75) exp -> exp . DIV exp
    (76) exp -> exp . PORCENTAJE exp
    (77) exp -> exp . DIGUAL exp
    (78) exp -> exp . DESIGUAL exp
    (79) exp -> exp . MAYOR exp
    (80) exp -> exp . MENOR exp
    (81) exp -> exp . MAYORIGUAL exp
    (82) exp -> exp . MENORIGUAL exp
    (83) exp -> exp . AND exp
    (84) exp -> exp . OR exp
    (85) exp -> exp . BAND exp
    (86) exp -> exp . BOR exp
    (87) exp -> exp . BXOR exp
    (88) exp -> exp . BLEFT exp
    (89) exp -> exp . BRIGHT exp
    (96) exp -> exp . ASK exp DP exp

    OR              reduce using rule 86 (exp -> exp BOR exp .)
    BOR             reduce using rule 86 (exp -> exp BOR exp .)
    BXOR            reduce using rule 86 (exp -> exp BOR exp .)
    BLEFT           reduce using rule 86 (exp -> exp BOR exp .)
    BRIGHT          reduce using rule 86 (exp -> exp BOR exp .)
    ASK             reduce using rule 86 (exp -> exp BOR exp .)
    PCOMA           reduce using rule 86 (exp -> exp BOR exp .)
    DERPAR          reduce using rule 86 (exp -> exp BOR exp .)
    DERLLAVE        reduce using rule 86 (exp -> exp BOR exp .)
    DERCOR          reduce using rule 86 (exp -> exp BOR exp .)
    COMA            reduce using rule 86 (exp -> exp BOR exp .)
    DP              reduce using rule 86 (exp -> exp BOR exp .)
    SUMA            shift and go to state 75
    RESTA           shift and go to state 76
    MULTI           shift and go to state 77
    DIV             shift and go to state 78
    PORCENTAJE      shift and go to state 79
    DIGUAL          shift and go to state 80
    DESIGUAL        shift and go to state 81
    MAYOR           shift and go to state 82
    MENOR           shift and go to state 83
    MAYORIGUAL      shift and go to state 84
    MENORIGUAL      shift and go to state 85
    AND             shift and go to state 86
    BAND            shift and go to state 88

  ! SUMA            [ reduce using rule 86 (exp -> exp BOR exp .) ]
  ! RESTA           [ reduce using rule 86 (exp -> exp BOR exp .) ]
  ! MULTI           [ reduce using rule 86 (exp -> exp BOR exp .) ]
  ! DIV             [ reduce using rule 86 (exp -> exp BOR exp .) ]
  ! PORCENTAJE      [ reduce using rule 86 (exp -> exp BOR exp .) ]
  ! DIGUAL          [ reduce using rule 86 (exp -> exp BOR exp .) ]
  ! DESIGUAL        [ reduce using rule 86 (exp -> exp BOR exp .) ]
  ! MAYOR           [ reduce using rule 86 (exp -> exp BOR exp .) ]
  ! MENOR           [ reduce using rule 86 (exp -> exp BOR exp .) ]
  ! MAYORIGUAL      [ reduce using rule 86 (exp -> exp BOR exp .) ]
  ! MENORIGUAL      [ reduce using rule 86 (exp -> exp BOR exp .) ]
  ! AND             [ reduce using rule 86 (exp -> exp BOR exp .) ]
  ! BAND            [ reduce using rule 86 (exp -> exp BOR exp .) ]
  ! OR              [ shift and go to state 87 ]
  ! BOR             [ shift and go to state 89 ]
  ! BXOR            [ shift and go to state 90 ]
  ! BLEFT           [ shift and go to state 91 ]
  ! BRIGHT          [ shift and go to state 92 ]
  ! ASK             [ shift and go to state 93 ]


state 140

    (87) exp -> exp BXOR exp .
    (72) exp -> exp . SUMA exp
    (73) exp -> exp . RESTA exp
    (74) exp -> exp . MULTI exp
    (75) exp -> exp . DIV exp
    (76) exp -> exp . PORCENTAJE exp
    (77) exp -> exp . DIGUAL exp
    (78) exp -> exp . DESIGUAL exp
    (79) exp -> exp . MAYOR exp
    (80) exp -> exp . MENOR exp
    (81) exp -> exp . MAYORIGUAL exp
    (82) exp -> exp . MENORIGUAL exp
    (83) exp -> exp . AND exp
    (84) exp -> exp . OR exp
    (85) exp -> exp . BAND exp
    (86) exp -> exp . BOR exp
    (87) exp -> exp . BXOR exp
    (88) exp -> exp . BLEFT exp
    (89) exp -> exp . BRIGHT exp
    (96) exp -> exp . ASK exp DP exp

    BXOR            reduce using rule 87 (exp -> exp BXOR exp .)
    BLEFT           reduce using rule 87 (exp -> exp BXOR exp .)
    BRIGHT          reduce using rule 87 (exp -> exp BXOR exp .)
    ASK             reduce using rule 87 (exp -> exp BXOR exp .)
    PCOMA           reduce using rule 87 (exp -> exp BXOR exp .)
    DERPAR          reduce using rule 87 (exp -> exp BXOR exp .)
    DERLLAVE        reduce using rule 87 (exp -> exp BXOR exp .)
    DERCOR          reduce using rule 87 (exp -> exp BXOR exp .)
    COMA            reduce using rule 87 (exp -> exp BXOR exp .)
    DP              reduce using rule 87 (exp -> exp BXOR exp .)
    SUMA            shift and go to state 75
    RESTA           shift and go to state 76
    MULTI           shift and go to state 77
    DIV             shift and go to state 78
    PORCENTAJE      shift and go to state 79
    DIGUAL          shift and go to state 80
    DESIGUAL        shift and go to state 81
    MAYOR           shift and go to state 82
    MENOR           shift and go to state 83
    MAYORIGUAL      shift and go to state 84
    MENORIGUAL      shift and go to state 85
    AND             shift and go to state 86
    OR              shift and go to state 87
    BAND            shift and go to state 88
    BOR             shift and go to state 89

  ! SUMA            [ reduce using rule 87 (exp -> exp BXOR exp .) ]
  ! RESTA           [ reduce using rule 87 (exp -> exp BXOR exp .) ]
  ! MULTI           [ reduce using rule 87 (exp -> exp BXOR exp .) ]
  ! DIV             [ reduce using rule 87 (exp -> exp BXOR exp .) ]
  ! PORCENTAJE      [ reduce using rule 87 (exp -> exp BXOR exp .) ]
  ! DIGUAL          [ reduce using rule 87 (exp -> exp BXOR exp .) ]
  ! DESIGUAL        [ reduce using rule 87 (exp -> exp BXOR exp .) ]
  ! MAYOR           [ reduce using rule 87 (exp -> exp BXOR exp .) ]
  ! MENOR           [ reduce using rule 87 (exp -> exp BXOR exp .) ]
  ! MAYORIGUAL      [ reduce using rule 87 (exp -> exp BXOR exp .) ]
  ! MENORIGUAL      [ reduce using rule 87 (exp -> exp BXOR exp .) ]
  ! AND             [ reduce using rule 87 (exp -> exp BXOR exp .) ]
  ! OR              [ reduce using rule 87 (exp -> exp BXOR exp .) ]
  ! BAND            [ reduce using rule 87 (exp -> exp BXOR exp .) ]
  ! BOR             [ reduce using rule 87 (exp -> exp BXOR exp .) ]
  ! BXOR            [ shift and go to state 90 ]
  ! BLEFT           [ shift and go to state 91 ]
  ! BRIGHT          [ shift and go to state 92 ]
  ! ASK             [ shift and go to state 93 ]


state 141

    (88) exp -> exp BLEFT exp .
    (72) exp -> exp . SUMA exp
    (73) exp -> exp . RESTA exp
    (74) exp -> exp . MULTI exp
    (75) exp -> exp . DIV exp
    (76) exp -> exp . PORCENTAJE exp
    (77) exp -> exp . DIGUAL exp
    (78) exp -> exp . DESIGUAL exp
    (79) exp -> exp . MAYOR exp
    (80) exp -> exp . MENOR exp
    (81) exp -> exp . MAYORIGUAL exp
    (82) exp -> exp . MENORIGUAL exp
    (83) exp -> exp . AND exp
    (84) exp -> exp . OR exp
    (85) exp -> exp . BAND exp
    (86) exp -> exp . BOR exp
    (87) exp -> exp . BXOR exp
    (88) exp -> exp . BLEFT exp
    (89) exp -> exp . BRIGHT exp
    (96) exp -> exp . ASK exp DP exp

    BLEFT           reduce using rule 88 (exp -> exp BLEFT exp .)
    BRIGHT          reduce using rule 88 (exp -> exp BLEFT exp .)
    ASK             reduce using rule 88 (exp -> exp BLEFT exp .)
    PCOMA           reduce using rule 88 (exp -> exp BLEFT exp .)
    DERPAR          reduce using rule 88 (exp -> exp BLEFT exp .)
    DERLLAVE        reduce using rule 88 (exp -> exp BLEFT exp .)
    DERCOR          reduce using rule 88 (exp -> exp BLEFT exp .)
    COMA            reduce using rule 88 (exp -> exp BLEFT exp .)
    DP              reduce using rule 88 (exp -> exp BLEFT exp .)
    SUMA            shift and go to state 75
    RESTA           shift and go to state 76
    MULTI           shift and go to state 77
    DIV             shift and go to state 78
    PORCENTAJE      shift and go to state 79
    DIGUAL          shift and go to state 80
    DESIGUAL        shift and go to state 81
    MAYOR           shift and go to state 82
    MENOR           shift and go to state 83
    MAYORIGUAL      shift and go to state 84
    MENORIGUAL      shift and go to state 85
    AND             shift and go to state 86
    OR              shift and go to state 87
    BAND            shift and go to state 88
    BOR             shift and go to state 89
    BXOR            shift and go to state 90

  ! SUMA            [ reduce using rule 88 (exp -> exp BLEFT exp .) ]
  ! RESTA           [ reduce using rule 88 (exp -> exp BLEFT exp .) ]
  ! MULTI           [ reduce using rule 88 (exp -> exp BLEFT exp .) ]
  ! DIV             [ reduce using rule 88 (exp -> exp BLEFT exp .) ]
  ! PORCENTAJE      [ reduce using rule 88 (exp -> exp BLEFT exp .) ]
  ! DIGUAL          [ reduce using rule 88 (exp -> exp BLEFT exp .) ]
  ! DESIGUAL        [ reduce using rule 88 (exp -> exp BLEFT exp .) ]
  ! MAYOR           [ reduce using rule 88 (exp -> exp BLEFT exp .) ]
  ! MENOR           [ reduce using rule 88 (exp -> exp BLEFT exp .) ]
  ! MAYORIGUAL      [ reduce using rule 88 (exp -> exp BLEFT exp .) ]
  ! MENORIGUAL      [ reduce using rule 88 (exp -> exp BLEFT exp .) ]
  ! AND             [ reduce using rule 88 (exp -> exp BLEFT exp .) ]
  ! OR              [ reduce using rule 88 (exp -> exp BLEFT exp .) ]
  ! BAND            [ reduce using rule 88 (exp -> exp BLEFT exp .) ]
  ! BOR             [ reduce using rule 88 (exp -> exp BLEFT exp .) ]
  ! BXOR            [ reduce using rule 88 (exp -> exp BLEFT exp .) ]
  ! BLEFT           [ shift and go to state 91 ]
  ! BRIGHT          [ shift and go to state 92 ]
  ! ASK             [ shift and go to state 93 ]


state 142

    (89) exp -> exp BRIGHT exp .
    (72) exp -> exp . SUMA exp
    (73) exp -> exp . RESTA exp
    (74) exp -> exp . MULTI exp
    (75) exp -> exp . DIV exp
    (76) exp -> exp . PORCENTAJE exp
    (77) exp -> exp . DIGUAL exp
    (78) exp -> exp . DESIGUAL exp
    (79) exp -> exp . MAYOR exp
    (80) exp -> exp . MENOR exp
    (81) exp -> exp . MAYORIGUAL exp
    (82) exp -> exp . MENORIGUAL exp
    (83) exp -> exp . AND exp
    (84) exp -> exp . OR exp
    (85) exp -> exp . BAND exp
    (86) exp -> exp . BOR exp
    (87) exp -> exp . BXOR exp
    (88) exp -> exp . BLEFT exp
    (89) exp -> exp . BRIGHT exp
    (96) exp -> exp . ASK exp DP exp

    BLEFT           reduce using rule 89 (exp -> exp BRIGHT exp .)
    BRIGHT          reduce using rule 89 (exp -> exp BRIGHT exp .)
    ASK             reduce using rule 89 (exp -> exp BRIGHT exp .)
    PCOMA           reduce using rule 89 (exp -> exp BRIGHT exp .)
    DERPAR          reduce using rule 89 (exp -> exp BRIGHT exp .)
    DERLLAVE        reduce using rule 89 (exp -> exp BRIGHT exp .)
    DERCOR          reduce using rule 89 (exp -> exp BRIGHT exp .)
    COMA            reduce using rule 89 (exp -> exp BRIGHT exp .)
    DP              reduce using rule 89 (exp -> exp BRIGHT exp .)
    SUMA            shift and go to state 75
    RESTA           shift and go to state 76
    MULTI           shift and go to state 77
    DIV             shift and go to state 78
    PORCENTAJE      shift and go to state 79
    DIGUAL          shift and go to state 80
    DESIGUAL        shift and go to state 81
    MAYOR           shift and go to state 82
    MENOR           shift and go to state 83
    MAYORIGUAL      shift and go to state 84
    MENORIGUAL      shift and go to state 85
    AND             shift and go to state 86
    OR              shift and go to state 87
    BAND            shift and go to state 88
    BOR             shift and go to state 89
    BXOR            shift and go to state 90

  ! SUMA            [ reduce using rule 89 (exp -> exp BRIGHT exp .) ]
  ! RESTA           [ reduce using rule 89 (exp -> exp BRIGHT exp .) ]
  ! MULTI           [ reduce using rule 89 (exp -> exp BRIGHT exp .) ]
  ! DIV             [ reduce using rule 89 (exp -> exp BRIGHT exp .) ]
  ! PORCENTAJE      [ reduce using rule 89 (exp -> exp BRIGHT exp .) ]
  ! DIGUAL          [ reduce using rule 89 (exp -> exp BRIGHT exp .) ]
  ! DESIGUAL        [ reduce using rule 89 (exp -> exp BRIGHT exp .) ]
  ! MAYOR           [ reduce using rule 89 (exp -> exp BRIGHT exp .) ]
  ! MENOR           [ reduce using rule 89 (exp -> exp BRIGHT exp .) ]
  ! MAYORIGUAL      [ reduce using rule 89 (exp -> exp BRIGHT exp .) ]
  ! MENORIGUAL      [ reduce using rule 89 (exp -> exp BRIGHT exp .) ]
  ! AND             [ reduce using rule 89 (exp -> exp BRIGHT exp .) ]
  ! OR              [ reduce using rule 89 (exp -> exp BRIGHT exp .) ]
  ! BAND            [ reduce using rule 89 (exp -> exp BRIGHT exp .) ]
  ! BOR             [ reduce using rule 89 (exp -> exp BRIGHT exp .) ]
  ! BXOR            [ reduce using rule 89 (exp -> exp BRIGHT exp .) ]
  ! BLEFT           [ shift and go to state 91 ]
  ! BRIGHT          [ shift and go to state 92 ]
  ! ASK             [ shift and go to state 93 ]


state 143

    (96) exp -> exp ASK exp . DP exp
    (72) exp -> exp . SUMA exp
    (73) exp -> exp . RESTA exp
    (74) exp -> exp . MULTI exp
    (75) exp -> exp . DIV exp
    (76) exp -> exp . PORCENTAJE exp
    (77) exp -> exp . DIGUAL exp
    (78) exp -> exp . DESIGUAL exp
    (79) exp -> exp . MAYOR exp
    (80) exp -> exp . MENOR exp
    (81) exp -> exp . MAYORIGUAL exp
    (82) exp -> exp . MENORIGUAL exp
    (83) exp -> exp . AND exp
    (84) exp -> exp . OR exp
    (85) exp -> exp . BAND exp
    (86) exp -> exp . BOR exp
    (87) exp -> exp . BXOR exp
    (88) exp -> exp . BLEFT exp
    (89) exp -> exp . BRIGHT exp
    (96) exp -> exp . ASK exp DP exp

    DP              shift and go to state 167
    SUMA            shift and go to state 75
    RESTA           shift and go to state 76
    MULTI           shift and go to state 77
    DIV             shift and go to state 78
    PORCENTAJE      shift and go to state 79
    DIGUAL          shift and go to state 80
    DESIGUAL        shift and go to state 81
    MAYOR           shift and go to state 82
    MENOR           shift and go to state 83
    MAYORIGUAL      shift and go to state 84
    MENORIGUAL      shift and go to state 85
    AND             shift and go to state 86
    OR              shift and go to state 87
    BAND            shift and go to state 88
    BOR             shift and go to state 89
    BXOR            shift and go to state 90
    BLEFT           shift and go to state 91
    BRIGHT          shift and go to state 92
    ASK             shift and go to state 93


state 144

    (64) exp -> scanf IZQPAR DERPAR .

    SUMA            reduce using rule 64 (exp -> scanf IZQPAR DERPAR .)
    RESTA           reduce using rule 64 (exp -> scanf IZQPAR DERPAR .)
    MULTI           reduce using rule 64 (exp -> scanf IZQPAR DERPAR .)
    DIV             reduce using rule 64 (exp -> scanf IZQPAR DERPAR .)
    PORCENTAJE      reduce using rule 64 (exp -> scanf IZQPAR DERPAR .)
    DIGUAL          reduce using rule 64 (exp -> scanf IZQPAR DERPAR .)
    DESIGUAL        reduce using rule 64 (exp -> scanf IZQPAR DERPAR .)
    MAYOR           reduce using rule 64 (exp -> scanf IZQPAR DERPAR .)
    MENOR           reduce using rule 64 (exp -> scanf IZQPAR DERPAR .)
    MAYORIGUAL      reduce using rule 64 (exp -> scanf IZQPAR DERPAR .)
    MENORIGUAL      reduce using rule 64 (exp -> scanf IZQPAR DERPAR .)
    AND             reduce using rule 64 (exp -> scanf IZQPAR DERPAR .)
    OR              reduce using rule 64 (exp -> scanf IZQPAR DERPAR .)
    BAND            reduce using rule 64 (exp -> scanf IZQPAR DERPAR .)
    BOR             reduce using rule 64 (exp -> scanf IZQPAR DERPAR .)
    BXOR            reduce using rule 64 (exp -> scanf IZQPAR DERPAR .)
    BLEFT           reduce using rule 64 (exp -> scanf IZQPAR DERPAR .)
    BRIGHT          reduce using rule 64 (exp -> scanf IZQPAR DERPAR .)
    ASK             reduce using rule 64 (exp -> scanf IZQPAR DERPAR .)
    PCOMA           reduce using rule 64 (exp -> scanf IZQPAR DERPAR .)
    DERPAR          reduce using rule 64 (exp -> scanf IZQPAR DERPAR .)
    DERLLAVE        reduce using rule 64 (exp -> scanf IZQPAR DERPAR .)
    DERCOR          reduce using rule 64 (exp -> scanf IZQPAR DERPAR .)
    COMA            reduce using rule 64 (exp -> scanf IZQPAR DERPAR .)
    DP              reduce using rule 64 (exp -> scanf IZQPAR DERPAR .)


state 145

    (94) exp -> IZQPAR exp DERPAR .

    SUMA            reduce using rule 94 (exp -> IZQPAR exp DERPAR .)
    RESTA           reduce using rule 94 (exp -> IZQPAR exp DERPAR .)
    MULTI           reduce using rule 94 (exp -> IZQPAR exp DERPAR .)
    DIV             reduce using rule 94 (exp -> IZQPAR exp DERPAR .)
    PORCENTAJE      reduce using rule 94 (exp -> IZQPAR exp DERPAR .)
    DIGUAL          reduce using rule 94 (exp -> IZQPAR exp DERPAR .)
    DESIGUAL        reduce using rule 94 (exp -> IZQPAR exp DERPAR .)
    MAYOR           reduce using rule 94 (exp -> IZQPAR exp DERPAR .)
    MENOR           reduce using rule 94 (exp -> IZQPAR exp DERPAR .)
    MAYORIGUAL      reduce using rule 94 (exp -> IZQPAR exp DERPAR .)
    MENORIGUAL      reduce using rule 94 (exp -> IZQPAR exp DERPAR .)
    AND             reduce using rule 94 (exp -> IZQPAR exp DERPAR .)
    OR              reduce using rule 94 (exp -> IZQPAR exp DERPAR .)
    BAND            reduce using rule 94 (exp -> IZQPAR exp DERPAR .)
    BOR             reduce using rule 94 (exp -> IZQPAR exp DERPAR .)
    BXOR            reduce using rule 94 (exp -> IZQPAR exp DERPAR .)
    BLEFT           reduce using rule 94 (exp -> IZQPAR exp DERPAR .)
    BRIGHT          reduce using rule 94 (exp -> IZQPAR exp DERPAR .)
    ASK             reduce using rule 94 (exp -> IZQPAR exp DERPAR .)
    PCOMA           reduce using rule 94 (exp -> IZQPAR exp DERPAR .)
    DERPAR          reduce using rule 94 (exp -> IZQPAR exp DERPAR .)
    DERLLAVE        reduce using rule 94 (exp -> IZQPAR exp DERPAR .)
    DERCOR          reduce using rule 94 (exp -> IZQPAR exp DERPAR .)
    COMA            reduce using rule 94 (exp -> IZQPAR exp DERPAR .)
    DP              reduce using rule 94 (exp -> IZQPAR exp DERPAR .)


state 146

    (95) exp -> IZQPAR TYPE DERPAR . exp
    (64) exp -> . scanf IZQPAR DERPAR
    (72) exp -> . exp SUMA exp
    (73) exp -> . exp RESTA exp
    (74) exp -> . exp MULTI exp
    (75) exp -> . exp DIV exp
    (76) exp -> . exp PORCENTAJE exp
    (77) exp -> . exp DIGUAL exp
    (78) exp -> . exp DESIGUAL exp
    (79) exp -> . exp MAYOR exp
    (80) exp -> . exp MENOR exp
    (81) exp -> . exp MAYORIGUAL exp
    (82) exp -> . exp MENORIGUAL exp
    (83) exp -> . exp AND exp
    (84) exp -> . exp OR exp
    (85) exp -> . exp BAND exp
    (86) exp -> . exp BOR exp
    (87) exp -> . exp BXOR exp
    (88) exp -> . exp BLEFT exp
    (89) exp -> . exp BRIGHT exp
    (90) exp -> . RESTA exp
    (91) exp -> . NOT exp
    (92) exp -> . BNOT exp
    (93) exp -> . sizeof exp
    (94) exp -> . IZQPAR exp DERPAR
    (95) exp -> . IZQPAR TYPE DERPAR exp
    (96) exp -> . exp ASK exp DP exp
    (97) exp -> . DOUBLE
    (98) exp -> . INTEGER
    (99) exp -> . ident
    (100) exp -> . ident lacs
    (101) exp -> . STR
    (102) exp -> . IZQCOR lex DERCOR
    (67) ident -> . ID

    scanf           shift and go to state 34
    RESTA           shift and go to state 36
    NOT             shift and go to state 37
    BNOT            shift and go to state 38
    sizeof          shift and go to state 39
    IZQPAR          shift and go to state 35
    DOUBLE          shift and go to state 40
    INTEGER         shift and go to state 41
    STR             shift and go to state 42
    IZQCOR          shift and go to state 43
    ID              shift and go to state 44

    exp                            shift and go to state 168
    ident                          shift and go to state 32

state 147

    (102) exp -> IZQCOR lex DERCOR .

    SUMA            reduce using rule 102 (exp -> IZQCOR lex DERCOR .)
    RESTA           reduce using rule 102 (exp -> IZQCOR lex DERCOR .)
    MULTI           reduce using rule 102 (exp -> IZQCOR lex DERCOR .)
    DIV             reduce using rule 102 (exp -> IZQCOR lex DERCOR .)
    PORCENTAJE      reduce using rule 102 (exp -> IZQCOR lex DERCOR .)
    DIGUAL          reduce using rule 102 (exp -> IZQCOR lex DERCOR .)
    DESIGUAL        reduce using rule 102 (exp -> IZQCOR lex DERCOR .)
    MAYOR           reduce using rule 102 (exp -> IZQCOR lex DERCOR .)
    MENOR           reduce using rule 102 (exp -> IZQCOR lex DERCOR .)
    MAYORIGUAL      reduce using rule 102 (exp -> IZQCOR lex DERCOR .)
    MENORIGUAL      reduce using rule 102 (exp -> IZQCOR lex DERCOR .)
    AND             reduce using rule 102 (exp -> IZQCOR lex DERCOR .)
    OR              reduce using rule 102 (exp -> IZQCOR lex DERCOR .)
    BAND            reduce using rule 102 (exp -> IZQCOR lex DERCOR .)
    BOR             reduce using rule 102 (exp -> IZQCOR lex DERCOR .)
    BXOR            reduce using rule 102 (exp -> IZQCOR lex DERCOR .)
    BLEFT           reduce using rule 102 (exp -> IZQCOR lex DERCOR .)
    BRIGHT          reduce using rule 102 (exp -> IZQCOR lex DERCOR .)
    ASK             reduce using rule 102 (exp -> IZQCOR lex DERCOR .)
    PCOMA           reduce using rule 102 (exp -> IZQCOR lex DERCOR .)
    DERPAR          reduce using rule 102 (exp -> IZQCOR lex DERCOR .)
    DERLLAVE        reduce using rule 102 (exp -> IZQCOR lex DERCOR .)
    DERCOR          reduce using rule 102 (exp -> IZQCOR lex DERCOR .)
    COMA            reduce using rule 102 (exp -> IZQCOR lex DERCOR .)
    DP              reduce using rule 102 (exp -> IZQCOR lex DERCOR .)


state 148

    (28) lex -> lex COMA . exp
    (64) exp -> . scanf IZQPAR DERPAR
    (72) exp -> . exp SUMA exp
    (73) exp -> . exp RESTA exp
    (74) exp -> . exp MULTI exp
    (75) exp -> . exp DIV exp
    (76) exp -> . exp PORCENTAJE exp
    (77) exp -> . exp DIGUAL exp
    (78) exp -> . exp DESIGUAL exp
    (79) exp -> . exp MAYOR exp
    (80) exp -> . exp MENOR exp
    (81) exp -> . exp MAYORIGUAL exp
    (82) exp -> . exp MENORIGUAL exp
    (83) exp -> . exp AND exp
    (84) exp -> . exp OR exp
    (85) exp -> . exp BAND exp
    (86) exp -> . exp BOR exp
    (87) exp -> . exp BXOR exp
    (88) exp -> . exp BLEFT exp
    (89) exp -> . exp BRIGHT exp
    (90) exp -> . RESTA exp
    (91) exp -> . NOT exp
    (92) exp -> . BNOT exp
    (93) exp -> . sizeof exp
    (94) exp -> . IZQPAR exp DERPAR
    (95) exp -> . IZQPAR TYPE DERPAR exp
    (96) exp -> . exp ASK exp DP exp
    (97) exp -> . DOUBLE
    (98) exp -> . INTEGER
    (99) exp -> . ident
    (100) exp -> . ident lacs
    (101) exp -> . STR
    (102) exp -> . IZQCOR lex DERCOR
    (67) ident -> . ID

    scanf           shift and go to state 34
    RESTA           shift and go to state 36
    NOT             shift and go to state 37
    BNOT            shift and go to state 38
    sizeof          shift and go to state 39
    IZQPAR          shift and go to state 35
    DOUBLE          shift and go to state 40
    INTEGER         shift and go to state 41
    STR             shift and go to state 42
    IZQCOR          shift and go to state 43
    ID              shift and go to state 44

    exp                            shift and go to state 169
    ident                          shift and go to state 32

state 149

    (32) asig -> ident lacs IGUAL . exp
    (64) exp -> . scanf IZQPAR DERPAR
    (72) exp -> . exp SUMA exp
    (73) exp -> . exp RESTA exp
    (74) exp -> . exp MULTI exp
    (75) exp -> . exp DIV exp
    (76) exp -> . exp PORCENTAJE exp
    (77) exp -> . exp DIGUAL exp
    (78) exp -> . exp DESIGUAL exp
    (79) exp -> . exp MAYOR exp
    (80) exp -> . exp MENOR exp
    (81) exp -> . exp MAYORIGUAL exp
    (82) exp -> . exp MENORIGUAL exp
    (83) exp -> . exp AND exp
    (84) exp -> . exp OR exp
    (85) exp -> . exp BAND exp
    (86) exp -> . exp BOR exp
    (87) exp -> . exp BXOR exp
    (88) exp -> . exp BLEFT exp
    (89) exp -> . exp BRIGHT exp
    (90) exp -> . RESTA exp
    (91) exp -> . NOT exp
    (92) exp -> . BNOT exp
    (93) exp -> . sizeof exp
    (94) exp -> . IZQPAR exp DERPAR
    (95) exp -> . IZQPAR TYPE DERPAR exp
    (96) exp -> . exp ASK exp DP exp
    (97) exp -> . DOUBLE
    (98) exp -> . INTEGER
    (99) exp -> . ident
    (100) exp -> . ident lacs
    (101) exp -> . STR
    (102) exp -> . IZQCOR lex DERCOR
    (67) ident -> . ID

    scanf           shift and go to state 34
    RESTA           shift and go to state 36
    NOT             shift and go to state 37
    BNOT            shift and go to state 38
    sizeof          shift and go to state 39
    IZQPAR          shift and go to state 35
    DOUBLE          shift and go to state 40
    INTEGER         shift and go to state 41
    STR             shift and go to state 42
    IZQCOR          shift and go to state 43
    ID              shift and go to state 44

    ident                          shift and go to state 32
    exp                            shift and go to state 170

state 150

    (34) asig -> ident lacs INCE .

    PCOMA           reduce using rule 34 (asig -> ident lacs INCE .)
    DERPAR          reduce using rule 34 (asig -> ident lacs INCE .)


state 151

    (36) asig -> ident lacs DECRE .

    PCOMA           reduce using rule 36 (asig -> ident lacs DECRE .)
    DERPAR          reduce using rule 36 (asig -> ident lacs DECRE .)


state 152

    (33) asig -> ident IGUAL exp .
    (72) exp -> exp . SUMA exp
    (73) exp -> exp . RESTA exp
    (74) exp -> exp . MULTI exp
    (75) exp -> exp . DIV exp
    (76) exp -> exp . PORCENTAJE exp
    (77) exp -> exp . DIGUAL exp
    (78) exp -> exp . DESIGUAL exp
    (79) exp -> exp . MAYOR exp
    (80) exp -> exp . MENOR exp
    (81) exp -> exp . MAYORIGUAL exp
    (82) exp -> exp . MENORIGUAL exp
    (83) exp -> exp . AND exp
    (84) exp -> exp . OR exp
    (85) exp -> exp . BAND exp
    (86) exp -> exp . BOR exp
    (87) exp -> exp . BXOR exp
    (88) exp -> exp . BLEFT exp
    (89) exp -> exp . BRIGHT exp
    (96) exp -> exp . ASK exp DP exp

    PCOMA           reduce using rule 33 (asig -> ident IGUAL exp .)
    DERPAR          reduce using rule 33 (asig -> ident IGUAL exp .)
    SUMA            shift and go to state 75
    RESTA           shift and go to state 76
    MULTI           shift and go to state 77
    DIV             shift and go to state 78
    PORCENTAJE      shift and go to state 79
    DIGUAL          shift and go to state 80
    DESIGUAL        shift and go to state 81
    MAYOR           shift and go to state 82
    MENOR           shift and go to state 83
    MAYORIGUAL      shift and go to state 84
    MENORIGUAL      shift and go to state 85
    AND             shift and go to state 86
    OR              shift and go to state 87
    BAND            shift and go to state 88
    BOR             shift and go to state 89
    BXOR            shift and go to state 90
    BLEFT           shift and go to state 91
    BRIGHT          shift and go to state 92
    ASK             shift and go to state 93


state 153

    (25) call -> ident IZQPAR plex . DERPAR PCOMA

    DERPAR          shift and go to state 171


state 154

    (26) plex -> lex .
    (28) lex -> lex . COMA exp

    DERPAR          reduce using rule 26 (plex -> lex .)
    COMA            shift and go to state 148


state 155

    (49) para -> for IZQPAR para1 . exp PCOMA para2 DERPAR IZQCOR linst DERCOR
    (64) exp -> . scanf IZQPAR DERPAR
    (72) exp -> . exp SUMA exp
    (73) exp -> . exp RESTA exp
    (74) exp -> . exp MULTI exp
    (75) exp -> . exp DIV exp
    (76) exp -> . exp PORCENTAJE exp
    (77) exp -> . exp DIGUAL exp
    (78) exp -> . exp DESIGUAL exp
    (79) exp -> . exp MAYOR exp
    (80) exp -> . exp MENOR exp
    (81) exp -> . exp MAYORIGUAL exp
    (82) exp -> . exp MENORIGUAL exp
    (83) exp -> . exp AND exp
    (84) exp -> . exp OR exp
    (85) exp -> . exp BAND exp
    (86) exp -> . exp BOR exp
    (87) exp -> . exp BXOR exp
    (88) exp -> . exp BLEFT exp
    (89) exp -> . exp BRIGHT exp
    (90) exp -> . RESTA exp
    (91) exp -> . NOT exp
    (92) exp -> . BNOT exp
    (93) exp -> . sizeof exp
    (94) exp -> . IZQPAR exp DERPAR
    (95) exp -> . IZQPAR TYPE DERPAR exp
    (96) exp -> . exp ASK exp DP exp
    (97) exp -> . DOUBLE
    (98) exp -> . INTEGER
    (99) exp -> . ident
    (100) exp -> . ident lacs
    (101) exp -> . STR
    (102) exp -> . IZQCOR lex DERCOR
    (67) ident -> . ID

    scanf           shift and go to state 34
    RESTA           shift and go to state 36
    NOT             shift and go to state 37
    BNOT            shift and go to state 38
    sizeof          shift and go to state 39
    IZQPAR          shift and go to state 35
    DOUBLE          shift and go to state 40
    INTEGER         shift and go to state 41
    STR             shift and go to state 42
    IZQCOR          shift and go to state 43
    ID              shift and go to state 44

    exp                            shift and go to state 172
    ident                          shift and go to state 32

state 156

    (50) para1 -> asig . PCOMA

    PCOMA           shift and go to state 173


state 157

    (51) para1 -> decla . PCOMA

    PCOMA           shift and go to state 174


state 158

    (32) asig -> ident . lacs IGUAL exp
    (33) asig -> ident . IGUAL exp
    (34) asig -> ident . lacs INCE
    (35) asig -> ident . INCE
    (36) asig -> ident . lacs DECRE
    (37) asig -> ident . DECRE
    (68) lacs -> . lacs acs
    (69) lacs -> . acs
    (70) acs -> . IZQLLAVE exp DERLLAVE
    (71) acs -> . PUNTO ID

    IGUAL           shift and go to state 110
    INCE            shift and go to state 111
    DECRE           shift and go to state 112
    IZQLLAVE        shift and go to state 23
    PUNTO           shift and go to state 24

    lacs                           shift and go to state 109
    acs                            shift and go to state 22

state 159

    (42) si -> if IZQPAR exp . DERPAR IZQCOR linst DERCOR lelsi els
    (43) si -> if IZQPAR exp . DERPAR IZQCOR linst DERCOR els
    (72) exp -> exp . SUMA exp
    (73) exp -> exp . RESTA exp
    (74) exp -> exp . MULTI exp
    (75) exp -> exp . DIV exp
    (76) exp -> exp . PORCENTAJE exp
    (77) exp -> exp . DIGUAL exp
    (78) exp -> exp . DESIGUAL exp
    (79) exp -> exp . MAYOR exp
    (80) exp -> exp . MENOR exp
    (81) exp -> exp . MAYORIGUAL exp
    (82) exp -> exp . MENORIGUAL exp
    (83) exp -> exp . AND exp
    (84) exp -> exp . OR exp
    (85) exp -> exp . BAND exp
    (86) exp -> exp . BOR exp
    (87) exp -> exp . BXOR exp
    (88) exp -> exp . BLEFT exp
    (89) exp -> exp . BRIGHT exp
    (96) exp -> exp . ASK exp DP exp

    DERPAR          shift and go to state 175
    SUMA            shift and go to state 75
    RESTA           shift and go to state 76
    MULTI           shift and go to state 77
    DIV             shift and go to state 78
    PORCENTAJE      shift and go to state 79
    DIGUAL          shift and go to state 80
    DESIGUAL        shift and go to state 81
    MAYOR           shift and go to state 82
    MENOR           shift and go to state 83
    MAYORIGUAL      shift and go to state 84
    MENORIGUAL      shift and go to state 85
    AND             shift and go to state 86
    OR              shift and go to state 87
    BAND            shift and go to state 88
    BOR             shift and go to state 89
    BXOR            shift and go to state 90
    BLEFT           shift and go to state 91
    BRIGHT          shift and go to state 92
    ASK             shift and go to state 93


state 160

    (40) mientras -> while IZQPAR exp . DERPAR IZQCOR linst DERCOR
    (72) exp -> exp . SUMA exp
    (73) exp -> exp . RESTA exp
    (74) exp -> exp . MULTI exp
    (75) exp -> exp . DIV exp
    (76) exp -> exp . PORCENTAJE exp
    (77) exp -> exp . DIGUAL exp
    (78) exp -> exp . DESIGUAL exp
    (79) exp -> exp . MAYOR exp
    (80) exp -> exp . MENOR exp
    (81) exp -> exp . MAYORIGUAL exp
    (82) exp -> exp . MENORIGUAL exp
    (83) exp -> exp . AND exp
    (84) exp -> exp . OR exp
    (85) exp -> exp . BAND exp
    (86) exp -> exp . BOR exp
    (87) exp -> exp . BXOR exp
    (88) exp -> exp . BLEFT exp
    (89) exp -> exp . BRIGHT exp
    (96) exp -> exp . ASK exp DP exp

    DERPAR          shift and go to state 176
    SUMA            shift and go to state 75
    RESTA           shift and go to state 76
    MULTI           shift and go to state 77
    DIV             shift and go to state 78
    PORCENTAJE      shift and go to state 79
    DIGUAL          shift and go to state 80
    DESIGUAL        shift and go to state 81
    MAYOR           shift and go to state 82
    MENOR           shift and go to state 83
    MAYORIGUAL      shift and go to state 84
    MENORIGUAL      shift and go to state 85
    AND             shift and go to state 86
    OR              shift and go to state 87
    BAND            shift and go to state 88
    BOR             shift and go to state 89
    BXOR            shift and go to state 90
    BLEFT           shift and go to state 91
    BRIGHT          shift and go to state 92
    ASK             shift and go to state 93


state 161

    (55) cual -> switch IZQPAR exp . DERPAR IZQCOR lcase def DERCOR
    (72) exp -> exp . SUMA exp
    (73) exp -> exp . RESTA exp
    (74) exp -> exp . MULTI exp
    (75) exp -> exp . DIV exp
    (76) exp -> exp . PORCENTAJE exp
    (77) exp -> exp . DIGUAL exp
    (78) exp -> exp . DESIGUAL exp
    (79) exp -> exp . MAYOR exp
    (80) exp -> exp . MENOR exp
    (81) exp -> exp . MAYORIGUAL exp
    (82) exp -> exp . MENORIGUAL exp
    (83) exp -> exp . AND exp
    (84) exp -> exp . OR exp
    (85) exp -> exp . BAND exp
    (86) exp -> exp . BOR exp
    (87) exp -> exp . BXOR exp
    (88) exp -> exp . BLEFT exp
    (89) exp -> exp . BRIGHT exp
    (96) exp -> exp . ASK exp DP exp

    DERPAR          shift and go to state 177
    SUMA            shift and go to state 75
    RESTA           shift and go to state 76
    MULTI           shift and go to state 77
    DIV             shift and go to state 78
    PORCENTAJE      shift and go to state 79
    DIGUAL          shift and go to state 80
    DESIGUAL        shift and go to state 81
    MAYOR           shift and go to state 82
    MENOR           shift and go to state 83
    MAYORIGUAL      shift and go to state 84
    MENORIGUAL      shift and go to state 85
    AND             shift and go to state 86
    OR              shift and go to state 87
    BAND            shift and go to state 88
    BOR             shift and go to state 89
    BXOR            shift and go to state 90
    BLEFT           shift and go to state 91
    BRIGHT          shift and go to state 92
    ASK             shift and go to state 93


state 162

    (41) dow -> do IZQCOR linst . DERCOR while IZQPAR exp DERPAR PCOMA
    (8) linst -> linst . inst
    (14) inst -> . asig PCOMA
    (15) inst -> . para
    (16) inst -> . si
    (17) inst -> . mientras
    (18) inst -> . cual
    (19) inst -> . call
    (20) inst -> . dow
    (21) inst -> . prin
    (22) inst -> . decla PCOMA
    (23) inst -> . tag
    (24) inst -> . gotot PCOMA
    (32) asig -> . ident lacs IGUAL exp
    (33) asig -> . ident IGUAL exp
    (34) asig -> . ident lacs INCE
    (35) asig -> . ident INCE
    (36) asig -> . ident lacs DECRE
    (37) asig -> . ident DECRE
    (49) para -> . for IZQPAR para1 exp PCOMA para2 DERPAR IZQCOR linst DERCOR
    (42) si -> . if IZQPAR exp DERPAR IZQCOR linst DERCOR lelsi els
    (43) si -> . if IZQPAR exp DERPAR IZQCOR linst DERCOR els
    (40) mientras -> . while IZQPAR exp DERPAR IZQCOR linst DERCOR
    (55) cual -> . switch IZQPAR exp DERPAR IZQCOR lcase def DERCOR
    (25) call -> . ident IZQPAR plex DERPAR PCOMA
    (41) dow -> . do IZQCOR linst DERCOR while IZQPAR exp DERPAR PCOMA
    (62) prin -> . printf IZQPAR STR lexpr DERPAR PCOMA
    (63) prin -> . printf IZQPAR STR DERPAR PCOMA
    (38) decla -> . TYPE ident lacs IGUAL exp
    (39) decla -> . TYPE ident IGUAL exp
    (30) tag -> . ident DP
    (31) gotot -> . goto ident
    (67) ident -> . ID
    (103) TYPE -> . int
    (104) TYPE -> . float
    (105) TYPE -> . char
    (106) TYPE -> . double
    (107) TYPE -> . void

    DERCOR          shift and go to state 178
    for             shift and go to state 61
    if              shift and go to state 62
    while           shift and go to state 63
    switch          shift and go to state 64
    do              shift and go to state 65
    printf          shift and go to state 66
    goto            shift and go to state 68
    ID              shift and go to state 44
    int             shift and go to state 7
    float           shift and go to state 8
    char            shift and go to state 9
    double          shift and go to state 10
    void            shift and go to state 11

    inst                           shift and go to state 105
    asig                           shift and go to state 49
    para                           shift and go to state 50
    si                             shift and go to state 51
    mientras                       shift and go to state 52
    cual                           shift and go to state 53
    call                           shift and go to state 54
    dow                            shift and go to state 55
    prin                           shift and go to state 56
    decla                          shift and go to state 57
    tag                            shift and go to state 58
    gotot                          shift and go to state 59
    ident                          shift and go to state 60
    TYPE                           shift and go to state 67

state 163

    (62) prin -> printf IZQPAR STR . lexpr DERPAR PCOMA
    (63) prin -> printf IZQPAR STR . DERPAR PCOMA
    (65) lexpr -> . lexpr COMA exp
    (66) lexpr -> . COMA exp

    DERPAR          shift and go to state 180
    COMA            shift and go to state 181

    lexpr                          shift and go to state 179

state 164

    (4) body -> TYPE ID IZQPAR lpam DERPAR IZQCOR linst . DERCOR
    (8) linst -> linst . inst
    (14) inst -> . asig PCOMA
    (15) inst -> . para
    (16) inst -> . si
    (17) inst -> . mientras
    (18) inst -> . cual
    (19) inst -> . call
    (20) inst -> . dow
    (21) inst -> . prin
    (22) inst -> . decla PCOMA
    (23) inst -> . tag
    (24) inst -> . gotot PCOMA
    (32) asig -> . ident lacs IGUAL exp
    (33) asig -> . ident IGUAL exp
    (34) asig -> . ident lacs INCE
    (35) asig -> . ident INCE
    (36) asig -> . ident lacs DECRE
    (37) asig -> . ident DECRE
    (49) para -> . for IZQPAR para1 exp PCOMA para2 DERPAR IZQCOR linst DERCOR
    (42) si -> . if IZQPAR exp DERPAR IZQCOR linst DERCOR lelsi els
    (43) si -> . if IZQPAR exp DERPAR IZQCOR linst DERCOR els
    (40) mientras -> . while IZQPAR exp DERPAR IZQCOR linst DERCOR
    (55) cual -> . switch IZQPAR exp DERPAR IZQCOR lcase def DERCOR
    (25) call -> . ident IZQPAR plex DERPAR PCOMA
    (41) dow -> . do IZQCOR linst DERCOR while IZQPAR exp DERPAR PCOMA
    (62) prin -> . printf IZQPAR STR lexpr DERPAR PCOMA
    (63) prin -> . printf IZQPAR STR DERPAR PCOMA
    (38) decla -> . TYPE ident lacs IGUAL exp
    (39) decla -> . TYPE ident IGUAL exp
    (30) tag -> . ident DP
    (31) gotot -> . goto ident
    (67) ident -> . ID
    (103) TYPE -> . int
    (104) TYPE -> . float
    (105) TYPE -> . char
    (106) TYPE -> . double
    (107) TYPE -> . void

    DERCOR          shift and go to state 182
    for             shift and go to state 61
    if              shift and go to state 62
    while           shift and go to state 63
    switch          shift and go to state 64
    do              shift and go to state 65
    printf          shift and go to state 66
    goto            shift and go to state 68
    ID              shift and go to state 44
    int             shift and go to state 7
    float           shift and go to state 8
    char            shift and go to state 9
    double          shift and go to state 10
    void            shift and go to state 11

    TYPE                           shift and go to state 67
    inst                           shift and go to state 105
    asig                           shift and go to state 49
    para                           shift and go to state 50
    si                             shift and go to state 51
    mientras                       shift and go to state 52
    cual                           shift and go to state 53
    call                           shift and go to state 54
    dow                            shift and go to state 55
    prin                           shift and go to state 56
    decla                          shift and go to state 57
    tag                            shift and go to state 58
    gotot                          shift and go to state 59
    ident                          shift and go to state 60

state 165

    (12) lparam -> lparam COMA TYPE ident .

    COMA            reduce using rule 12 (lparam -> lparam COMA TYPE ident .)
    DERPAR          reduce using rule 12 (lparam -> lparam COMA TYPE ident .)


state 166

    (5) body -> TYPE main IZQPAR lpam DERPAR IZQCOR linst . DERCOR
    (8) linst -> linst . inst
    (14) inst -> . asig PCOMA
    (15) inst -> . para
    (16) inst -> . si
    (17) inst -> . mientras
    (18) inst -> . cual
    (19) inst -> . call
    (20) inst -> . dow
    (21) inst -> . prin
    (22) inst -> . decla PCOMA
    (23) inst -> . tag
    (24) inst -> . gotot PCOMA
    (32) asig -> . ident lacs IGUAL exp
    (33) asig -> . ident IGUAL exp
    (34) asig -> . ident lacs INCE
    (35) asig -> . ident INCE
    (36) asig -> . ident lacs DECRE
    (37) asig -> . ident DECRE
    (49) para -> . for IZQPAR para1 exp PCOMA para2 DERPAR IZQCOR linst DERCOR
    (42) si -> . if IZQPAR exp DERPAR IZQCOR linst DERCOR lelsi els
    (43) si -> . if IZQPAR exp DERPAR IZQCOR linst DERCOR els
    (40) mientras -> . while IZQPAR exp DERPAR IZQCOR linst DERCOR
    (55) cual -> . switch IZQPAR exp DERPAR IZQCOR lcase def DERCOR
    (25) call -> . ident IZQPAR plex DERPAR PCOMA
    (41) dow -> . do IZQCOR linst DERCOR while IZQPAR exp DERPAR PCOMA
    (62) prin -> . printf IZQPAR STR lexpr DERPAR PCOMA
    (63) prin -> . printf IZQPAR STR DERPAR PCOMA
    (38) decla -> . TYPE ident lacs IGUAL exp
    (39) decla -> . TYPE ident IGUAL exp
    (30) tag -> . ident DP
    (31) gotot -> . goto ident
    (67) ident -> . ID
    (103) TYPE -> . int
    (104) TYPE -> . float
    (105) TYPE -> . char
    (106) TYPE -> . double
    (107) TYPE -> . void

    DERCOR          shift and go to state 183
    for             shift and go to state 61
    if              shift and go to state 62
    while           shift and go to state 63
    switch          shift and go to state 64
    do              shift and go to state 65
    printf          shift and go to state 66
    goto            shift and go to state 68
    ID              shift and go to state 44
    int             shift and go to state 7
    float           shift and go to state 8
    char            shift and go to state 9
    double          shift and go to state 10
    void            shift and go to state 11

    TYPE                           shift and go to state 67
    inst                           shift and go to state 105
    asig                           shift and go to state 49
    para                           shift and go to state 50
    si                             shift and go to state 51
    mientras                       shift and go to state 52
    cual                           shift and go to state 53
    call                           shift and go to state 54
    dow                            shift and go to state 55
    prin                           shift and go to state 56
    decla                          shift and go to state 57
    tag                            shift and go to state 58
    gotot                          shift and go to state 59
    ident                          shift and go to state 60

state 167

    (96) exp -> exp ASK exp DP . exp
    (64) exp -> . scanf IZQPAR DERPAR
    (72) exp -> . exp SUMA exp
    (73) exp -> . exp RESTA exp
    (74) exp -> . exp MULTI exp
    (75) exp -> . exp DIV exp
    (76) exp -> . exp PORCENTAJE exp
    (77) exp -> . exp DIGUAL exp
    (78) exp -> . exp DESIGUAL exp
    (79) exp -> . exp MAYOR exp
    (80) exp -> . exp MENOR exp
    (81) exp -> . exp MAYORIGUAL exp
    (82) exp -> . exp MENORIGUAL exp
    (83) exp -> . exp AND exp
    (84) exp -> . exp OR exp
    (85) exp -> . exp BAND exp
    (86) exp -> . exp BOR exp
    (87) exp -> . exp BXOR exp
    (88) exp -> . exp BLEFT exp
    (89) exp -> . exp BRIGHT exp
    (90) exp -> . RESTA exp
    (91) exp -> . NOT exp
    (92) exp -> . BNOT exp
    (93) exp -> . sizeof exp
    (94) exp -> . IZQPAR exp DERPAR
    (95) exp -> . IZQPAR TYPE DERPAR exp
    (96) exp -> . exp ASK exp DP exp
    (97) exp -> . DOUBLE
    (98) exp -> . INTEGER
    (99) exp -> . ident
    (100) exp -> . ident lacs
    (101) exp -> . STR
    (102) exp -> . IZQCOR lex DERCOR
    (67) ident -> . ID

    scanf           shift and go to state 34
    RESTA           shift and go to state 36
    NOT             shift and go to state 37
    BNOT            shift and go to state 38
    sizeof          shift and go to state 39
    IZQPAR          shift and go to state 35
    DOUBLE          shift and go to state 40
    INTEGER         shift and go to state 41
    STR             shift and go to state 42
    IZQCOR          shift and go to state 43
    ID              shift and go to state 44

    exp                            shift and go to state 184
    ident                          shift and go to state 32

state 168

    (95) exp -> IZQPAR TYPE DERPAR exp .
    (72) exp -> exp . SUMA exp
    (73) exp -> exp . RESTA exp
    (74) exp -> exp . MULTI exp
    (75) exp -> exp . DIV exp
    (76) exp -> exp . PORCENTAJE exp
    (77) exp -> exp . DIGUAL exp
    (78) exp -> exp . DESIGUAL exp
    (79) exp -> exp . MAYOR exp
    (80) exp -> exp . MENOR exp
    (81) exp -> exp . MAYORIGUAL exp
    (82) exp -> exp . MENORIGUAL exp
    (83) exp -> exp . AND exp
    (84) exp -> exp . OR exp
    (85) exp -> exp . BAND exp
    (86) exp -> exp . BOR exp
    (87) exp -> exp . BXOR exp
    (88) exp -> exp . BLEFT exp
    (89) exp -> exp . BRIGHT exp
    (96) exp -> exp . ASK exp DP exp

  ! shift/reduce conflict for SUMA resolved as shift
  ! shift/reduce conflict for RESTA resolved as shift
  ! shift/reduce conflict for MULTI resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for PORCENTAJE resolved as shift
  ! shift/reduce conflict for DIGUAL resolved as shift
  ! shift/reduce conflict for DESIGUAL resolved as shift
  ! shift/reduce conflict for MAYOR resolved as shift
  ! shift/reduce conflict for MENOR resolved as shift
  ! shift/reduce conflict for MAYORIGUAL resolved as shift
  ! shift/reduce conflict for MENORIGUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for BAND resolved as shift
  ! shift/reduce conflict for BOR resolved as shift
  ! shift/reduce conflict for BXOR resolved as shift
  ! shift/reduce conflict for BLEFT resolved as shift
  ! shift/reduce conflict for BRIGHT resolved as shift
  ! shift/reduce conflict for ASK resolved as shift
    PCOMA           reduce using rule 95 (exp -> IZQPAR TYPE DERPAR exp .)
    DERPAR          reduce using rule 95 (exp -> IZQPAR TYPE DERPAR exp .)
    DERLLAVE        reduce using rule 95 (exp -> IZQPAR TYPE DERPAR exp .)
    DERCOR          reduce using rule 95 (exp -> IZQPAR TYPE DERPAR exp .)
    COMA            reduce using rule 95 (exp -> IZQPAR TYPE DERPAR exp .)
    DP              reduce using rule 95 (exp -> IZQPAR TYPE DERPAR exp .)
    SUMA            shift and go to state 75
    RESTA           shift and go to state 76
    MULTI           shift and go to state 77
    DIV             shift and go to state 78
    PORCENTAJE      shift and go to state 79
    DIGUAL          shift and go to state 80
    DESIGUAL        shift and go to state 81
    MAYOR           shift and go to state 82
    MENOR           shift and go to state 83
    MAYORIGUAL      shift and go to state 84
    MENORIGUAL      shift and go to state 85
    AND             shift and go to state 86
    OR              shift and go to state 87
    BAND            shift and go to state 88
    BOR             shift and go to state 89
    BXOR            shift and go to state 90
    BLEFT           shift and go to state 91
    BRIGHT          shift and go to state 92
    ASK             shift and go to state 93

  ! SUMA            [ reduce using rule 95 (exp -> IZQPAR TYPE DERPAR exp .) ]
  ! RESTA           [ reduce using rule 95 (exp -> IZQPAR TYPE DERPAR exp .) ]
  ! MULTI           [ reduce using rule 95 (exp -> IZQPAR TYPE DERPAR exp .) ]
  ! DIV             [ reduce using rule 95 (exp -> IZQPAR TYPE DERPAR exp .) ]
  ! PORCENTAJE      [ reduce using rule 95 (exp -> IZQPAR TYPE DERPAR exp .) ]
  ! DIGUAL          [ reduce using rule 95 (exp -> IZQPAR TYPE DERPAR exp .) ]
  ! DESIGUAL        [ reduce using rule 95 (exp -> IZQPAR TYPE DERPAR exp .) ]
  ! MAYOR           [ reduce using rule 95 (exp -> IZQPAR TYPE DERPAR exp .) ]
  ! MENOR           [ reduce using rule 95 (exp -> IZQPAR TYPE DERPAR exp .) ]
  ! MAYORIGUAL      [ reduce using rule 95 (exp -> IZQPAR TYPE DERPAR exp .) ]
  ! MENORIGUAL      [ reduce using rule 95 (exp -> IZQPAR TYPE DERPAR exp .) ]
  ! AND             [ reduce using rule 95 (exp -> IZQPAR TYPE DERPAR exp .) ]
  ! OR              [ reduce using rule 95 (exp -> IZQPAR TYPE DERPAR exp .) ]
  ! BAND            [ reduce using rule 95 (exp -> IZQPAR TYPE DERPAR exp .) ]
  ! BOR             [ reduce using rule 95 (exp -> IZQPAR TYPE DERPAR exp .) ]
  ! BXOR            [ reduce using rule 95 (exp -> IZQPAR TYPE DERPAR exp .) ]
  ! BLEFT           [ reduce using rule 95 (exp -> IZQPAR TYPE DERPAR exp .) ]
  ! BRIGHT          [ reduce using rule 95 (exp -> IZQPAR TYPE DERPAR exp .) ]
  ! ASK             [ reduce using rule 95 (exp -> IZQPAR TYPE DERPAR exp .) ]


state 169

    (28) lex -> lex COMA exp .
    (72) exp -> exp . SUMA exp
    (73) exp -> exp . RESTA exp
    (74) exp -> exp . MULTI exp
    (75) exp -> exp . DIV exp
    (76) exp -> exp . PORCENTAJE exp
    (77) exp -> exp . DIGUAL exp
    (78) exp -> exp . DESIGUAL exp
    (79) exp -> exp . MAYOR exp
    (80) exp -> exp . MENOR exp
    (81) exp -> exp . MAYORIGUAL exp
    (82) exp -> exp . MENORIGUAL exp
    (83) exp -> exp . AND exp
    (84) exp -> exp . OR exp
    (85) exp -> exp . BAND exp
    (86) exp -> exp . BOR exp
    (87) exp -> exp . BXOR exp
    (88) exp -> exp . BLEFT exp
    (89) exp -> exp . BRIGHT exp
    (96) exp -> exp . ASK exp DP exp

    DERCOR          reduce using rule 28 (lex -> lex COMA exp .)
    COMA            reduce using rule 28 (lex -> lex COMA exp .)
    DERPAR          reduce using rule 28 (lex -> lex COMA exp .)
    SUMA            shift and go to state 75
    RESTA           shift and go to state 76
    MULTI           shift and go to state 77
    DIV             shift and go to state 78
    PORCENTAJE      shift and go to state 79
    DIGUAL          shift and go to state 80
    DESIGUAL        shift and go to state 81
    MAYOR           shift and go to state 82
    MENOR           shift and go to state 83
    MAYORIGUAL      shift and go to state 84
    MENORIGUAL      shift and go to state 85
    AND             shift and go to state 86
    OR              shift and go to state 87
    BAND            shift and go to state 88
    BOR             shift and go to state 89
    BXOR            shift and go to state 90
    BLEFT           shift and go to state 91
    BRIGHT          shift and go to state 92
    ASK             shift and go to state 93


state 170

    (32) asig -> ident lacs IGUAL exp .
    (72) exp -> exp . SUMA exp
    (73) exp -> exp . RESTA exp
    (74) exp -> exp . MULTI exp
    (75) exp -> exp . DIV exp
    (76) exp -> exp . PORCENTAJE exp
    (77) exp -> exp . DIGUAL exp
    (78) exp -> exp . DESIGUAL exp
    (79) exp -> exp . MAYOR exp
    (80) exp -> exp . MENOR exp
    (81) exp -> exp . MAYORIGUAL exp
    (82) exp -> exp . MENORIGUAL exp
    (83) exp -> exp . AND exp
    (84) exp -> exp . OR exp
    (85) exp -> exp . BAND exp
    (86) exp -> exp . BOR exp
    (87) exp -> exp . BXOR exp
    (88) exp -> exp . BLEFT exp
    (89) exp -> exp . BRIGHT exp
    (96) exp -> exp . ASK exp DP exp

    PCOMA           reduce using rule 32 (asig -> ident lacs IGUAL exp .)
    DERPAR          reduce using rule 32 (asig -> ident lacs IGUAL exp .)
    SUMA            shift and go to state 75
    RESTA           shift and go to state 76
    MULTI           shift and go to state 77
    DIV             shift and go to state 78
    PORCENTAJE      shift and go to state 79
    DIGUAL          shift and go to state 80
    DESIGUAL        shift and go to state 81
    MAYOR           shift and go to state 82
    MENOR           shift and go to state 83
    MAYORIGUAL      shift and go to state 84
    MENORIGUAL      shift and go to state 85
    AND             shift and go to state 86
    OR              shift and go to state 87
    BAND            shift and go to state 88
    BOR             shift and go to state 89
    BXOR            shift and go to state 90
    BLEFT           shift and go to state 91
    BRIGHT          shift and go to state 92
    ASK             shift and go to state 93


state 171

    (25) call -> ident IZQPAR plex DERPAR . PCOMA

    PCOMA           shift and go to state 185


state 172

    (49) para -> for IZQPAR para1 exp . PCOMA para2 DERPAR IZQCOR linst DERCOR
    (72) exp -> exp . SUMA exp
    (73) exp -> exp . RESTA exp
    (74) exp -> exp . MULTI exp
    (75) exp -> exp . DIV exp
    (76) exp -> exp . PORCENTAJE exp
    (77) exp -> exp . DIGUAL exp
    (78) exp -> exp . DESIGUAL exp
    (79) exp -> exp . MAYOR exp
    (80) exp -> exp . MENOR exp
    (81) exp -> exp . MAYORIGUAL exp
    (82) exp -> exp . MENORIGUAL exp
    (83) exp -> exp . AND exp
    (84) exp -> exp . OR exp
    (85) exp -> exp . BAND exp
    (86) exp -> exp . BOR exp
    (87) exp -> exp . BXOR exp
    (88) exp -> exp . BLEFT exp
    (89) exp -> exp . BRIGHT exp
    (96) exp -> exp . ASK exp DP exp

    PCOMA           shift and go to state 186
    SUMA            shift and go to state 75
    RESTA           shift and go to state 76
    MULTI           shift and go to state 77
    DIV             shift and go to state 78
    PORCENTAJE      shift and go to state 79
    DIGUAL          shift and go to state 80
    DESIGUAL        shift and go to state 81
    MAYOR           shift and go to state 82
    MENOR           shift and go to state 83
    MAYORIGUAL      shift and go to state 84
    MENORIGUAL      shift and go to state 85
    AND             shift and go to state 86
    OR              shift and go to state 87
    BAND            shift and go to state 88
    BOR             shift and go to state 89
    BXOR            shift and go to state 90
    BLEFT           shift and go to state 91
    BRIGHT          shift and go to state 92
    ASK             shift and go to state 93


state 173

    (50) para1 -> asig PCOMA .

    scanf           reduce using rule 50 (para1 -> asig PCOMA .)
    RESTA           reduce using rule 50 (para1 -> asig PCOMA .)
    NOT             reduce using rule 50 (para1 -> asig PCOMA .)
    BNOT            reduce using rule 50 (para1 -> asig PCOMA .)
    sizeof          reduce using rule 50 (para1 -> asig PCOMA .)
    IZQPAR          reduce using rule 50 (para1 -> asig PCOMA .)
    DOUBLE          reduce using rule 50 (para1 -> asig PCOMA .)
    INTEGER         reduce using rule 50 (para1 -> asig PCOMA .)
    STR             reduce using rule 50 (para1 -> asig PCOMA .)
    IZQCOR          reduce using rule 50 (para1 -> asig PCOMA .)
    ID              reduce using rule 50 (para1 -> asig PCOMA .)


state 174

    (51) para1 -> decla PCOMA .

    scanf           reduce using rule 51 (para1 -> decla PCOMA .)
    RESTA           reduce using rule 51 (para1 -> decla PCOMA .)
    NOT             reduce using rule 51 (para1 -> decla PCOMA .)
    BNOT            reduce using rule 51 (para1 -> decla PCOMA .)
    sizeof          reduce using rule 51 (para1 -> decla PCOMA .)
    IZQPAR          reduce using rule 51 (para1 -> decla PCOMA .)
    DOUBLE          reduce using rule 51 (para1 -> decla PCOMA .)
    INTEGER         reduce using rule 51 (para1 -> decla PCOMA .)
    STR             reduce using rule 51 (para1 -> decla PCOMA .)
    IZQCOR          reduce using rule 51 (para1 -> decla PCOMA .)
    ID              reduce using rule 51 (para1 -> decla PCOMA .)


state 175

    (42) si -> if IZQPAR exp DERPAR . IZQCOR linst DERCOR lelsi els
    (43) si -> if IZQPAR exp DERPAR . IZQCOR linst DERCOR els

    IZQCOR          shift and go to state 187


state 176

    (40) mientras -> while IZQPAR exp DERPAR . IZQCOR linst DERCOR

    IZQCOR          shift and go to state 188


state 177

    (55) cual -> switch IZQPAR exp DERPAR . IZQCOR lcase def DERCOR

    IZQCOR          shift and go to state 189


state 178

    (41) dow -> do IZQCOR linst DERCOR . while IZQPAR exp DERPAR PCOMA

    while           shift and go to state 190


state 179

    (62) prin -> printf IZQPAR STR lexpr . DERPAR PCOMA
    (65) lexpr -> lexpr . COMA exp

    DERPAR          shift and go to state 191
    COMA            shift and go to state 192


state 180

    (63) prin -> printf IZQPAR STR DERPAR . PCOMA

    PCOMA           shift and go to state 193


state 181

    (66) lexpr -> COMA . exp
    (64) exp -> . scanf IZQPAR DERPAR
    (72) exp -> . exp SUMA exp
    (73) exp -> . exp RESTA exp
    (74) exp -> . exp MULTI exp
    (75) exp -> . exp DIV exp
    (76) exp -> . exp PORCENTAJE exp
    (77) exp -> . exp DIGUAL exp
    (78) exp -> . exp DESIGUAL exp
    (79) exp -> . exp MAYOR exp
    (80) exp -> . exp MENOR exp
    (81) exp -> . exp MAYORIGUAL exp
    (82) exp -> . exp MENORIGUAL exp
    (83) exp -> . exp AND exp
    (84) exp -> . exp OR exp
    (85) exp -> . exp BAND exp
    (86) exp -> . exp BOR exp
    (87) exp -> . exp BXOR exp
    (88) exp -> . exp BLEFT exp
    (89) exp -> . exp BRIGHT exp
    (90) exp -> . RESTA exp
    (91) exp -> . NOT exp
    (92) exp -> . BNOT exp
    (93) exp -> . sizeof exp
    (94) exp -> . IZQPAR exp DERPAR
    (95) exp -> . IZQPAR TYPE DERPAR exp
    (96) exp -> . exp ASK exp DP exp
    (97) exp -> . DOUBLE
    (98) exp -> . INTEGER
    (99) exp -> . ident
    (100) exp -> . ident lacs
    (101) exp -> . STR
    (102) exp -> . IZQCOR lex DERCOR
    (67) ident -> . ID

    scanf           shift and go to state 34
    RESTA           shift and go to state 36
    NOT             shift and go to state 37
    BNOT            shift and go to state 38
    sizeof          shift and go to state 39
    IZQPAR          shift and go to state 35
    DOUBLE          shift and go to state 40
    INTEGER         shift and go to state 41
    STR             shift and go to state 42
    IZQCOR          shift and go to state 43
    ID              shift and go to state 44

    exp                            shift and go to state 194
    ident                          shift and go to state 32

state 182

    (4) body -> TYPE ID IZQPAR lpam DERPAR IZQCOR linst DERCOR .

    struct          reduce using rule 4 (body -> TYPE ID IZQPAR lpam DERPAR IZQCOR linst DERCOR .)
    int             reduce using rule 4 (body -> TYPE ID IZQPAR lpam DERPAR IZQCOR linst DERCOR .)
    float           reduce using rule 4 (body -> TYPE ID IZQPAR lpam DERPAR IZQCOR linst DERCOR .)
    char            reduce using rule 4 (body -> TYPE ID IZQPAR lpam DERPAR IZQCOR linst DERCOR .)
    double          reduce using rule 4 (body -> TYPE ID IZQPAR lpam DERPAR IZQCOR linst DERCOR .)
    void            reduce using rule 4 (body -> TYPE ID IZQPAR lpam DERPAR IZQCOR linst DERCOR .)
    $end            reduce using rule 4 (body -> TYPE ID IZQPAR lpam DERPAR IZQCOR linst DERCOR .)


state 183

    (5) body -> TYPE main IZQPAR lpam DERPAR IZQCOR linst DERCOR .

    struct          reduce using rule 5 (body -> TYPE main IZQPAR lpam DERPAR IZQCOR linst DERCOR .)
    int             reduce using rule 5 (body -> TYPE main IZQPAR lpam DERPAR IZQCOR linst DERCOR .)
    float           reduce using rule 5 (body -> TYPE main IZQPAR lpam DERPAR IZQCOR linst DERCOR .)
    char            reduce using rule 5 (body -> TYPE main IZQPAR lpam DERPAR IZQCOR linst DERCOR .)
    double          reduce using rule 5 (body -> TYPE main IZQPAR lpam DERPAR IZQCOR linst DERCOR .)
    void            reduce using rule 5 (body -> TYPE main IZQPAR lpam DERPAR IZQCOR linst DERCOR .)
    $end            reduce using rule 5 (body -> TYPE main IZQPAR lpam DERPAR IZQCOR linst DERCOR .)


state 184

    (96) exp -> exp ASK exp DP exp .
    (72) exp -> exp . SUMA exp
    (73) exp -> exp . RESTA exp
    (74) exp -> exp . MULTI exp
    (75) exp -> exp . DIV exp
    (76) exp -> exp . PORCENTAJE exp
    (77) exp -> exp . DIGUAL exp
    (78) exp -> exp . DESIGUAL exp
    (79) exp -> exp . MAYOR exp
    (80) exp -> exp . MENOR exp
    (81) exp -> exp . MAYORIGUAL exp
    (82) exp -> exp . MENORIGUAL exp
    (83) exp -> exp . AND exp
    (84) exp -> exp . OR exp
    (85) exp -> exp . BAND exp
    (86) exp -> exp . BOR exp
    (87) exp -> exp . BXOR exp
    (88) exp -> exp . BLEFT exp
    (89) exp -> exp . BRIGHT exp
    (96) exp -> exp . ASK exp DP exp

  ! shift/reduce conflict for SUMA resolved as shift
  ! shift/reduce conflict for RESTA resolved as shift
  ! shift/reduce conflict for MULTI resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for PORCENTAJE resolved as shift
  ! shift/reduce conflict for DIGUAL resolved as shift
  ! shift/reduce conflict for DESIGUAL resolved as shift
  ! shift/reduce conflict for MAYOR resolved as shift
  ! shift/reduce conflict for MENOR resolved as shift
  ! shift/reduce conflict for MAYORIGUAL resolved as shift
  ! shift/reduce conflict for MENORIGUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for BAND resolved as shift
  ! shift/reduce conflict for BOR resolved as shift
  ! shift/reduce conflict for BXOR resolved as shift
  ! shift/reduce conflict for BLEFT resolved as shift
  ! shift/reduce conflict for BRIGHT resolved as shift
  ! shift/reduce conflict for ASK resolved as shift
    PCOMA           reduce using rule 96 (exp -> exp ASK exp DP exp .)
    DERPAR          reduce using rule 96 (exp -> exp ASK exp DP exp .)
    DERLLAVE        reduce using rule 96 (exp -> exp ASK exp DP exp .)
    DERCOR          reduce using rule 96 (exp -> exp ASK exp DP exp .)
    COMA            reduce using rule 96 (exp -> exp ASK exp DP exp .)
    DP              reduce using rule 96 (exp -> exp ASK exp DP exp .)
    SUMA            shift and go to state 75
    RESTA           shift and go to state 76
    MULTI           shift and go to state 77
    DIV             shift and go to state 78
    PORCENTAJE      shift and go to state 79
    DIGUAL          shift and go to state 80
    DESIGUAL        shift and go to state 81
    MAYOR           shift and go to state 82
    MENOR           shift and go to state 83
    MAYORIGUAL      shift and go to state 84
    MENORIGUAL      shift and go to state 85
    AND             shift and go to state 86
    OR              shift and go to state 87
    BAND            shift and go to state 88
    BOR             shift and go to state 89
    BXOR            shift and go to state 90
    BLEFT           shift and go to state 91
    BRIGHT          shift and go to state 92
    ASK             shift and go to state 93

  ! SUMA            [ reduce using rule 96 (exp -> exp ASK exp DP exp .) ]
  ! RESTA           [ reduce using rule 96 (exp -> exp ASK exp DP exp .) ]
  ! MULTI           [ reduce using rule 96 (exp -> exp ASK exp DP exp .) ]
  ! DIV             [ reduce using rule 96 (exp -> exp ASK exp DP exp .) ]
  ! PORCENTAJE      [ reduce using rule 96 (exp -> exp ASK exp DP exp .) ]
  ! DIGUAL          [ reduce using rule 96 (exp -> exp ASK exp DP exp .) ]
  ! DESIGUAL        [ reduce using rule 96 (exp -> exp ASK exp DP exp .) ]
  ! MAYOR           [ reduce using rule 96 (exp -> exp ASK exp DP exp .) ]
  ! MENOR           [ reduce using rule 96 (exp -> exp ASK exp DP exp .) ]
  ! MAYORIGUAL      [ reduce using rule 96 (exp -> exp ASK exp DP exp .) ]
  ! MENORIGUAL      [ reduce using rule 96 (exp -> exp ASK exp DP exp .) ]
  ! AND             [ reduce using rule 96 (exp -> exp ASK exp DP exp .) ]
  ! OR              [ reduce using rule 96 (exp -> exp ASK exp DP exp .) ]
  ! BAND            [ reduce using rule 96 (exp -> exp ASK exp DP exp .) ]
  ! BOR             [ reduce using rule 96 (exp -> exp ASK exp DP exp .) ]
  ! BXOR            [ reduce using rule 96 (exp -> exp ASK exp DP exp .) ]
  ! BLEFT           [ reduce using rule 96 (exp -> exp ASK exp DP exp .) ]
  ! BRIGHT          [ reduce using rule 96 (exp -> exp ASK exp DP exp .) ]
  ! ASK             [ reduce using rule 96 (exp -> exp ASK exp DP exp .) ]


state 185

    (25) call -> ident IZQPAR plex DERPAR PCOMA .

    DERCOR          reduce using rule 25 (call -> ident IZQPAR plex DERPAR PCOMA .)
    for             reduce using rule 25 (call -> ident IZQPAR plex DERPAR PCOMA .)
    if              reduce using rule 25 (call -> ident IZQPAR plex DERPAR PCOMA .)
    while           reduce using rule 25 (call -> ident IZQPAR plex DERPAR PCOMA .)
    switch          reduce using rule 25 (call -> ident IZQPAR plex DERPAR PCOMA .)
    do              reduce using rule 25 (call -> ident IZQPAR plex DERPAR PCOMA .)
    printf          reduce using rule 25 (call -> ident IZQPAR plex DERPAR PCOMA .)
    goto            reduce using rule 25 (call -> ident IZQPAR plex DERPAR PCOMA .)
    ID              reduce using rule 25 (call -> ident IZQPAR plex DERPAR PCOMA .)
    int             reduce using rule 25 (call -> ident IZQPAR plex DERPAR PCOMA .)
    float           reduce using rule 25 (call -> ident IZQPAR plex DERPAR PCOMA .)
    char            reduce using rule 25 (call -> ident IZQPAR plex DERPAR PCOMA .)
    double          reduce using rule 25 (call -> ident IZQPAR plex DERPAR PCOMA .)
    void            reduce using rule 25 (call -> ident IZQPAR plex DERPAR PCOMA .)
    break           reduce using rule 25 (call -> ident IZQPAR plex DERPAR PCOMA .)
    default         reduce using rule 25 (call -> ident IZQPAR plex DERPAR PCOMA .)
    case            reduce using rule 25 (call -> ident IZQPAR plex DERPAR PCOMA .)


state 186

    (49) para -> for IZQPAR para1 exp PCOMA . para2 DERPAR IZQCOR linst DERCOR
    (52) para2 -> . asig
    (53) para2 -> . decla
    (54) para2 -> . exp
    (32) asig -> . ident lacs IGUAL exp
    (33) asig -> . ident IGUAL exp
    (34) asig -> . ident lacs INCE
    (35) asig -> . ident INCE
    (36) asig -> . ident lacs DECRE
    (37) asig -> . ident DECRE
    (38) decla -> . TYPE ident lacs IGUAL exp
    (39) decla -> . TYPE ident IGUAL exp
    (64) exp -> . scanf IZQPAR DERPAR
    (72) exp -> . exp SUMA exp
    (73) exp -> . exp RESTA exp
    (74) exp -> . exp MULTI exp
    (75) exp -> . exp DIV exp
    (76) exp -> . exp PORCENTAJE exp
    (77) exp -> . exp DIGUAL exp
    (78) exp -> . exp DESIGUAL exp
    (79) exp -> . exp MAYOR exp
    (80) exp -> . exp MENOR exp
    (81) exp -> . exp MAYORIGUAL exp
    (82) exp -> . exp MENORIGUAL exp
    (83) exp -> . exp AND exp
    (84) exp -> . exp OR exp
    (85) exp -> . exp BAND exp
    (86) exp -> . exp BOR exp
    (87) exp -> . exp BXOR exp
    (88) exp -> . exp BLEFT exp
    (89) exp -> . exp BRIGHT exp
    (90) exp -> . RESTA exp
    (91) exp -> . NOT exp
    (92) exp -> . BNOT exp
    (93) exp -> . sizeof exp
    (94) exp -> . IZQPAR exp DERPAR
    (95) exp -> . IZQPAR TYPE DERPAR exp
    (96) exp -> . exp ASK exp DP exp
    (97) exp -> . DOUBLE
    (98) exp -> . INTEGER
    (99) exp -> . ident
    (100) exp -> . ident lacs
    (101) exp -> . STR
    (102) exp -> . IZQCOR lex DERCOR
    (67) ident -> . ID
    (103) TYPE -> . int
    (104) TYPE -> . float
    (105) TYPE -> . char
    (106) TYPE -> . double
    (107) TYPE -> . void

    scanf           shift and go to state 34
    RESTA           shift and go to state 36
    NOT             shift and go to state 37
    BNOT            shift and go to state 38
    sizeof          shift and go to state 39
    IZQPAR          shift and go to state 35
    DOUBLE          shift and go to state 40
    INTEGER         shift and go to state 41
    STR             shift and go to state 42
    IZQCOR          shift and go to state 43
    ID              shift and go to state 44
    int             shift and go to state 7
    float           shift and go to state 8
    char            shift and go to state 9
    double          shift and go to state 10
    void            shift and go to state 11

    exp                            shift and go to state 195
    para2                          shift and go to state 196
    asig                           shift and go to state 197
    decla                          shift and go to state 198
    ident                          shift and go to state 199
    TYPE                           shift and go to state 67

state 187

    (42) si -> if IZQPAR exp DERPAR IZQCOR . linst DERCOR lelsi els
    (43) si -> if IZQPAR exp DERPAR IZQCOR . linst DERCOR els
    (8) linst -> . linst inst
    (9) linst -> . inst
    (14) inst -> . asig PCOMA
    (15) inst -> . para
    (16) inst -> . si
    (17) inst -> . mientras
    (18) inst -> . cual
    (19) inst -> . call
    (20) inst -> . dow
    (21) inst -> . prin
    (22) inst -> . decla PCOMA
    (23) inst -> . tag
    (24) inst -> . gotot PCOMA
    (32) asig -> . ident lacs IGUAL exp
    (33) asig -> . ident IGUAL exp
    (34) asig -> . ident lacs INCE
    (35) asig -> . ident INCE
    (36) asig -> . ident lacs DECRE
    (37) asig -> . ident DECRE
    (49) para -> . for IZQPAR para1 exp PCOMA para2 DERPAR IZQCOR linst DERCOR
    (42) si -> . if IZQPAR exp DERPAR IZQCOR linst DERCOR lelsi els
    (43) si -> . if IZQPAR exp DERPAR IZQCOR linst DERCOR els
    (40) mientras -> . while IZQPAR exp DERPAR IZQCOR linst DERCOR
    (55) cual -> . switch IZQPAR exp DERPAR IZQCOR lcase def DERCOR
    (25) call -> . ident IZQPAR plex DERPAR PCOMA
    (41) dow -> . do IZQCOR linst DERCOR while IZQPAR exp DERPAR PCOMA
    (62) prin -> . printf IZQPAR STR lexpr DERPAR PCOMA
    (63) prin -> . printf IZQPAR STR DERPAR PCOMA
    (38) decla -> . TYPE ident lacs IGUAL exp
    (39) decla -> . TYPE ident IGUAL exp
    (30) tag -> . ident DP
    (31) gotot -> . goto ident
    (67) ident -> . ID
    (103) TYPE -> . int
    (104) TYPE -> . float
    (105) TYPE -> . char
    (106) TYPE -> . double
    (107) TYPE -> . void

    for             shift and go to state 61
    if              shift and go to state 62
    while           shift and go to state 63
    switch          shift and go to state 64
    do              shift and go to state 65
    printf          shift and go to state 66
    goto            shift and go to state 68
    ID              shift and go to state 44
    int             shift and go to state 7
    float           shift and go to state 8
    char            shift and go to state 9
    double          shift and go to state 10
    void            shift and go to state 11

    linst                          shift and go to state 200
    inst                           shift and go to state 48
    asig                           shift and go to state 49
    para                           shift and go to state 50
    si                             shift and go to state 51
    mientras                       shift and go to state 52
    cual                           shift and go to state 53
    call                           shift and go to state 54
    dow                            shift and go to state 55
    prin                           shift and go to state 56
    decla                          shift and go to state 57
    tag                            shift and go to state 58
    gotot                          shift and go to state 59
    ident                          shift and go to state 60
    TYPE                           shift and go to state 67

state 188

    (40) mientras -> while IZQPAR exp DERPAR IZQCOR . linst DERCOR
    (8) linst -> . linst inst
    (9) linst -> . inst
    (14) inst -> . asig PCOMA
    (15) inst -> . para
    (16) inst -> . si
    (17) inst -> . mientras
    (18) inst -> . cual
    (19) inst -> . call
    (20) inst -> . dow
    (21) inst -> . prin
    (22) inst -> . decla PCOMA
    (23) inst -> . tag
    (24) inst -> . gotot PCOMA
    (32) asig -> . ident lacs IGUAL exp
    (33) asig -> . ident IGUAL exp
    (34) asig -> . ident lacs INCE
    (35) asig -> . ident INCE
    (36) asig -> . ident lacs DECRE
    (37) asig -> . ident DECRE
    (49) para -> . for IZQPAR para1 exp PCOMA para2 DERPAR IZQCOR linst DERCOR
    (42) si -> . if IZQPAR exp DERPAR IZQCOR linst DERCOR lelsi els
    (43) si -> . if IZQPAR exp DERPAR IZQCOR linst DERCOR els
    (40) mientras -> . while IZQPAR exp DERPAR IZQCOR linst DERCOR
    (55) cual -> . switch IZQPAR exp DERPAR IZQCOR lcase def DERCOR
    (25) call -> . ident IZQPAR plex DERPAR PCOMA
    (41) dow -> . do IZQCOR linst DERCOR while IZQPAR exp DERPAR PCOMA
    (62) prin -> . printf IZQPAR STR lexpr DERPAR PCOMA
    (63) prin -> . printf IZQPAR STR DERPAR PCOMA
    (38) decla -> . TYPE ident lacs IGUAL exp
    (39) decla -> . TYPE ident IGUAL exp
    (30) tag -> . ident DP
    (31) gotot -> . goto ident
    (67) ident -> . ID
    (103) TYPE -> . int
    (104) TYPE -> . float
    (105) TYPE -> . char
    (106) TYPE -> . double
    (107) TYPE -> . void

    for             shift and go to state 61
    if              shift and go to state 62
    while           shift and go to state 63
    switch          shift and go to state 64
    do              shift and go to state 65
    printf          shift and go to state 66
    goto            shift and go to state 68
    ID              shift and go to state 44
    int             shift and go to state 7
    float           shift and go to state 8
    char            shift and go to state 9
    double          shift and go to state 10
    void            shift and go to state 11

    linst                          shift and go to state 201
    inst                           shift and go to state 48
    asig                           shift and go to state 49
    para                           shift and go to state 50
    si                             shift and go to state 51
    mientras                       shift and go to state 52
    cual                           shift and go to state 53
    call                           shift and go to state 54
    dow                            shift and go to state 55
    prin                           shift and go to state 56
    decla                          shift and go to state 57
    tag                            shift and go to state 58
    gotot                          shift and go to state 59
    ident                          shift and go to state 60
    TYPE                           shift and go to state 67

state 189

    (55) cual -> switch IZQPAR exp DERPAR IZQCOR . lcase def DERCOR
    (56) lcase -> . lcase caso
    (57) lcase -> . caso
    (58) caso -> . case ID DP linst break PCOMA
    (59) caso -> . case ID DP linst

    case            shift and go to state 204

    lcase                          shift and go to state 202
    caso                           shift and go to state 203

state 190

    (41) dow -> do IZQCOR linst DERCOR while . IZQPAR exp DERPAR PCOMA

    IZQPAR          shift and go to state 205


state 191

    (62) prin -> printf IZQPAR STR lexpr DERPAR . PCOMA

    PCOMA           shift and go to state 206


state 192

    (65) lexpr -> lexpr COMA . exp
    (64) exp -> . scanf IZQPAR DERPAR
    (72) exp -> . exp SUMA exp
    (73) exp -> . exp RESTA exp
    (74) exp -> . exp MULTI exp
    (75) exp -> . exp DIV exp
    (76) exp -> . exp PORCENTAJE exp
    (77) exp -> . exp DIGUAL exp
    (78) exp -> . exp DESIGUAL exp
    (79) exp -> . exp MAYOR exp
    (80) exp -> . exp MENOR exp
    (81) exp -> . exp MAYORIGUAL exp
    (82) exp -> . exp MENORIGUAL exp
    (83) exp -> . exp AND exp
    (84) exp -> . exp OR exp
    (85) exp -> . exp BAND exp
    (86) exp -> . exp BOR exp
    (87) exp -> . exp BXOR exp
    (88) exp -> . exp BLEFT exp
    (89) exp -> . exp BRIGHT exp
    (90) exp -> . RESTA exp
    (91) exp -> . NOT exp
    (92) exp -> . BNOT exp
    (93) exp -> . sizeof exp
    (94) exp -> . IZQPAR exp DERPAR
    (95) exp -> . IZQPAR TYPE DERPAR exp
    (96) exp -> . exp ASK exp DP exp
    (97) exp -> . DOUBLE
    (98) exp -> . INTEGER
    (99) exp -> . ident
    (100) exp -> . ident lacs
    (101) exp -> . STR
    (102) exp -> . IZQCOR lex DERCOR
    (67) ident -> . ID

    scanf           shift and go to state 34
    RESTA           shift and go to state 36
    NOT             shift and go to state 37
    BNOT            shift and go to state 38
    sizeof          shift and go to state 39
    IZQPAR          shift and go to state 35
    DOUBLE          shift and go to state 40
    INTEGER         shift and go to state 41
    STR             shift and go to state 42
    IZQCOR          shift and go to state 43
    ID              shift and go to state 44

    exp                            shift and go to state 207
    ident                          shift and go to state 32

state 193

    (63) prin -> printf IZQPAR STR DERPAR PCOMA .

    DERCOR          reduce using rule 63 (prin -> printf IZQPAR STR DERPAR PCOMA .)
    for             reduce using rule 63 (prin -> printf IZQPAR STR DERPAR PCOMA .)
    if              reduce using rule 63 (prin -> printf IZQPAR STR DERPAR PCOMA .)
    while           reduce using rule 63 (prin -> printf IZQPAR STR DERPAR PCOMA .)
    switch          reduce using rule 63 (prin -> printf IZQPAR STR DERPAR PCOMA .)
    do              reduce using rule 63 (prin -> printf IZQPAR STR DERPAR PCOMA .)
    printf          reduce using rule 63 (prin -> printf IZQPAR STR DERPAR PCOMA .)
    goto            reduce using rule 63 (prin -> printf IZQPAR STR DERPAR PCOMA .)
    ID              reduce using rule 63 (prin -> printf IZQPAR STR DERPAR PCOMA .)
    int             reduce using rule 63 (prin -> printf IZQPAR STR DERPAR PCOMA .)
    float           reduce using rule 63 (prin -> printf IZQPAR STR DERPAR PCOMA .)
    char            reduce using rule 63 (prin -> printf IZQPAR STR DERPAR PCOMA .)
    double          reduce using rule 63 (prin -> printf IZQPAR STR DERPAR PCOMA .)
    void            reduce using rule 63 (prin -> printf IZQPAR STR DERPAR PCOMA .)
    break           reduce using rule 63 (prin -> printf IZQPAR STR DERPAR PCOMA .)
    default         reduce using rule 63 (prin -> printf IZQPAR STR DERPAR PCOMA .)
    case            reduce using rule 63 (prin -> printf IZQPAR STR DERPAR PCOMA .)


state 194

    (66) lexpr -> COMA exp .
    (72) exp -> exp . SUMA exp
    (73) exp -> exp . RESTA exp
    (74) exp -> exp . MULTI exp
    (75) exp -> exp . DIV exp
    (76) exp -> exp . PORCENTAJE exp
    (77) exp -> exp . DIGUAL exp
    (78) exp -> exp . DESIGUAL exp
    (79) exp -> exp . MAYOR exp
    (80) exp -> exp . MENOR exp
    (81) exp -> exp . MAYORIGUAL exp
    (82) exp -> exp . MENORIGUAL exp
    (83) exp -> exp . AND exp
    (84) exp -> exp . OR exp
    (85) exp -> exp . BAND exp
    (86) exp -> exp . BOR exp
    (87) exp -> exp . BXOR exp
    (88) exp -> exp . BLEFT exp
    (89) exp -> exp . BRIGHT exp
    (96) exp -> exp . ASK exp DP exp

    DERPAR          reduce using rule 66 (lexpr -> COMA exp .)
    COMA            reduce using rule 66 (lexpr -> COMA exp .)
    SUMA            shift and go to state 75
    RESTA           shift and go to state 76
    MULTI           shift and go to state 77
    DIV             shift and go to state 78
    PORCENTAJE      shift and go to state 79
    DIGUAL          shift and go to state 80
    DESIGUAL        shift and go to state 81
    MAYOR           shift and go to state 82
    MENOR           shift and go to state 83
    MAYORIGUAL      shift and go to state 84
    MENORIGUAL      shift and go to state 85
    AND             shift and go to state 86
    OR              shift and go to state 87
    BAND            shift and go to state 88
    BOR             shift and go to state 89
    BXOR            shift and go to state 90
    BLEFT           shift and go to state 91
    BRIGHT          shift and go to state 92
    ASK             shift and go to state 93


state 195

    (54) para2 -> exp .
    (72) exp -> exp . SUMA exp
    (73) exp -> exp . RESTA exp
    (74) exp -> exp . MULTI exp
    (75) exp -> exp . DIV exp
    (76) exp -> exp . PORCENTAJE exp
    (77) exp -> exp . DIGUAL exp
    (78) exp -> exp . DESIGUAL exp
    (79) exp -> exp . MAYOR exp
    (80) exp -> exp . MENOR exp
    (81) exp -> exp . MAYORIGUAL exp
    (82) exp -> exp . MENORIGUAL exp
    (83) exp -> exp . AND exp
    (84) exp -> exp . OR exp
    (85) exp -> exp . BAND exp
    (86) exp -> exp . BOR exp
    (87) exp -> exp . BXOR exp
    (88) exp -> exp . BLEFT exp
    (89) exp -> exp . BRIGHT exp
    (96) exp -> exp . ASK exp DP exp

    DERPAR          reduce using rule 54 (para2 -> exp .)
    SUMA            shift and go to state 75
    RESTA           shift and go to state 76
    MULTI           shift and go to state 77
    DIV             shift and go to state 78
    PORCENTAJE      shift and go to state 79
    DIGUAL          shift and go to state 80
    DESIGUAL        shift and go to state 81
    MAYOR           shift and go to state 82
    MENOR           shift and go to state 83
    MAYORIGUAL      shift and go to state 84
    MENORIGUAL      shift and go to state 85
    AND             shift and go to state 86
    OR              shift and go to state 87
    BAND            shift and go to state 88
    BOR             shift and go to state 89
    BXOR            shift and go to state 90
    BLEFT           shift and go to state 91
    BRIGHT          shift and go to state 92
    ASK             shift and go to state 93


state 196

    (49) para -> for IZQPAR para1 exp PCOMA para2 . DERPAR IZQCOR linst DERCOR

    DERPAR          shift and go to state 208


state 197

    (52) para2 -> asig .

    DERPAR          reduce using rule 52 (para2 -> asig .)


state 198

    (53) para2 -> decla .

    DERPAR          reduce using rule 53 (para2 -> decla .)


state 199

    (32) asig -> ident . lacs IGUAL exp
    (33) asig -> ident . IGUAL exp
    (34) asig -> ident . lacs INCE
    (35) asig -> ident . INCE
    (36) asig -> ident . lacs DECRE
    (37) asig -> ident . DECRE
    (99) exp -> ident .
    (100) exp -> ident . lacs
    (68) lacs -> . lacs acs
    (69) lacs -> . acs
    (70) acs -> . IZQLLAVE exp DERLLAVE
    (71) acs -> . PUNTO ID

    IGUAL           shift and go to state 110
    INCE            shift and go to state 111
    DECRE           shift and go to state 112
    SUMA            reduce using rule 99 (exp -> ident .)
    RESTA           reduce using rule 99 (exp -> ident .)
    MULTI           reduce using rule 99 (exp -> ident .)
    DIV             reduce using rule 99 (exp -> ident .)
    PORCENTAJE      reduce using rule 99 (exp -> ident .)
    DIGUAL          reduce using rule 99 (exp -> ident .)
    DESIGUAL        reduce using rule 99 (exp -> ident .)
    MAYOR           reduce using rule 99 (exp -> ident .)
    MENOR           reduce using rule 99 (exp -> ident .)
    MAYORIGUAL      reduce using rule 99 (exp -> ident .)
    MENORIGUAL      reduce using rule 99 (exp -> ident .)
    AND             reduce using rule 99 (exp -> ident .)
    OR              reduce using rule 99 (exp -> ident .)
    BAND            reduce using rule 99 (exp -> ident .)
    BOR             reduce using rule 99 (exp -> ident .)
    BXOR            reduce using rule 99 (exp -> ident .)
    BLEFT           reduce using rule 99 (exp -> ident .)
    BRIGHT          reduce using rule 99 (exp -> ident .)
    ASK             reduce using rule 99 (exp -> ident .)
    DERPAR          reduce using rule 99 (exp -> ident .)
    IZQLLAVE        shift and go to state 23
    PUNTO           shift and go to state 24

    lacs                           shift and go to state 209
    acs                            shift and go to state 22

state 200

    (42) si -> if IZQPAR exp DERPAR IZQCOR linst . DERCOR lelsi els
    (43) si -> if IZQPAR exp DERPAR IZQCOR linst . DERCOR els
    (8) linst -> linst . inst
    (14) inst -> . asig PCOMA
    (15) inst -> . para
    (16) inst -> . si
    (17) inst -> . mientras
    (18) inst -> . cual
    (19) inst -> . call
    (20) inst -> . dow
    (21) inst -> . prin
    (22) inst -> . decla PCOMA
    (23) inst -> . tag
    (24) inst -> . gotot PCOMA
    (32) asig -> . ident lacs IGUAL exp
    (33) asig -> . ident IGUAL exp
    (34) asig -> . ident lacs INCE
    (35) asig -> . ident INCE
    (36) asig -> . ident lacs DECRE
    (37) asig -> . ident DECRE
    (49) para -> . for IZQPAR para1 exp PCOMA para2 DERPAR IZQCOR linst DERCOR
    (42) si -> . if IZQPAR exp DERPAR IZQCOR linst DERCOR lelsi els
    (43) si -> . if IZQPAR exp DERPAR IZQCOR linst DERCOR els
    (40) mientras -> . while IZQPAR exp DERPAR IZQCOR linst DERCOR
    (55) cual -> . switch IZQPAR exp DERPAR IZQCOR lcase def DERCOR
    (25) call -> . ident IZQPAR plex DERPAR PCOMA
    (41) dow -> . do IZQCOR linst DERCOR while IZQPAR exp DERPAR PCOMA
    (62) prin -> . printf IZQPAR STR lexpr DERPAR PCOMA
    (63) prin -> . printf IZQPAR STR DERPAR PCOMA
    (38) decla -> . TYPE ident lacs IGUAL exp
    (39) decla -> . TYPE ident IGUAL exp
    (30) tag -> . ident DP
    (31) gotot -> . goto ident
    (67) ident -> . ID
    (103) TYPE -> . int
    (104) TYPE -> . float
    (105) TYPE -> . char
    (106) TYPE -> . double
    (107) TYPE -> . void

    DERCOR          shift and go to state 210
    for             shift and go to state 61
    if              shift and go to state 62
    while           shift and go to state 63
    switch          shift and go to state 64
    do              shift and go to state 65
    printf          shift and go to state 66
    goto            shift and go to state 68
    ID              shift and go to state 44
    int             shift and go to state 7
    float           shift and go to state 8
    char            shift and go to state 9
    double          shift and go to state 10
    void            shift and go to state 11

    inst                           shift and go to state 105
    asig                           shift and go to state 49
    para                           shift and go to state 50
    si                             shift and go to state 51
    mientras                       shift and go to state 52
    cual                           shift and go to state 53
    call                           shift and go to state 54
    dow                            shift and go to state 55
    prin                           shift and go to state 56
    decla                          shift and go to state 57
    tag                            shift and go to state 58
    gotot                          shift and go to state 59
    ident                          shift and go to state 60
    TYPE                           shift and go to state 67

state 201

    (40) mientras -> while IZQPAR exp DERPAR IZQCOR linst . DERCOR
    (8) linst -> linst . inst
    (14) inst -> . asig PCOMA
    (15) inst -> . para
    (16) inst -> . si
    (17) inst -> . mientras
    (18) inst -> . cual
    (19) inst -> . call
    (20) inst -> . dow
    (21) inst -> . prin
    (22) inst -> . decla PCOMA
    (23) inst -> . tag
    (24) inst -> . gotot PCOMA
    (32) asig -> . ident lacs IGUAL exp
    (33) asig -> . ident IGUAL exp
    (34) asig -> . ident lacs INCE
    (35) asig -> . ident INCE
    (36) asig -> . ident lacs DECRE
    (37) asig -> . ident DECRE
    (49) para -> . for IZQPAR para1 exp PCOMA para2 DERPAR IZQCOR linst DERCOR
    (42) si -> . if IZQPAR exp DERPAR IZQCOR linst DERCOR lelsi els
    (43) si -> . if IZQPAR exp DERPAR IZQCOR linst DERCOR els
    (40) mientras -> . while IZQPAR exp DERPAR IZQCOR linst DERCOR
    (55) cual -> . switch IZQPAR exp DERPAR IZQCOR lcase def DERCOR
    (25) call -> . ident IZQPAR plex DERPAR PCOMA
    (41) dow -> . do IZQCOR linst DERCOR while IZQPAR exp DERPAR PCOMA
    (62) prin -> . printf IZQPAR STR lexpr DERPAR PCOMA
    (63) prin -> . printf IZQPAR STR DERPAR PCOMA
    (38) decla -> . TYPE ident lacs IGUAL exp
    (39) decla -> . TYPE ident IGUAL exp
    (30) tag -> . ident DP
    (31) gotot -> . goto ident
    (67) ident -> . ID
    (103) TYPE -> . int
    (104) TYPE -> . float
    (105) TYPE -> . char
    (106) TYPE -> . double
    (107) TYPE -> . void

    DERCOR          shift and go to state 211
    for             shift and go to state 61
    if              shift and go to state 62
    while           shift and go to state 63
    switch          shift and go to state 64
    do              shift and go to state 65
    printf          shift and go to state 66
    goto            shift and go to state 68
    ID              shift and go to state 44
    int             shift and go to state 7
    float           shift and go to state 8
    char            shift and go to state 9
    double          shift and go to state 10
    void            shift and go to state 11

    inst                           shift and go to state 105
    asig                           shift and go to state 49
    para                           shift and go to state 50
    si                             shift and go to state 51
    mientras                       shift and go to state 52
    cual                           shift and go to state 53
    call                           shift and go to state 54
    dow                            shift and go to state 55
    prin                           shift and go to state 56
    decla                          shift and go to state 57
    tag                            shift and go to state 58
    gotot                          shift and go to state 59
    ident                          shift and go to state 60
    TYPE                           shift and go to state 67

state 202

    (55) cual -> switch IZQPAR exp DERPAR IZQCOR lcase . def DERCOR
    (56) lcase -> lcase . caso
    (60) def -> . default DP linst break PCOMA
    (61) def -> .
    (58) caso -> . case ID DP linst break PCOMA
    (59) caso -> . case ID DP linst

    default         shift and go to state 214
    DERCOR          reduce using rule 61 (def -> .)
    case            shift and go to state 204

    def                            shift and go to state 212
    caso                           shift and go to state 213

state 203

    (57) lcase -> caso .

    default         reduce using rule 57 (lcase -> caso .)
    case            reduce using rule 57 (lcase -> caso .)
    DERCOR          reduce using rule 57 (lcase -> caso .)


state 204

    (58) caso -> case . ID DP linst break PCOMA
    (59) caso -> case . ID DP linst

    ID              shift and go to state 215


state 205

    (41) dow -> do IZQCOR linst DERCOR while IZQPAR . exp DERPAR PCOMA
    (64) exp -> . scanf IZQPAR DERPAR
    (72) exp -> . exp SUMA exp
    (73) exp -> . exp RESTA exp
    (74) exp -> . exp MULTI exp
    (75) exp -> . exp DIV exp
    (76) exp -> . exp PORCENTAJE exp
    (77) exp -> . exp DIGUAL exp
    (78) exp -> . exp DESIGUAL exp
    (79) exp -> . exp MAYOR exp
    (80) exp -> . exp MENOR exp
    (81) exp -> . exp MAYORIGUAL exp
    (82) exp -> . exp MENORIGUAL exp
    (83) exp -> . exp AND exp
    (84) exp -> . exp OR exp
    (85) exp -> . exp BAND exp
    (86) exp -> . exp BOR exp
    (87) exp -> . exp BXOR exp
    (88) exp -> . exp BLEFT exp
    (89) exp -> . exp BRIGHT exp
    (90) exp -> . RESTA exp
    (91) exp -> . NOT exp
    (92) exp -> . BNOT exp
    (93) exp -> . sizeof exp
    (94) exp -> . IZQPAR exp DERPAR
    (95) exp -> . IZQPAR TYPE DERPAR exp
    (96) exp -> . exp ASK exp DP exp
    (97) exp -> . DOUBLE
    (98) exp -> . INTEGER
    (99) exp -> . ident
    (100) exp -> . ident lacs
    (101) exp -> . STR
    (102) exp -> . IZQCOR lex DERCOR
    (67) ident -> . ID

    scanf           shift and go to state 34
    RESTA           shift and go to state 36
    NOT             shift and go to state 37
    BNOT            shift and go to state 38
    sizeof          shift and go to state 39
    IZQPAR          shift and go to state 35
    DOUBLE          shift and go to state 40
    INTEGER         shift and go to state 41
    STR             shift and go to state 42
    IZQCOR          shift and go to state 43
    ID              shift and go to state 44

    exp                            shift and go to state 216
    ident                          shift and go to state 32

state 206

    (62) prin -> printf IZQPAR STR lexpr DERPAR PCOMA .

    DERCOR          reduce using rule 62 (prin -> printf IZQPAR STR lexpr DERPAR PCOMA .)
    for             reduce using rule 62 (prin -> printf IZQPAR STR lexpr DERPAR PCOMA .)
    if              reduce using rule 62 (prin -> printf IZQPAR STR lexpr DERPAR PCOMA .)
    while           reduce using rule 62 (prin -> printf IZQPAR STR lexpr DERPAR PCOMA .)
    switch          reduce using rule 62 (prin -> printf IZQPAR STR lexpr DERPAR PCOMA .)
    do              reduce using rule 62 (prin -> printf IZQPAR STR lexpr DERPAR PCOMA .)
    printf          reduce using rule 62 (prin -> printf IZQPAR STR lexpr DERPAR PCOMA .)
    goto            reduce using rule 62 (prin -> printf IZQPAR STR lexpr DERPAR PCOMA .)
    ID              reduce using rule 62 (prin -> printf IZQPAR STR lexpr DERPAR PCOMA .)
    int             reduce using rule 62 (prin -> printf IZQPAR STR lexpr DERPAR PCOMA .)
    float           reduce using rule 62 (prin -> printf IZQPAR STR lexpr DERPAR PCOMA .)
    char            reduce using rule 62 (prin -> printf IZQPAR STR lexpr DERPAR PCOMA .)
    double          reduce using rule 62 (prin -> printf IZQPAR STR lexpr DERPAR PCOMA .)
    void            reduce using rule 62 (prin -> printf IZQPAR STR lexpr DERPAR PCOMA .)
    break           reduce using rule 62 (prin -> printf IZQPAR STR lexpr DERPAR PCOMA .)
    default         reduce using rule 62 (prin -> printf IZQPAR STR lexpr DERPAR PCOMA .)
    case            reduce using rule 62 (prin -> printf IZQPAR STR lexpr DERPAR PCOMA .)


state 207

    (65) lexpr -> lexpr COMA exp .
    (72) exp -> exp . SUMA exp
    (73) exp -> exp . RESTA exp
    (74) exp -> exp . MULTI exp
    (75) exp -> exp . DIV exp
    (76) exp -> exp . PORCENTAJE exp
    (77) exp -> exp . DIGUAL exp
    (78) exp -> exp . DESIGUAL exp
    (79) exp -> exp . MAYOR exp
    (80) exp -> exp . MENOR exp
    (81) exp -> exp . MAYORIGUAL exp
    (82) exp -> exp . MENORIGUAL exp
    (83) exp -> exp . AND exp
    (84) exp -> exp . OR exp
    (85) exp -> exp . BAND exp
    (86) exp -> exp . BOR exp
    (87) exp -> exp . BXOR exp
    (88) exp -> exp . BLEFT exp
    (89) exp -> exp . BRIGHT exp
    (96) exp -> exp . ASK exp DP exp

    DERPAR          reduce using rule 65 (lexpr -> lexpr COMA exp .)
    COMA            reduce using rule 65 (lexpr -> lexpr COMA exp .)
    SUMA            shift and go to state 75
    RESTA           shift and go to state 76
    MULTI           shift and go to state 77
    DIV             shift and go to state 78
    PORCENTAJE      shift and go to state 79
    DIGUAL          shift and go to state 80
    DESIGUAL        shift and go to state 81
    MAYOR           shift and go to state 82
    MENOR           shift and go to state 83
    MAYORIGUAL      shift and go to state 84
    MENORIGUAL      shift and go to state 85
    AND             shift and go to state 86
    OR              shift and go to state 87
    BAND            shift and go to state 88
    BOR             shift and go to state 89
    BXOR            shift and go to state 90
    BLEFT           shift and go to state 91
    BRIGHT          shift and go to state 92
    ASK             shift and go to state 93


state 208

    (49) para -> for IZQPAR para1 exp PCOMA para2 DERPAR . IZQCOR linst DERCOR

    IZQCOR          shift and go to state 217


state 209

    (32) asig -> ident lacs . IGUAL exp
    (34) asig -> ident lacs . INCE
    (36) asig -> ident lacs . DECRE
    (100) exp -> ident lacs .
    (68) lacs -> lacs . acs
    (70) acs -> . IZQLLAVE exp DERLLAVE
    (71) acs -> . PUNTO ID

    IGUAL           shift and go to state 149
    INCE            shift and go to state 150
    DECRE           shift and go to state 151
    SUMA            reduce using rule 100 (exp -> ident lacs .)
    RESTA           reduce using rule 100 (exp -> ident lacs .)
    MULTI           reduce using rule 100 (exp -> ident lacs .)
    DIV             reduce using rule 100 (exp -> ident lacs .)
    PORCENTAJE      reduce using rule 100 (exp -> ident lacs .)
    DIGUAL          reduce using rule 100 (exp -> ident lacs .)
    DESIGUAL        reduce using rule 100 (exp -> ident lacs .)
    MAYOR           reduce using rule 100 (exp -> ident lacs .)
    MENOR           reduce using rule 100 (exp -> ident lacs .)
    MAYORIGUAL      reduce using rule 100 (exp -> ident lacs .)
    MENORIGUAL      reduce using rule 100 (exp -> ident lacs .)
    AND             reduce using rule 100 (exp -> ident lacs .)
    OR              reduce using rule 100 (exp -> ident lacs .)
    BAND            reduce using rule 100 (exp -> ident lacs .)
    BOR             reduce using rule 100 (exp -> ident lacs .)
    BXOR            reduce using rule 100 (exp -> ident lacs .)
    BLEFT           reduce using rule 100 (exp -> ident lacs .)
    BRIGHT          reduce using rule 100 (exp -> ident lacs .)
    ASK             reduce using rule 100 (exp -> ident lacs .)
    DERPAR          reduce using rule 100 (exp -> ident lacs .)
    IZQLLAVE        shift and go to state 23
    PUNTO           shift and go to state 24

    acs                            shift and go to state 31

state 210

    (42) si -> if IZQPAR exp DERPAR IZQCOR linst DERCOR . lelsi els
    (43) si -> if IZQPAR exp DERPAR IZQCOR linst DERCOR . els
    (44) lelsi -> . lelsi elsi
    (45) lelsi -> . elsi
    (47) els -> . else IZQCOR linst DERCOR
    (48) els -> .
    (46) elsi -> . else if IZQPAR exp DERPAR IZQCOR linst DERCOR

    else            shift and go to state 221
    DERCOR          reduce using rule 48 (els -> .)
    for             reduce using rule 48 (els -> .)
    if              reduce using rule 48 (els -> .)
    while           reduce using rule 48 (els -> .)
    switch          reduce using rule 48 (els -> .)
    do              reduce using rule 48 (els -> .)
    printf          reduce using rule 48 (els -> .)
    goto            reduce using rule 48 (els -> .)
    ID              reduce using rule 48 (els -> .)
    int             reduce using rule 48 (els -> .)
    float           reduce using rule 48 (els -> .)
    char            reduce using rule 48 (els -> .)
    double          reduce using rule 48 (els -> .)
    void            reduce using rule 48 (els -> .)
    break           reduce using rule 48 (els -> .)
    default         reduce using rule 48 (els -> .)
    case            reduce using rule 48 (els -> .)

    lelsi                          shift and go to state 218
    els                            shift and go to state 219
    elsi                           shift and go to state 220

state 211

    (40) mientras -> while IZQPAR exp DERPAR IZQCOR linst DERCOR .

    DERCOR          reduce using rule 40 (mientras -> while IZQPAR exp DERPAR IZQCOR linst DERCOR .)
    for             reduce using rule 40 (mientras -> while IZQPAR exp DERPAR IZQCOR linst DERCOR .)
    if              reduce using rule 40 (mientras -> while IZQPAR exp DERPAR IZQCOR linst DERCOR .)
    while           reduce using rule 40 (mientras -> while IZQPAR exp DERPAR IZQCOR linst DERCOR .)
    switch          reduce using rule 40 (mientras -> while IZQPAR exp DERPAR IZQCOR linst DERCOR .)
    do              reduce using rule 40 (mientras -> while IZQPAR exp DERPAR IZQCOR linst DERCOR .)
    printf          reduce using rule 40 (mientras -> while IZQPAR exp DERPAR IZQCOR linst DERCOR .)
    goto            reduce using rule 40 (mientras -> while IZQPAR exp DERPAR IZQCOR linst DERCOR .)
    ID              reduce using rule 40 (mientras -> while IZQPAR exp DERPAR IZQCOR linst DERCOR .)
    int             reduce using rule 40 (mientras -> while IZQPAR exp DERPAR IZQCOR linst DERCOR .)
    float           reduce using rule 40 (mientras -> while IZQPAR exp DERPAR IZQCOR linst DERCOR .)
    char            reduce using rule 40 (mientras -> while IZQPAR exp DERPAR IZQCOR linst DERCOR .)
    double          reduce using rule 40 (mientras -> while IZQPAR exp DERPAR IZQCOR linst DERCOR .)
    void            reduce using rule 40 (mientras -> while IZQPAR exp DERPAR IZQCOR linst DERCOR .)
    break           reduce using rule 40 (mientras -> while IZQPAR exp DERPAR IZQCOR linst DERCOR .)
    default         reduce using rule 40 (mientras -> while IZQPAR exp DERPAR IZQCOR linst DERCOR .)
    case            reduce using rule 40 (mientras -> while IZQPAR exp DERPAR IZQCOR linst DERCOR .)


state 212

    (55) cual -> switch IZQPAR exp DERPAR IZQCOR lcase def . DERCOR

    DERCOR          shift and go to state 222


state 213

    (56) lcase -> lcase caso .

    default         reduce using rule 56 (lcase -> lcase caso .)
    case            reduce using rule 56 (lcase -> lcase caso .)
    DERCOR          reduce using rule 56 (lcase -> lcase caso .)


state 214

    (60) def -> default . DP linst break PCOMA

    DP              shift and go to state 223


state 215

    (58) caso -> case ID . DP linst break PCOMA
    (59) caso -> case ID . DP linst

    DP              shift and go to state 224


state 216

    (41) dow -> do IZQCOR linst DERCOR while IZQPAR exp . DERPAR PCOMA
    (72) exp -> exp . SUMA exp
    (73) exp -> exp . RESTA exp
    (74) exp -> exp . MULTI exp
    (75) exp -> exp . DIV exp
    (76) exp -> exp . PORCENTAJE exp
    (77) exp -> exp . DIGUAL exp
    (78) exp -> exp . DESIGUAL exp
    (79) exp -> exp . MAYOR exp
    (80) exp -> exp . MENOR exp
    (81) exp -> exp . MAYORIGUAL exp
    (82) exp -> exp . MENORIGUAL exp
    (83) exp -> exp . AND exp
    (84) exp -> exp . OR exp
    (85) exp -> exp . BAND exp
    (86) exp -> exp . BOR exp
    (87) exp -> exp . BXOR exp
    (88) exp -> exp . BLEFT exp
    (89) exp -> exp . BRIGHT exp
    (96) exp -> exp . ASK exp DP exp

    DERPAR          shift and go to state 225
    SUMA            shift and go to state 75
    RESTA           shift and go to state 76
    MULTI           shift and go to state 77
    DIV             shift and go to state 78
    PORCENTAJE      shift and go to state 79
    DIGUAL          shift and go to state 80
    DESIGUAL        shift and go to state 81
    MAYOR           shift and go to state 82
    MENOR           shift and go to state 83
    MAYORIGUAL      shift and go to state 84
    MENORIGUAL      shift and go to state 85
    AND             shift and go to state 86
    OR              shift and go to state 87
    BAND            shift and go to state 88
    BOR             shift and go to state 89
    BXOR            shift and go to state 90
    BLEFT           shift and go to state 91
    BRIGHT          shift and go to state 92
    ASK             shift and go to state 93


state 217

    (49) para -> for IZQPAR para1 exp PCOMA para2 DERPAR IZQCOR . linst DERCOR
    (8) linst -> . linst inst
    (9) linst -> . inst
    (14) inst -> . asig PCOMA
    (15) inst -> . para
    (16) inst -> . si
    (17) inst -> . mientras
    (18) inst -> . cual
    (19) inst -> . call
    (20) inst -> . dow
    (21) inst -> . prin
    (22) inst -> . decla PCOMA
    (23) inst -> . tag
    (24) inst -> . gotot PCOMA
    (32) asig -> . ident lacs IGUAL exp
    (33) asig -> . ident IGUAL exp
    (34) asig -> . ident lacs INCE
    (35) asig -> . ident INCE
    (36) asig -> . ident lacs DECRE
    (37) asig -> . ident DECRE
    (49) para -> . for IZQPAR para1 exp PCOMA para2 DERPAR IZQCOR linst DERCOR
    (42) si -> . if IZQPAR exp DERPAR IZQCOR linst DERCOR lelsi els
    (43) si -> . if IZQPAR exp DERPAR IZQCOR linst DERCOR els
    (40) mientras -> . while IZQPAR exp DERPAR IZQCOR linst DERCOR
    (55) cual -> . switch IZQPAR exp DERPAR IZQCOR lcase def DERCOR
    (25) call -> . ident IZQPAR plex DERPAR PCOMA
    (41) dow -> . do IZQCOR linst DERCOR while IZQPAR exp DERPAR PCOMA
    (62) prin -> . printf IZQPAR STR lexpr DERPAR PCOMA
    (63) prin -> . printf IZQPAR STR DERPAR PCOMA
    (38) decla -> . TYPE ident lacs IGUAL exp
    (39) decla -> . TYPE ident IGUAL exp
    (30) tag -> . ident DP
    (31) gotot -> . goto ident
    (67) ident -> . ID
    (103) TYPE -> . int
    (104) TYPE -> . float
    (105) TYPE -> . char
    (106) TYPE -> . double
    (107) TYPE -> . void

    for             shift and go to state 61
    if              shift and go to state 62
    while           shift and go to state 63
    switch          shift and go to state 64
    do              shift and go to state 65
    printf          shift and go to state 66
    goto            shift and go to state 68
    ID              shift and go to state 44
    int             shift and go to state 7
    float           shift and go to state 8
    char            shift and go to state 9
    double          shift and go to state 10
    void            shift and go to state 11

    linst                          shift and go to state 226
    inst                           shift and go to state 48
    asig                           shift and go to state 49
    para                           shift and go to state 50
    si                             shift and go to state 51
    mientras                       shift and go to state 52
    cual                           shift and go to state 53
    call                           shift and go to state 54
    dow                            shift and go to state 55
    prin                           shift and go to state 56
    decla                          shift and go to state 57
    tag                            shift and go to state 58
    gotot                          shift and go to state 59
    ident                          shift and go to state 60
    TYPE                           shift and go to state 67

state 218

    (42) si -> if IZQPAR exp DERPAR IZQCOR linst DERCOR lelsi . els
    (44) lelsi -> lelsi . elsi
    (47) els -> . else IZQCOR linst DERCOR
    (48) els -> .
    (46) elsi -> . else if IZQPAR exp DERPAR IZQCOR linst DERCOR

    else            shift and go to state 221
    DERCOR          reduce using rule 48 (els -> .)
    for             reduce using rule 48 (els -> .)
    if              reduce using rule 48 (els -> .)
    while           reduce using rule 48 (els -> .)
    switch          reduce using rule 48 (els -> .)
    do              reduce using rule 48 (els -> .)
    printf          reduce using rule 48 (els -> .)
    goto            reduce using rule 48 (els -> .)
    ID              reduce using rule 48 (els -> .)
    int             reduce using rule 48 (els -> .)
    float           reduce using rule 48 (els -> .)
    char            reduce using rule 48 (els -> .)
    double          reduce using rule 48 (els -> .)
    void            reduce using rule 48 (els -> .)
    break           reduce using rule 48 (els -> .)
    default         reduce using rule 48 (els -> .)
    case            reduce using rule 48 (els -> .)

    els                            shift and go to state 227
    elsi                           shift and go to state 228

state 219

    (43) si -> if IZQPAR exp DERPAR IZQCOR linst DERCOR els .

    DERCOR          reduce using rule 43 (si -> if IZQPAR exp DERPAR IZQCOR linst DERCOR els .)
    for             reduce using rule 43 (si -> if IZQPAR exp DERPAR IZQCOR linst DERCOR els .)
    if              reduce using rule 43 (si -> if IZQPAR exp DERPAR IZQCOR linst DERCOR els .)
    while           reduce using rule 43 (si -> if IZQPAR exp DERPAR IZQCOR linst DERCOR els .)
    switch          reduce using rule 43 (si -> if IZQPAR exp DERPAR IZQCOR linst DERCOR els .)
    do              reduce using rule 43 (si -> if IZQPAR exp DERPAR IZQCOR linst DERCOR els .)
    printf          reduce using rule 43 (si -> if IZQPAR exp DERPAR IZQCOR linst DERCOR els .)
    goto            reduce using rule 43 (si -> if IZQPAR exp DERPAR IZQCOR linst DERCOR els .)
    ID              reduce using rule 43 (si -> if IZQPAR exp DERPAR IZQCOR linst DERCOR els .)
    int             reduce using rule 43 (si -> if IZQPAR exp DERPAR IZQCOR linst DERCOR els .)
    float           reduce using rule 43 (si -> if IZQPAR exp DERPAR IZQCOR linst DERCOR els .)
    char            reduce using rule 43 (si -> if IZQPAR exp DERPAR IZQCOR linst DERCOR els .)
    double          reduce using rule 43 (si -> if IZQPAR exp DERPAR IZQCOR linst DERCOR els .)
    void            reduce using rule 43 (si -> if IZQPAR exp DERPAR IZQCOR linst DERCOR els .)
    break           reduce using rule 43 (si -> if IZQPAR exp DERPAR IZQCOR linst DERCOR els .)
    default         reduce using rule 43 (si -> if IZQPAR exp DERPAR IZQCOR linst DERCOR els .)
    case            reduce using rule 43 (si -> if IZQPAR exp DERPAR IZQCOR linst DERCOR els .)


state 220

    (45) lelsi -> elsi .

    else            reduce using rule 45 (lelsi -> elsi .)
    DERCOR          reduce using rule 45 (lelsi -> elsi .)
    for             reduce using rule 45 (lelsi -> elsi .)
    if              reduce using rule 45 (lelsi -> elsi .)
    while           reduce using rule 45 (lelsi -> elsi .)
    switch          reduce using rule 45 (lelsi -> elsi .)
    do              reduce using rule 45 (lelsi -> elsi .)
    printf          reduce using rule 45 (lelsi -> elsi .)
    goto            reduce using rule 45 (lelsi -> elsi .)
    ID              reduce using rule 45 (lelsi -> elsi .)
    int             reduce using rule 45 (lelsi -> elsi .)
    float           reduce using rule 45 (lelsi -> elsi .)
    char            reduce using rule 45 (lelsi -> elsi .)
    double          reduce using rule 45 (lelsi -> elsi .)
    void            reduce using rule 45 (lelsi -> elsi .)
    break           reduce using rule 45 (lelsi -> elsi .)
    default         reduce using rule 45 (lelsi -> elsi .)
    case            reduce using rule 45 (lelsi -> elsi .)


state 221

    (47) els -> else . IZQCOR linst DERCOR
    (46) elsi -> else . if IZQPAR exp DERPAR IZQCOR linst DERCOR

    IZQCOR          shift and go to state 229
    if              shift and go to state 230


state 222

    (55) cual -> switch IZQPAR exp DERPAR IZQCOR lcase def DERCOR .

    DERCOR          reduce using rule 55 (cual -> switch IZQPAR exp DERPAR IZQCOR lcase def DERCOR .)
    for             reduce using rule 55 (cual -> switch IZQPAR exp DERPAR IZQCOR lcase def DERCOR .)
    if              reduce using rule 55 (cual -> switch IZQPAR exp DERPAR IZQCOR lcase def DERCOR .)
    while           reduce using rule 55 (cual -> switch IZQPAR exp DERPAR IZQCOR lcase def DERCOR .)
    switch          reduce using rule 55 (cual -> switch IZQPAR exp DERPAR IZQCOR lcase def DERCOR .)
    do              reduce using rule 55 (cual -> switch IZQPAR exp DERPAR IZQCOR lcase def DERCOR .)
    printf          reduce using rule 55 (cual -> switch IZQPAR exp DERPAR IZQCOR lcase def DERCOR .)
    goto            reduce using rule 55 (cual -> switch IZQPAR exp DERPAR IZQCOR lcase def DERCOR .)
    ID              reduce using rule 55 (cual -> switch IZQPAR exp DERPAR IZQCOR lcase def DERCOR .)
    int             reduce using rule 55 (cual -> switch IZQPAR exp DERPAR IZQCOR lcase def DERCOR .)
    float           reduce using rule 55 (cual -> switch IZQPAR exp DERPAR IZQCOR lcase def DERCOR .)
    char            reduce using rule 55 (cual -> switch IZQPAR exp DERPAR IZQCOR lcase def DERCOR .)
    double          reduce using rule 55 (cual -> switch IZQPAR exp DERPAR IZQCOR lcase def DERCOR .)
    void            reduce using rule 55 (cual -> switch IZQPAR exp DERPAR IZQCOR lcase def DERCOR .)
    break           reduce using rule 55 (cual -> switch IZQPAR exp DERPAR IZQCOR lcase def DERCOR .)
    default         reduce using rule 55 (cual -> switch IZQPAR exp DERPAR IZQCOR lcase def DERCOR .)
    case            reduce using rule 55 (cual -> switch IZQPAR exp DERPAR IZQCOR lcase def DERCOR .)


state 223

    (60) def -> default DP . linst break PCOMA
    (8) linst -> . linst inst
    (9) linst -> . inst
    (14) inst -> . asig PCOMA
    (15) inst -> . para
    (16) inst -> . si
    (17) inst -> . mientras
    (18) inst -> . cual
    (19) inst -> . call
    (20) inst -> . dow
    (21) inst -> . prin
    (22) inst -> . decla PCOMA
    (23) inst -> . tag
    (24) inst -> . gotot PCOMA
    (32) asig -> . ident lacs IGUAL exp
    (33) asig -> . ident IGUAL exp
    (34) asig -> . ident lacs INCE
    (35) asig -> . ident INCE
    (36) asig -> . ident lacs DECRE
    (37) asig -> . ident DECRE
    (49) para -> . for IZQPAR para1 exp PCOMA para2 DERPAR IZQCOR linst DERCOR
    (42) si -> . if IZQPAR exp DERPAR IZQCOR linst DERCOR lelsi els
    (43) si -> . if IZQPAR exp DERPAR IZQCOR linst DERCOR els
    (40) mientras -> . while IZQPAR exp DERPAR IZQCOR linst DERCOR
    (55) cual -> . switch IZQPAR exp DERPAR IZQCOR lcase def DERCOR
    (25) call -> . ident IZQPAR plex DERPAR PCOMA
    (41) dow -> . do IZQCOR linst DERCOR while IZQPAR exp DERPAR PCOMA
    (62) prin -> . printf IZQPAR STR lexpr DERPAR PCOMA
    (63) prin -> . printf IZQPAR STR DERPAR PCOMA
    (38) decla -> . TYPE ident lacs IGUAL exp
    (39) decla -> . TYPE ident IGUAL exp
    (30) tag -> . ident DP
    (31) gotot -> . goto ident
    (67) ident -> . ID
    (103) TYPE -> . int
    (104) TYPE -> . float
    (105) TYPE -> . char
    (106) TYPE -> . double
    (107) TYPE -> . void

    for             shift and go to state 61
    if              shift and go to state 62
    while           shift and go to state 63
    switch          shift and go to state 64
    do              shift and go to state 65
    printf          shift and go to state 66
    goto            shift and go to state 68
    ID              shift and go to state 44
    int             shift and go to state 7
    float           shift and go to state 8
    char            shift and go to state 9
    double          shift and go to state 10
    void            shift and go to state 11

    linst                          shift and go to state 231
    inst                           shift and go to state 48
    asig                           shift and go to state 49
    para                           shift and go to state 50
    si                             shift and go to state 51
    mientras                       shift and go to state 52
    cual                           shift and go to state 53
    call                           shift and go to state 54
    dow                            shift and go to state 55
    prin                           shift and go to state 56
    decla                          shift and go to state 57
    tag                            shift and go to state 58
    gotot                          shift and go to state 59
    ident                          shift and go to state 60
    TYPE                           shift and go to state 67

state 224

    (58) caso -> case ID DP . linst break PCOMA
    (59) caso -> case ID DP . linst
    (8) linst -> . linst inst
    (9) linst -> . inst
    (14) inst -> . asig PCOMA
    (15) inst -> . para
    (16) inst -> . si
    (17) inst -> . mientras
    (18) inst -> . cual
    (19) inst -> . call
    (20) inst -> . dow
    (21) inst -> . prin
    (22) inst -> . decla PCOMA
    (23) inst -> . tag
    (24) inst -> . gotot PCOMA
    (32) asig -> . ident lacs IGUAL exp
    (33) asig -> . ident IGUAL exp
    (34) asig -> . ident lacs INCE
    (35) asig -> . ident INCE
    (36) asig -> . ident lacs DECRE
    (37) asig -> . ident DECRE
    (49) para -> . for IZQPAR para1 exp PCOMA para2 DERPAR IZQCOR linst DERCOR
    (42) si -> . if IZQPAR exp DERPAR IZQCOR linst DERCOR lelsi els
    (43) si -> . if IZQPAR exp DERPAR IZQCOR linst DERCOR els
    (40) mientras -> . while IZQPAR exp DERPAR IZQCOR linst DERCOR
    (55) cual -> . switch IZQPAR exp DERPAR IZQCOR lcase def DERCOR
    (25) call -> . ident IZQPAR plex DERPAR PCOMA
    (41) dow -> . do IZQCOR linst DERCOR while IZQPAR exp DERPAR PCOMA
    (62) prin -> . printf IZQPAR STR lexpr DERPAR PCOMA
    (63) prin -> . printf IZQPAR STR DERPAR PCOMA
    (38) decla -> . TYPE ident lacs IGUAL exp
    (39) decla -> . TYPE ident IGUAL exp
    (30) tag -> . ident DP
    (31) gotot -> . goto ident
    (67) ident -> . ID
    (103) TYPE -> . int
    (104) TYPE -> . float
    (105) TYPE -> . char
    (106) TYPE -> . double
    (107) TYPE -> . void

    for             shift and go to state 61
    if              shift and go to state 62
    while           shift and go to state 63
    switch          shift and go to state 64
    do              shift and go to state 65
    printf          shift and go to state 66
    goto            shift and go to state 68
    ID              shift and go to state 44
    int             shift and go to state 7
    float           shift and go to state 8
    char            shift and go to state 9
    double          shift and go to state 10
    void            shift and go to state 11

    linst                          shift and go to state 232
    inst                           shift and go to state 48
    asig                           shift and go to state 49
    para                           shift and go to state 50
    si                             shift and go to state 51
    mientras                       shift and go to state 52
    cual                           shift and go to state 53
    call                           shift and go to state 54
    dow                            shift and go to state 55
    prin                           shift and go to state 56
    decla                          shift and go to state 57
    tag                            shift and go to state 58
    gotot                          shift and go to state 59
    ident                          shift and go to state 60
    TYPE                           shift and go to state 67

state 225

    (41) dow -> do IZQCOR linst DERCOR while IZQPAR exp DERPAR . PCOMA

    PCOMA           shift and go to state 233


state 226

    (49) para -> for IZQPAR para1 exp PCOMA para2 DERPAR IZQCOR linst . DERCOR
    (8) linst -> linst . inst
    (14) inst -> . asig PCOMA
    (15) inst -> . para
    (16) inst -> . si
    (17) inst -> . mientras
    (18) inst -> . cual
    (19) inst -> . call
    (20) inst -> . dow
    (21) inst -> . prin
    (22) inst -> . decla PCOMA
    (23) inst -> . tag
    (24) inst -> . gotot PCOMA
    (32) asig -> . ident lacs IGUAL exp
    (33) asig -> . ident IGUAL exp
    (34) asig -> . ident lacs INCE
    (35) asig -> . ident INCE
    (36) asig -> . ident lacs DECRE
    (37) asig -> . ident DECRE
    (49) para -> . for IZQPAR para1 exp PCOMA para2 DERPAR IZQCOR linst DERCOR
    (42) si -> . if IZQPAR exp DERPAR IZQCOR linst DERCOR lelsi els
    (43) si -> . if IZQPAR exp DERPAR IZQCOR linst DERCOR els
    (40) mientras -> . while IZQPAR exp DERPAR IZQCOR linst DERCOR
    (55) cual -> . switch IZQPAR exp DERPAR IZQCOR lcase def DERCOR
    (25) call -> . ident IZQPAR plex DERPAR PCOMA
    (41) dow -> . do IZQCOR linst DERCOR while IZQPAR exp DERPAR PCOMA
    (62) prin -> . printf IZQPAR STR lexpr DERPAR PCOMA
    (63) prin -> . printf IZQPAR STR DERPAR PCOMA
    (38) decla -> . TYPE ident lacs IGUAL exp
    (39) decla -> . TYPE ident IGUAL exp
    (30) tag -> . ident DP
    (31) gotot -> . goto ident
    (67) ident -> . ID
    (103) TYPE -> . int
    (104) TYPE -> . float
    (105) TYPE -> . char
    (106) TYPE -> . double
    (107) TYPE -> . void

    DERCOR          shift and go to state 234
    for             shift and go to state 61
    if              shift and go to state 62
    while           shift and go to state 63
    switch          shift and go to state 64
    do              shift and go to state 65
    printf          shift and go to state 66
    goto            shift and go to state 68
    ID              shift and go to state 44
    int             shift and go to state 7
    float           shift and go to state 8
    char            shift and go to state 9
    double          shift and go to state 10
    void            shift and go to state 11

    inst                           shift and go to state 105
    asig                           shift and go to state 49
    para                           shift and go to state 50
    si                             shift and go to state 51
    mientras                       shift and go to state 52
    cual                           shift and go to state 53
    call                           shift and go to state 54
    dow                            shift and go to state 55
    prin                           shift and go to state 56
    decla                          shift and go to state 57
    tag                            shift and go to state 58
    gotot                          shift and go to state 59
    ident                          shift and go to state 60
    TYPE                           shift and go to state 67

state 227

    (42) si -> if IZQPAR exp DERPAR IZQCOR linst DERCOR lelsi els .

    DERCOR          reduce using rule 42 (si -> if IZQPAR exp DERPAR IZQCOR linst DERCOR lelsi els .)
    for             reduce using rule 42 (si -> if IZQPAR exp DERPAR IZQCOR linst DERCOR lelsi els .)
    if              reduce using rule 42 (si -> if IZQPAR exp DERPAR IZQCOR linst DERCOR lelsi els .)
    while           reduce using rule 42 (si -> if IZQPAR exp DERPAR IZQCOR linst DERCOR lelsi els .)
    switch          reduce using rule 42 (si -> if IZQPAR exp DERPAR IZQCOR linst DERCOR lelsi els .)
    do              reduce using rule 42 (si -> if IZQPAR exp DERPAR IZQCOR linst DERCOR lelsi els .)
    printf          reduce using rule 42 (si -> if IZQPAR exp DERPAR IZQCOR linst DERCOR lelsi els .)
    goto            reduce using rule 42 (si -> if IZQPAR exp DERPAR IZQCOR linst DERCOR lelsi els .)
    ID              reduce using rule 42 (si -> if IZQPAR exp DERPAR IZQCOR linst DERCOR lelsi els .)
    int             reduce using rule 42 (si -> if IZQPAR exp DERPAR IZQCOR linst DERCOR lelsi els .)
    float           reduce using rule 42 (si -> if IZQPAR exp DERPAR IZQCOR linst DERCOR lelsi els .)
    char            reduce using rule 42 (si -> if IZQPAR exp DERPAR IZQCOR linst DERCOR lelsi els .)
    double          reduce using rule 42 (si -> if IZQPAR exp DERPAR IZQCOR linst DERCOR lelsi els .)
    void            reduce using rule 42 (si -> if IZQPAR exp DERPAR IZQCOR linst DERCOR lelsi els .)
    break           reduce using rule 42 (si -> if IZQPAR exp DERPAR IZQCOR linst DERCOR lelsi els .)
    default         reduce using rule 42 (si -> if IZQPAR exp DERPAR IZQCOR linst DERCOR lelsi els .)
    case            reduce using rule 42 (si -> if IZQPAR exp DERPAR IZQCOR linst DERCOR lelsi els .)


state 228

    (44) lelsi -> lelsi elsi .

    else            reduce using rule 44 (lelsi -> lelsi elsi .)
    DERCOR          reduce using rule 44 (lelsi -> lelsi elsi .)
    for             reduce using rule 44 (lelsi -> lelsi elsi .)
    if              reduce using rule 44 (lelsi -> lelsi elsi .)
    while           reduce using rule 44 (lelsi -> lelsi elsi .)
    switch          reduce using rule 44 (lelsi -> lelsi elsi .)
    do              reduce using rule 44 (lelsi -> lelsi elsi .)
    printf          reduce using rule 44 (lelsi -> lelsi elsi .)
    goto            reduce using rule 44 (lelsi -> lelsi elsi .)
    ID              reduce using rule 44 (lelsi -> lelsi elsi .)
    int             reduce using rule 44 (lelsi -> lelsi elsi .)
    float           reduce using rule 44 (lelsi -> lelsi elsi .)
    char            reduce using rule 44 (lelsi -> lelsi elsi .)
    double          reduce using rule 44 (lelsi -> lelsi elsi .)
    void            reduce using rule 44 (lelsi -> lelsi elsi .)
    break           reduce using rule 44 (lelsi -> lelsi elsi .)
    default         reduce using rule 44 (lelsi -> lelsi elsi .)
    case            reduce using rule 44 (lelsi -> lelsi elsi .)


state 229

    (47) els -> else IZQCOR . linst DERCOR
    (8) linst -> . linst inst
    (9) linst -> . inst
    (14) inst -> . asig PCOMA
    (15) inst -> . para
    (16) inst -> . si
    (17) inst -> . mientras
    (18) inst -> . cual
    (19) inst -> . call
    (20) inst -> . dow
    (21) inst -> . prin
    (22) inst -> . decla PCOMA
    (23) inst -> . tag
    (24) inst -> . gotot PCOMA
    (32) asig -> . ident lacs IGUAL exp
    (33) asig -> . ident IGUAL exp
    (34) asig -> . ident lacs INCE
    (35) asig -> . ident INCE
    (36) asig -> . ident lacs DECRE
    (37) asig -> . ident DECRE
    (49) para -> . for IZQPAR para1 exp PCOMA para2 DERPAR IZQCOR linst DERCOR
    (42) si -> . if IZQPAR exp DERPAR IZQCOR linst DERCOR lelsi els
    (43) si -> . if IZQPAR exp DERPAR IZQCOR linst DERCOR els
    (40) mientras -> . while IZQPAR exp DERPAR IZQCOR linst DERCOR
    (55) cual -> . switch IZQPAR exp DERPAR IZQCOR lcase def DERCOR
    (25) call -> . ident IZQPAR plex DERPAR PCOMA
    (41) dow -> . do IZQCOR linst DERCOR while IZQPAR exp DERPAR PCOMA
    (62) prin -> . printf IZQPAR STR lexpr DERPAR PCOMA
    (63) prin -> . printf IZQPAR STR DERPAR PCOMA
    (38) decla -> . TYPE ident lacs IGUAL exp
    (39) decla -> . TYPE ident IGUAL exp
    (30) tag -> . ident DP
    (31) gotot -> . goto ident
    (67) ident -> . ID
    (103) TYPE -> . int
    (104) TYPE -> . float
    (105) TYPE -> . char
    (106) TYPE -> . double
    (107) TYPE -> . void

    for             shift and go to state 61
    if              shift and go to state 62
    while           shift and go to state 63
    switch          shift and go to state 64
    do              shift and go to state 65
    printf          shift and go to state 66
    goto            shift and go to state 68
    ID              shift and go to state 44
    int             shift and go to state 7
    float           shift and go to state 8
    char            shift and go to state 9
    double          shift and go to state 10
    void            shift and go to state 11

    linst                          shift and go to state 235
    inst                           shift and go to state 48
    asig                           shift and go to state 49
    para                           shift and go to state 50
    si                             shift and go to state 51
    mientras                       shift and go to state 52
    cual                           shift and go to state 53
    call                           shift and go to state 54
    dow                            shift and go to state 55
    prin                           shift and go to state 56
    decla                          shift and go to state 57
    tag                            shift and go to state 58
    gotot                          shift and go to state 59
    ident                          shift and go to state 60
    TYPE                           shift and go to state 67

state 230

    (46) elsi -> else if . IZQPAR exp DERPAR IZQCOR linst DERCOR

    IZQPAR          shift and go to state 236


state 231

    (60) def -> default DP linst . break PCOMA
    (8) linst -> linst . inst
    (14) inst -> . asig PCOMA
    (15) inst -> . para
    (16) inst -> . si
    (17) inst -> . mientras
    (18) inst -> . cual
    (19) inst -> . call
    (20) inst -> . dow
    (21) inst -> . prin
    (22) inst -> . decla PCOMA
    (23) inst -> . tag
    (24) inst -> . gotot PCOMA
    (32) asig -> . ident lacs IGUAL exp
    (33) asig -> . ident IGUAL exp
    (34) asig -> . ident lacs INCE
    (35) asig -> . ident INCE
    (36) asig -> . ident lacs DECRE
    (37) asig -> . ident DECRE
    (49) para -> . for IZQPAR para1 exp PCOMA para2 DERPAR IZQCOR linst DERCOR
    (42) si -> . if IZQPAR exp DERPAR IZQCOR linst DERCOR lelsi els
    (43) si -> . if IZQPAR exp DERPAR IZQCOR linst DERCOR els
    (40) mientras -> . while IZQPAR exp DERPAR IZQCOR linst DERCOR
    (55) cual -> . switch IZQPAR exp DERPAR IZQCOR lcase def DERCOR
    (25) call -> . ident IZQPAR plex DERPAR PCOMA
    (41) dow -> . do IZQCOR linst DERCOR while IZQPAR exp DERPAR PCOMA
    (62) prin -> . printf IZQPAR STR lexpr DERPAR PCOMA
    (63) prin -> . printf IZQPAR STR DERPAR PCOMA
    (38) decla -> . TYPE ident lacs IGUAL exp
    (39) decla -> . TYPE ident IGUAL exp
    (30) tag -> . ident DP
    (31) gotot -> . goto ident
    (67) ident -> . ID
    (103) TYPE -> . int
    (104) TYPE -> . float
    (105) TYPE -> . char
    (106) TYPE -> . double
    (107) TYPE -> . void

    break           shift and go to state 237
    for             shift and go to state 61
    if              shift and go to state 62
    while           shift and go to state 63
    switch          shift and go to state 64
    do              shift and go to state 65
    printf          shift and go to state 66
    goto            shift and go to state 68
    ID              shift and go to state 44
    int             shift and go to state 7
    float           shift and go to state 8
    char            shift and go to state 9
    double          shift and go to state 10
    void            shift and go to state 11

    inst                           shift and go to state 105
    asig                           shift and go to state 49
    para                           shift and go to state 50
    si                             shift and go to state 51
    mientras                       shift and go to state 52
    cual                           shift and go to state 53
    call                           shift and go to state 54
    dow                            shift and go to state 55
    prin                           shift and go to state 56
    decla                          shift and go to state 57
    tag                            shift and go to state 58
    gotot                          shift and go to state 59
    ident                          shift and go to state 60
    TYPE                           shift and go to state 67

state 232

    (58) caso -> case ID DP linst . break PCOMA
    (59) caso -> case ID DP linst .
    (8) linst -> linst . inst
    (14) inst -> . asig PCOMA
    (15) inst -> . para
    (16) inst -> . si
    (17) inst -> . mientras
    (18) inst -> . cual
    (19) inst -> . call
    (20) inst -> . dow
    (21) inst -> . prin
    (22) inst -> . decla PCOMA
    (23) inst -> . tag
    (24) inst -> . gotot PCOMA
    (32) asig -> . ident lacs IGUAL exp
    (33) asig -> . ident IGUAL exp
    (34) asig -> . ident lacs INCE
    (35) asig -> . ident INCE
    (36) asig -> . ident lacs DECRE
    (37) asig -> . ident DECRE
    (49) para -> . for IZQPAR para1 exp PCOMA para2 DERPAR IZQCOR linst DERCOR
    (42) si -> . if IZQPAR exp DERPAR IZQCOR linst DERCOR lelsi els
    (43) si -> . if IZQPAR exp DERPAR IZQCOR linst DERCOR els
    (40) mientras -> . while IZQPAR exp DERPAR IZQCOR linst DERCOR
    (55) cual -> . switch IZQPAR exp DERPAR IZQCOR lcase def DERCOR
    (25) call -> . ident IZQPAR plex DERPAR PCOMA
    (41) dow -> . do IZQCOR linst DERCOR while IZQPAR exp DERPAR PCOMA
    (62) prin -> . printf IZQPAR STR lexpr DERPAR PCOMA
    (63) prin -> . printf IZQPAR STR DERPAR PCOMA
    (38) decla -> . TYPE ident lacs IGUAL exp
    (39) decla -> . TYPE ident IGUAL exp
    (30) tag -> . ident DP
    (31) gotot -> . goto ident
    (67) ident -> . ID
    (103) TYPE -> . int
    (104) TYPE -> . float
    (105) TYPE -> . char
    (106) TYPE -> . double
    (107) TYPE -> . void

    break           shift and go to state 238
    default         reduce using rule 59 (caso -> case ID DP linst .)
    case            reduce using rule 59 (caso -> case ID DP linst .)
    DERCOR          reduce using rule 59 (caso -> case ID DP linst .)
    for             shift and go to state 61
    if              shift and go to state 62
    while           shift and go to state 63
    switch          shift and go to state 64
    do              shift and go to state 65
    printf          shift and go to state 66
    goto            shift and go to state 68
    ID              shift and go to state 44
    int             shift and go to state 7
    float           shift and go to state 8
    char            shift and go to state 9
    double          shift and go to state 10
    void            shift and go to state 11

    inst                           shift and go to state 105
    asig                           shift and go to state 49
    para                           shift and go to state 50
    si                             shift and go to state 51
    mientras                       shift and go to state 52
    cual                           shift and go to state 53
    call                           shift and go to state 54
    dow                            shift and go to state 55
    prin                           shift and go to state 56
    decla                          shift and go to state 57
    tag                            shift and go to state 58
    gotot                          shift and go to state 59
    ident                          shift and go to state 60
    TYPE                           shift and go to state 67

state 233

    (41) dow -> do IZQCOR linst DERCOR while IZQPAR exp DERPAR PCOMA .

    DERCOR          reduce using rule 41 (dow -> do IZQCOR linst DERCOR while IZQPAR exp DERPAR PCOMA .)
    for             reduce using rule 41 (dow -> do IZQCOR linst DERCOR while IZQPAR exp DERPAR PCOMA .)
    if              reduce using rule 41 (dow -> do IZQCOR linst DERCOR while IZQPAR exp DERPAR PCOMA .)
    while           reduce using rule 41 (dow -> do IZQCOR linst DERCOR while IZQPAR exp DERPAR PCOMA .)
    switch          reduce using rule 41 (dow -> do IZQCOR linst DERCOR while IZQPAR exp DERPAR PCOMA .)
    do              reduce using rule 41 (dow -> do IZQCOR linst DERCOR while IZQPAR exp DERPAR PCOMA .)
    printf          reduce using rule 41 (dow -> do IZQCOR linst DERCOR while IZQPAR exp DERPAR PCOMA .)
    goto            reduce using rule 41 (dow -> do IZQCOR linst DERCOR while IZQPAR exp DERPAR PCOMA .)
    ID              reduce using rule 41 (dow -> do IZQCOR linst DERCOR while IZQPAR exp DERPAR PCOMA .)
    int             reduce using rule 41 (dow -> do IZQCOR linst DERCOR while IZQPAR exp DERPAR PCOMA .)
    float           reduce using rule 41 (dow -> do IZQCOR linst DERCOR while IZQPAR exp DERPAR PCOMA .)
    char            reduce using rule 41 (dow -> do IZQCOR linst DERCOR while IZQPAR exp DERPAR PCOMA .)
    double          reduce using rule 41 (dow -> do IZQCOR linst DERCOR while IZQPAR exp DERPAR PCOMA .)
    void            reduce using rule 41 (dow -> do IZQCOR linst DERCOR while IZQPAR exp DERPAR PCOMA .)
    break           reduce using rule 41 (dow -> do IZQCOR linst DERCOR while IZQPAR exp DERPAR PCOMA .)
    default         reduce using rule 41 (dow -> do IZQCOR linst DERCOR while IZQPAR exp DERPAR PCOMA .)
    case            reduce using rule 41 (dow -> do IZQCOR linst DERCOR while IZQPAR exp DERPAR PCOMA .)


state 234

    (49) para -> for IZQPAR para1 exp PCOMA para2 DERPAR IZQCOR linst DERCOR .

    DERCOR          reduce using rule 49 (para -> for IZQPAR para1 exp PCOMA para2 DERPAR IZQCOR linst DERCOR .)
    for             reduce using rule 49 (para -> for IZQPAR para1 exp PCOMA para2 DERPAR IZQCOR linst DERCOR .)
    if              reduce using rule 49 (para -> for IZQPAR para1 exp PCOMA para2 DERPAR IZQCOR linst DERCOR .)
    while           reduce using rule 49 (para -> for IZQPAR para1 exp PCOMA para2 DERPAR IZQCOR linst DERCOR .)
    switch          reduce using rule 49 (para -> for IZQPAR para1 exp PCOMA para2 DERPAR IZQCOR linst DERCOR .)
    do              reduce using rule 49 (para -> for IZQPAR para1 exp PCOMA para2 DERPAR IZQCOR linst DERCOR .)
    printf          reduce using rule 49 (para -> for IZQPAR para1 exp PCOMA para2 DERPAR IZQCOR linst DERCOR .)
    goto            reduce using rule 49 (para -> for IZQPAR para1 exp PCOMA para2 DERPAR IZQCOR linst DERCOR .)
    ID              reduce using rule 49 (para -> for IZQPAR para1 exp PCOMA para2 DERPAR IZQCOR linst DERCOR .)
    int             reduce using rule 49 (para -> for IZQPAR para1 exp PCOMA para2 DERPAR IZQCOR linst DERCOR .)
    float           reduce using rule 49 (para -> for IZQPAR para1 exp PCOMA para2 DERPAR IZQCOR linst DERCOR .)
    char            reduce using rule 49 (para -> for IZQPAR para1 exp PCOMA para2 DERPAR IZQCOR linst DERCOR .)
    double          reduce using rule 49 (para -> for IZQPAR para1 exp PCOMA para2 DERPAR IZQCOR linst DERCOR .)
    void            reduce using rule 49 (para -> for IZQPAR para1 exp PCOMA para2 DERPAR IZQCOR linst DERCOR .)
    break           reduce using rule 49 (para -> for IZQPAR para1 exp PCOMA para2 DERPAR IZQCOR linst DERCOR .)
    default         reduce using rule 49 (para -> for IZQPAR para1 exp PCOMA para2 DERPAR IZQCOR linst DERCOR .)
    case            reduce using rule 49 (para -> for IZQPAR para1 exp PCOMA para2 DERPAR IZQCOR linst DERCOR .)


state 235

    (47) els -> else IZQCOR linst . DERCOR
    (8) linst -> linst . inst
    (14) inst -> . asig PCOMA
    (15) inst -> . para
    (16) inst -> . si
    (17) inst -> . mientras
    (18) inst -> . cual
    (19) inst -> . call
    (20) inst -> . dow
    (21) inst -> . prin
    (22) inst -> . decla PCOMA
    (23) inst -> . tag
    (24) inst -> . gotot PCOMA
    (32) asig -> . ident lacs IGUAL exp
    (33) asig -> . ident IGUAL exp
    (34) asig -> . ident lacs INCE
    (35) asig -> . ident INCE
    (36) asig -> . ident lacs DECRE
    (37) asig -> . ident DECRE
    (49) para -> . for IZQPAR para1 exp PCOMA para2 DERPAR IZQCOR linst DERCOR
    (42) si -> . if IZQPAR exp DERPAR IZQCOR linst DERCOR lelsi els
    (43) si -> . if IZQPAR exp DERPAR IZQCOR linst DERCOR els
    (40) mientras -> . while IZQPAR exp DERPAR IZQCOR linst DERCOR
    (55) cual -> . switch IZQPAR exp DERPAR IZQCOR lcase def DERCOR
    (25) call -> . ident IZQPAR plex DERPAR PCOMA
    (41) dow -> . do IZQCOR linst DERCOR while IZQPAR exp DERPAR PCOMA
    (62) prin -> . printf IZQPAR STR lexpr DERPAR PCOMA
    (63) prin -> . printf IZQPAR STR DERPAR PCOMA
    (38) decla -> . TYPE ident lacs IGUAL exp
    (39) decla -> . TYPE ident IGUAL exp
    (30) tag -> . ident DP
    (31) gotot -> . goto ident
    (67) ident -> . ID
    (103) TYPE -> . int
    (104) TYPE -> . float
    (105) TYPE -> . char
    (106) TYPE -> . double
    (107) TYPE -> . void

    DERCOR          shift and go to state 239
    for             shift and go to state 61
    if              shift and go to state 62
    while           shift and go to state 63
    switch          shift and go to state 64
    do              shift and go to state 65
    printf          shift and go to state 66
    goto            shift and go to state 68
    ID              shift and go to state 44
    int             shift and go to state 7
    float           shift and go to state 8
    char            shift and go to state 9
    double          shift and go to state 10
    void            shift and go to state 11

    inst                           shift and go to state 105
    asig                           shift and go to state 49
    para                           shift and go to state 50
    si                             shift and go to state 51
    mientras                       shift and go to state 52
    cual                           shift and go to state 53
    call                           shift and go to state 54
    dow                            shift and go to state 55
    prin                           shift and go to state 56
    decla                          shift and go to state 57
    tag                            shift and go to state 58
    gotot                          shift and go to state 59
    ident                          shift and go to state 60
    TYPE                           shift and go to state 67

state 236

    (46) elsi -> else if IZQPAR . exp DERPAR IZQCOR linst DERCOR
    (64) exp -> . scanf IZQPAR DERPAR
    (72) exp -> . exp SUMA exp
    (73) exp -> . exp RESTA exp
    (74) exp -> . exp MULTI exp
    (75) exp -> . exp DIV exp
    (76) exp -> . exp PORCENTAJE exp
    (77) exp -> . exp DIGUAL exp
    (78) exp -> . exp DESIGUAL exp
    (79) exp -> . exp MAYOR exp
    (80) exp -> . exp MENOR exp
    (81) exp -> . exp MAYORIGUAL exp
    (82) exp -> . exp MENORIGUAL exp
    (83) exp -> . exp AND exp
    (84) exp -> . exp OR exp
    (85) exp -> . exp BAND exp
    (86) exp -> . exp BOR exp
    (87) exp -> . exp BXOR exp
    (88) exp -> . exp BLEFT exp
    (89) exp -> . exp BRIGHT exp
    (90) exp -> . RESTA exp
    (91) exp -> . NOT exp
    (92) exp -> . BNOT exp
    (93) exp -> . sizeof exp
    (94) exp -> . IZQPAR exp DERPAR
    (95) exp -> . IZQPAR TYPE DERPAR exp
    (96) exp -> . exp ASK exp DP exp
    (97) exp -> . DOUBLE
    (98) exp -> . INTEGER
    (99) exp -> . ident
    (100) exp -> . ident lacs
    (101) exp -> . STR
    (102) exp -> . IZQCOR lex DERCOR
    (67) ident -> . ID

    scanf           shift and go to state 34
    RESTA           shift and go to state 36
    NOT             shift and go to state 37
    BNOT            shift and go to state 38
    sizeof          shift and go to state 39
    IZQPAR          shift and go to state 35
    DOUBLE          shift and go to state 40
    INTEGER         shift and go to state 41
    STR             shift and go to state 42
    IZQCOR          shift and go to state 43
    ID              shift and go to state 44

    exp                            shift and go to state 240
    ident                          shift and go to state 32

state 237

    (60) def -> default DP linst break . PCOMA

    PCOMA           shift and go to state 241


state 238

    (58) caso -> case ID DP linst break . PCOMA

    PCOMA           shift and go to state 242


state 239

    (47) els -> else IZQCOR linst DERCOR .

    DERCOR          reduce using rule 47 (els -> else IZQCOR linst DERCOR .)
    for             reduce using rule 47 (els -> else IZQCOR linst DERCOR .)
    if              reduce using rule 47 (els -> else IZQCOR linst DERCOR .)
    while           reduce using rule 47 (els -> else IZQCOR linst DERCOR .)
    switch          reduce using rule 47 (els -> else IZQCOR linst DERCOR .)
    do              reduce using rule 47 (els -> else IZQCOR linst DERCOR .)
    printf          reduce using rule 47 (els -> else IZQCOR linst DERCOR .)
    goto            reduce using rule 47 (els -> else IZQCOR linst DERCOR .)
    ID              reduce using rule 47 (els -> else IZQCOR linst DERCOR .)
    int             reduce using rule 47 (els -> else IZQCOR linst DERCOR .)
    float           reduce using rule 47 (els -> else IZQCOR linst DERCOR .)
    char            reduce using rule 47 (els -> else IZQCOR linst DERCOR .)
    double          reduce using rule 47 (els -> else IZQCOR linst DERCOR .)
    void            reduce using rule 47 (els -> else IZQCOR linst DERCOR .)
    break           reduce using rule 47 (els -> else IZQCOR linst DERCOR .)
    default         reduce using rule 47 (els -> else IZQCOR linst DERCOR .)
    case            reduce using rule 47 (els -> else IZQCOR linst DERCOR .)


state 240

    (46) elsi -> else if IZQPAR exp . DERPAR IZQCOR linst DERCOR
    (72) exp -> exp . SUMA exp
    (73) exp -> exp . RESTA exp
    (74) exp -> exp . MULTI exp
    (75) exp -> exp . DIV exp
    (76) exp -> exp . PORCENTAJE exp
    (77) exp -> exp . DIGUAL exp
    (78) exp -> exp . DESIGUAL exp
    (79) exp -> exp . MAYOR exp
    (80) exp -> exp . MENOR exp
    (81) exp -> exp . MAYORIGUAL exp
    (82) exp -> exp . MENORIGUAL exp
    (83) exp -> exp . AND exp
    (84) exp -> exp . OR exp
    (85) exp -> exp . BAND exp
    (86) exp -> exp . BOR exp
    (87) exp -> exp . BXOR exp
    (88) exp -> exp . BLEFT exp
    (89) exp -> exp . BRIGHT exp
    (96) exp -> exp . ASK exp DP exp

    DERPAR          shift and go to state 243
    SUMA            shift and go to state 75
    RESTA           shift and go to state 76
    MULTI           shift and go to state 77
    DIV             shift and go to state 78
    PORCENTAJE      shift and go to state 79
    DIGUAL          shift and go to state 80
    DESIGUAL        shift and go to state 81
    MAYOR           shift and go to state 82
    MENOR           shift and go to state 83
    MAYORIGUAL      shift and go to state 84
    MENORIGUAL      shift and go to state 85
    AND             shift and go to state 86
    OR              shift and go to state 87
    BAND            shift and go to state 88
    BOR             shift and go to state 89
    BXOR            shift and go to state 90
    BLEFT           shift and go to state 91
    BRIGHT          shift and go to state 92
    ASK             shift and go to state 93


state 241

    (60) def -> default DP linst break PCOMA .

    DERCOR          reduce using rule 60 (def -> default DP linst break PCOMA .)


state 242

    (58) caso -> case ID DP linst break PCOMA .

    default         reduce using rule 58 (caso -> case ID DP linst break PCOMA .)
    case            reduce using rule 58 (caso -> case ID DP linst break PCOMA .)
    DERCOR          reduce using rule 58 (caso -> case ID DP linst break PCOMA .)


state 243

    (46) elsi -> else if IZQPAR exp DERPAR . IZQCOR linst DERCOR

    IZQCOR          shift and go to state 244


state 244

    (46) elsi -> else if IZQPAR exp DERPAR IZQCOR . linst DERCOR
    (8) linst -> . linst inst
    (9) linst -> . inst
    (14) inst -> . asig PCOMA
    (15) inst -> . para
    (16) inst -> . si
    (17) inst -> . mientras
    (18) inst -> . cual
    (19) inst -> . call
    (20) inst -> . dow
    (21) inst -> . prin
    (22) inst -> . decla PCOMA
    (23) inst -> . tag
    (24) inst -> . gotot PCOMA
    (32) asig -> . ident lacs IGUAL exp
    (33) asig -> . ident IGUAL exp
    (34) asig -> . ident lacs INCE
    (35) asig -> . ident INCE
    (36) asig -> . ident lacs DECRE
    (37) asig -> . ident DECRE
    (49) para -> . for IZQPAR para1 exp PCOMA para2 DERPAR IZQCOR linst DERCOR
    (42) si -> . if IZQPAR exp DERPAR IZQCOR linst DERCOR lelsi els
    (43) si -> . if IZQPAR exp DERPAR IZQCOR linst DERCOR els
    (40) mientras -> . while IZQPAR exp DERPAR IZQCOR linst DERCOR
    (55) cual -> . switch IZQPAR exp DERPAR IZQCOR lcase def DERCOR
    (25) call -> . ident IZQPAR plex DERPAR PCOMA
    (41) dow -> . do IZQCOR linst DERCOR while IZQPAR exp DERPAR PCOMA
    (62) prin -> . printf IZQPAR STR lexpr DERPAR PCOMA
    (63) prin -> . printf IZQPAR STR DERPAR PCOMA
    (38) decla -> . TYPE ident lacs IGUAL exp
    (39) decla -> . TYPE ident IGUAL exp
    (30) tag -> . ident DP
    (31) gotot -> . goto ident
    (67) ident -> . ID
    (103) TYPE -> . int
    (104) TYPE -> . float
    (105) TYPE -> . char
    (106) TYPE -> . double
    (107) TYPE -> . void

    for             shift and go to state 61
    if              shift and go to state 62
    while           shift and go to state 63
    switch          shift and go to state 64
    do              shift and go to state 65
    printf          shift and go to state 66
    goto            shift and go to state 68
    ID              shift and go to state 44
    int             shift and go to state 7
    float           shift and go to state 8
    char            shift and go to state 9
    double          shift and go to state 10
    void            shift and go to state 11

    linst                          shift and go to state 245
    inst                           shift and go to state 48
    asig                           shift and go to state 49
    para                           shift and go to state 50
    si                             shift and go to state 51
    mientras                       shift and go to state 52
    cual                           shift and go to state 53
    call                           shift and go to state 54
    dow                            shift and go to state 55
    prin                           shift and go to state 56
    decla                          shift and go to state 57
    tag                            shift and go to state 58
    gotot                          shift and go to state 59
    ident                          shift and go to state 60
    TYPE                           shift and go to state 67

state 245

    (46) elsi -> else if IZQPAR exp DERPAR IZQCOR linst . DERCOR
    (8) linst -> linst . inst
    (14) inst -> . asig PCOMA
    (15) inst -> . para
    (16) inst -> . si
    (17) inst -> . mientras
    (18) inst -> . cual
    (19) inst -> . call
    (20) inst -> . dow
    (21) inst -> . prin
    (22) inst -> . decla PCOMA
    (23) inst -> . tag
    (24) inst -> . gotot PCOMA
    (32) asig -> . ident lacs IGUAL exp
    (33) asig -> . ident IGUAL exp
    (34) asig -> . ident lacs INCE
    (35) asig -> . ident INCE
    (36) asig -> . ident lacs DECRE
    (37) asig -> . ident DECRE
    (49) para -> . for IZQPAR para1 exp PCOMA para2 DERPAR IZQCOR linst DERCOR
    (42) si -> . if IZQPAR exp DERPAR IZQCOR linst DERCOR lelsi els
    (43) si -> . if IZQPAR exp DERPAR IZQCOR linst DERCOR els
    (40) mientras -> . while IZQPAR exp DERPAR IZQCOR linst DERCOR
    (55) cual -> . switch IZQPAR exp DERPAR IZQCOR lcase def DERCOR
    (25) call -> . ident IZQPAR plex DERPAR PCOMA
    (41) dow -> . do IZQCOR linst DERCOR while IZQPAR exp DERPAR PCOMA
    (62) prin -> . printf IZQPAR STR lexpr DERPAR PCOMA
    (63) prin -> . printf IZQPAR STR DERPAR PCOMA
    (38) decla -> . TYPE ident lacs IGUAL exp
    (39) decla -> . TYPE ident IGUAL exp
    (30) tag -> . ident DP
    (31) gotot -> . goto ident
    (67) ident -> . ID
    (103) TYPE -> . int
    (104) TYPE -> . float
    (105) TYPE -> . char
    (106) TYPE -> . double
    (107) TYPE -> . void

    DERCOR          shift and go to state 246
    for             shift and go to state 61
    if              shift and go to state 62
    while           shift and go to state 63
    switch          shift and go to state 64
    do              shift and go to state 65
    printf          shift and go to state 66
    goto            shift and go to state 68
    ID              shift and go to state 44
    int             shift and go to state 7
    float           shift and go to state 8
    char            shift and go to state 9
    double          shift and go to state 10
    void            shift and go to state 11

    inst                           shift and go to state 105
    asig                           shift and go to state 49
    para                           shift and go to state 50
    si                             shift and go to state 51
    mientras                       shift and go to state 52
    cual                           shift and go to state 53
    call                           shift and go to state 54
    dow                            shift and go to state 55
    prin                           shift and go to state 56
    decla                          shift and go to state 57
    tag                            shift and go to state 58
    gotot                          shift and go to state 59
    ident                          shift and go to state 60
    TYPE                           shift and go to state 67

state 246

    (46) elsi -> else if IZQPAR exp DERPAR IZQCOR linst DERCOR .

    else            reduce using rule 46 (elsi -> else if IZQPAR exp DERPAR IZQCOR linst DERCOR .)
    DERCOR          reduce using rule 46 (elsi -> else if IZQPAR exp DERPAR IZQCOR linst DERCOR .)
    for             reduce using rule 46 (elsi -> else if IZQPAR exp DERPAR IZQCOR linst DERCOR .)
    if              reduce using rule 46 (elsi -> else if IZQPAR exp DERPAR IZQCOR linst DERCOR .)
    while           reduce using rule 46 (elsi -> else if IZQPAR exp DERPAR IZQCOR linst DERCOR .)
    switch          reduce using rule 46 (elsi -> else if IZQPAR exp DERPAR IZQCOR linst DERCOR .)
    do              reduce using rule 46 (elsi -> else if IZQPAR exp DERPAR IZQCOR linst DERCOR .)
    printf          reduce using rule 46 (elsi -> else if IZQPAR exp DERPAR IZQCOR linst DERCOR .)
    goto            reduce using rule 46 (elsi -> else if IZQPAR exp DERPAR IZQCOR linst DERCOR .)
    ID              reduce using rule 46 (elsi -> else if IZQPAR exp DERPAR IZQCOR linst DERCOR .)
    int             reduce using rule 46 (elsi -> else if IZQPAR exp DERPAR IZQCOR linst DERCOR .)
    float           reduce using rule 46 (elsi -> else if IZQPAR exp DERPAR IZQCOR linst DERCOR .)
    char            reduce using rule 46 (elsi -> else if IZQPAR exp DERPAR IZQCOR linst DERCOR .)
    double          reduce using rule 46 (elsi -> else if IZQPAR exp DERPAR IZQCOR linst DERCOR .)
    void            reduce using rule 46 (elsi -> else if IZQPAR exp DERPAR IZQCOR linst DERCOR .)
    break           reduce using rule 46 (elsi -> else if IZQPAR exp DERPAR IZQCOR linst DERCOR .)
    default         reduce using rule 46 (elsi -> else if IZQPAR exp DERPAR IZQCOR linst DERCOR .)
    case            reduce using rule 46 (elsi -> else if IZQPAR exp DERPAR IZQCOR linst DERCOR .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for SUMA in state 168 resolved as shift
WARNING: shift/reduce conflict for RESTA in state 168 resolved as shift
WARNING: shift/reduce conflict for MULTI in state 168 resolved as shift
WARNING: shift/reduce conflict for DIV in state 168 resolved as shift
WARNING: shift/reduce conflict for PORCENTAJE in state 168 resolved as shift
WARNING: shift/reduce conflict for DIGUAL in state 168 resolved as shift
WARNING: shift/reduce conflict for DESIGUAL in state 168 resolved as shift
WARNING: shift/reduce conflict for MAYOR in state 168 resolved as shift
WARNING: shift/reduce conflict for MENOR in state 168 resolved as shift
WARNING: shift/reduce conflict for MAYORIGUAL in state 168 resolved as shift
WARNING: shift/reduce conflict for MENORIGUAL in state 168 resolved as shift
WARNING: shift/reduce conflict for AND in state 168 resolved as shift
WARNING: shift/reduce conflict for OR in state 168 resolved as shift
WARNING: shift/reduce conflict for BAND in state 168 resolved as shift
WARNING: shift/reduce conflict for BOR in state 168 resolved as shift
WARNING: shift/reduce conflict for BXOR in state 168 resolved as shift
WARNING: shift/reduce conflict for BLEFT in state 168 resolved as shift
WARNING: shift/reduce conflict for BRIGHT in state 168 resolved as shift
WARNING: shift/reduce conflict for ASK in state 168 resolved as shift
WARNING: shift/reduce conflict for SUMA in state 184 resolved as shift
WARNING: shift/reduce conflict for RESTA in state 184 resolved as shift
WARNING: shift/reduce conflict for MULTI in state 184 resolved as shift
WARNING: shift/reduce conflict for DIV in state 184 resolved as shift
WARNING: shift/reduce conflict for PORCENTAJE in state 184 resolved as shift
WARNING: shift/reduce conflict for DIGUAL in state 184 resolved as shift
WARNING: shift/reduce conflict for DESIGUAL in state 184 resolved as shift
WARNING: shift/reduce conflict for MAYOR in state 184 resolved as shift
WARNING: shift/reduce conflict for MENOR in state 184 resolved as shift
WARNING: shift/reduce conflict for MAYORIGUAL in state 184 resolved as shift
WARNING: shift/reduce conflict for MENORIGUAL in state 184 resolved as shift
WARNING: shift/reduce conflict for AND in state 184 resolved as shift
WARNING: shift/reduce conflict for OR in state 184 resolved as shift
WARNING: shift/reduce conflict for BAND in state 184 resolved as shift
WARNING: shift/reduce conflict for BOR in state 184 resolved as shift
WARNING: shift/reduce conflict for BXOR in state 184 resolved as shift
WARNING: shift/reduce conflict for BLEFT in state 184 resolved as shift
WARNING: shift/reduce conflict for BRIGHT in state 184 resolved as shift
WARNING: shift/reduce conflict for ASK in state 184 resolved as shift
